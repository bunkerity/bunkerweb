{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#overview","title":"Overview","text":"Make your web services secure by default ! <p>BunkerWeb is a next-generation and open-source Web Application Firewall (WAF).</p> <p>Being a full-featured web server (based on NGINX under the hood), it will protect your web services to make them \"secure by default\". BunkerWeb integrates seamlessly into your existing environments (Linux, Docker, Swarm, Kubernetes, \u2026) and is fully configurable (don't panic, there is an awesome web UI if you don't like the CLI) to meet your own use-cases . In other words, cybersecurity is no more a hassle.</p> <p>BunkerWeb contains primary security features as part of the core but can be easily extended with additional ones thanks to a plugin system.</p>"},{"location":"#why-bunkerweb","title":"Why BunkerWeb ?","text":"<ul> <li> <p>Easy integration into existing environments : Seamlessly integrate BunkerWeb into various environments such as Linux, Docker, Swarm, Kubernetes and more. Enjoy a smooth transition and hassle-free implementation.</p> </li> <li> <p>Highly customizable : Tailor BunkerWeb to your specific requirements with ease. Enable, disable, and configure features effortlessly, allowing you to customize the security settings according to your unique use case.</p> </li> <li> <p>Secure by default : BunkerWeb provides out-of-the-box, hassle-free minimal security for your web services. Experience peace of mind and enhanced protection right from the start.</p> </li> <li> <p>Awesome web UI : Take control of BunkerWeb more efficiently with the exceptional web user interface (UI). Navigate settings and configurations effortlessly through a user-friendly graphical interface, eliminating the need for the command-line interface (CLI).</p> </li> <li> <p>Plugin system : Extend the capabilities of BunkerWeb to meet your own use cases. Seamlessly integrate additional security measures and customize the functionality of BunkerWeb according to your specific requirements.</p> </li> <li> <p>Free as in \"freedom\" : BunkerWeb is licensed under the free AGPLv3 license, embracing the principles of freedom and openness. Enjoy the freedom to use, modify, and distribute the software, backed by a supportive community.</p> </li> <li> <p>Professional services : Get technical support, tailored consulting and custom development directly from the maintainers of BunkerWeb. Visit the BunkerWeb Panel for more information.</p> </li> </ul>"},{"location":"#security-features","title":"Security features","text":"<p>Explore the impressive array of security features offered by BunkerWeb. While not exhaustive, here are some notable highlights:</p> <ul> <li> <p>HTTPS support with transparent Let's Encrypt automation : Easily secure your web services with automated Let's Encrypt integration, ensuring encrypted communication between clients and your server.</p> </li> <li> <p>State-of-the-art web security : Benefit from cutting-edge web security measures, including comprehensive HTTP security headers, prevention of data leaks, and TLS hardening techniques.</p> </li> <li> <p>Integrated ModSecurity WAF with the OWASP Core Rule Set : Enjoy enhanced protection against web application attacks with the integration of ModSecurity, fortified by the renowned OWASP Core Rule Set.</p> </li> <li> <p>Automatic ban of strange behaviors based on HTTP status code : BunkerWeb intelligently identifies and blocks suspicious activities by automatically banning behaviors that trigger abnormal HTTP status codes.</p> </li> <li> <p>Apply connections and requests limit for clients : Set limits on the number of connections and requests from clients, preventing resource exhaustion and ensuring fair usage of server resources.</p> </li> <li> <p>Block bots with challenge-based verification : Keep malicious bots at bay by challenging them to solve puzzles such as cookies, JavaScript tests, captcha, hCaptcha, reCAPTCHA or Turnstile, effectively blocking unauthorized access.</p> </li> <li> <p>Block known bad IPs with external blacklists and DNSBL : Utilize external blacklists and DNS-based blackhole lists (DNSBL) to proactively block known malicious IP addresses, bolstering your defense against potential threats.</p> </li> <li> <p>And much more... : BunkerWeb is packed with a plethora of additional security features that go beyond this list, providing you with comprehensive protection and peace of mind.</p> </li> </ul> <p>To delve deeper into the core security features, we invite you to explore the security tuning section of the documentation. Discover how BunkerWeb empowers you to fine-tune and optimize security measures according to your specific needs.</p>"},{"location":"#demo","title":"Demo","text":"<p>A demo website protected with BunkerWeb is available at demo.bunkerweb.io. Feel free to visit it and perform some security tests.</p>"},{"location":"#web-ui","title":"Web UI","text":"<p>BunkerWeb offers an optional user interface to manage your instances and their configurations. An online read-only demo is available at demo-ui.bunkerweb.io, feel free to test it by yourself.</p>"},{"location":"#bunkerweb-cloud","title":"BunkerWeb Cloud","text":"<p>Don't want to self-host and manage your own BunkerWeb instance(s) ? You might be interested into BunkerWeb Cloud, our fully managed SaaS offer for BunkerWeb.</p> <p>Try our BunkerWeb Cloud beta offer for free and get access to :</p> <ul> <li>Fully managed BunkerWeb instance hosted in our cloud</li> <li>All BunkerWeb features including PRO ones</li> <li>Monitoring platform including dashboards and alerts</li> <li>Technical support to assist you in the configuration</li> </ul> <p>You will find more information about BunkerWeb Cloud in the FAQ page of the BunkerWeb panel.</p>"},{"location":"#pro-version","title":"PRO version","text":"<p>When using BunkerWeb you have the choice of the version you want to use : open-source or PRO.</p> <p>Whether it's enhanced security, an enriched user experience, or technical monitoring, the BunkerWeb PRO version will allow you to fully benefit from BunkerWeb and respond to your professional needs.</p> <p>Be it in the documentation or the user interface, the PRO features are annotated with a crown  to distinguish them from those integrated into the open-source version.</p> <p>You can upgrade from the open-source version to the PRO one easily and at any time you want. The process is pretty straightforward :</p> <ul> <li>Claim your free trial on the BunkerWeb panel</li> <li>Once connected to the client area, copy your PRO license key</li> <li>Paste your private key into BunkerWeb using the web UI or specific setting</li> </ul> <p>Do not hesitate to visit the BunkerWeb panel or contact us if you have any question regarding the PRO version.</p>"},{"location":"#professional-services","title":"Professional services","text":"<p>Get the most of BunkerWeb by getting professional services directly from the maintainers of the project. From technical support to tailored consulting and development, we are here to assist you in the security of your web services.</p> <p>You will find more information by visiting the BunkerWeb Panel, our dedicated platform for professional services.</p> <p>Don't hesitate to contact us if you have any question, we will be more than happy to respond to your needs.</p>"},{"location":"#ecosystem-community-and-resources","title":"Ecosystem, community and resources","text":"<p>Official websites, tools and resources about BunkerWeb :</p> <ul> <li>Website : get more information, news and articles about BunkerWeb</li> <li>Panel : dedicated platform to order and manage professional services (e.g. technical support) around BunkerWeb</li> <li>Documentation : technical documentation of the BunkerWeb solution</li> <li>Demo : demonstration website of BunkerWeb, don't hesitate to attempt attacks to test the robustness of the solution</li> <li>Web UI : online read-only demo of the web UI of BunkerWeb</li> <li>Configurator : user-friendly tool to help you configure BunkerWeb</li> <li>Threatmap : live cyber attack blocked by BunkerWeb instances all around the world</li> </ul> <p>Community and social networks :</p> <ul> <li>Discord</li> <li>LinkedIn</li> <li>Twitter</li> <li>Reddit</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#who-maintains-bunkerweb","title":"Who maintains BunkerWeb ?","text":"<p>BunkerWeb is maintained by Bunkerity, a French \ud83c\uddeb\ud83c\uddf7 company specialized in Cybersecurity \ud83d\udee1\ufe0f.</p>"},{"location":"about/#do-you-have-a-professional-version","title":"Do you have a professional version ?","text":"<p>Yes, we do offer a professional version of BunkerWeb called \"BunkerWeb PRO\".</p> <p>Here are the main benefits of BunkerWeb PRO :</p> <ul> <li>Unlock all features of BunkerWeb</li> <li>Pay per protected services</li> <li>Respond to professional needs</li> <li>Free trial with no credit card</li> <li>Best effort support included</li> </ul> <p>You can go the BunkerWeb panel to get more information and claim your free trial.</p>"},{"location":"about/#do-you-offer-professional-services","title":"Do you offer professional services ?","text":"<p>Yes, we offer professional services related to BunkerWeb.</p> <p>You can get in touch with us about any of the following :</p> <ul> <li>Consulting</li> <li>Support</li> <li>Custom development</li> <li>Partnership</li> </ul> <p>We have a dedicated panel to centralize all professional requests.</p> <p>You can also contact use at contact@bunkerity.com if you are interested.</p>"},{"location":"about/#where-to-get-community-support","title":"Where to get community support ?","text":"<p>To get free community support, you can use the following media :</p> <ul> <li>The #help channel of BunkerWeb in the Discord server</li> <li>The help category of GitHub discussions</li> <li>The /r/BunkerWeb subreddit</li> <li>The Server Fault and Super User forums</li> </ul> <p>Please don't use GitHub issues to ask for help, use it only for bug reports and feature requests.</p>"},{"location":"about/#how-can-i-contribute","title":"How can I contribute ?","text":"<p>Here is a non-exhaustive list of what you can do :</p> <ul> <li>Join the Discord server, /r/BunkerWeb subreddit and GitHub discussions to talk about the project and help others</li> <li>Follow us on LinkedIn, Twitter and GitHub</li> <li>Report bugs and propose new features using issues</li> <li>Contribute to the code using pull requests</li> <li>Write an awesome plugin</li> <li>Talk about BunkerWeb to your friends/colleagues, on social media, on your blog, ...</li> </ul>"},{"location":"about/#how-to-report-security-issue","title":"How to report security issue ?","text":"<p>Please contact us at security@bunkerity.com using the following PGP key :</p> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGCEMiMBEACtXJBDbF86qjC/Q1cfmJfYcYrbk6eE5czknG294XObC97wAgDf\n/MbX6bnti4kDRpflGDqQtwOXudcEzledTD4bdDUKvZwqPoYQGa24uCuUxSINTLXr\nRuoMaKfpvs7trsFXp5iYUqf4Org2aaJE7Tk/9sOvxgdqsT22jEgCZXTRU1qG494U\nu6XRQN8hKlw6aa6njjX9vUk6Jpl46/kwwO9mpXBZX6iFKYnBlUWs2k8d6D6cO5aZ\nKLoYyz5v3Gw2hHSqj4qbVQPTIT7qrrcfd8nblYK7Dh3IM+vQq7a7lB0AudIyBNPd\nrsypi9ZYgwI3lv/rmQnDc32Ua5cLvTvgg/XoaNK9ogc3kei1+hXODEgRA/zvSKqq\n20i/1Y0OnIGv89LOI6urWpOgDAhQUV5xvANll2lm3Bkmy29UOzNadUc/yImxrM06\nHwX82ju6PFAqOaxMW6SEE71ylGOSlikAGNcmmc5Ihd1J/VRZA4PBiQ31gQxFRpUC\n3NTw2QNAD1kjni5PuQD10Q1Ognvb6uJh/MtqsoX6r1t+Oly9MblFSuyqFkqNO3F0\nQAJqprhJlQ3YOcJdJ1EZR7qs0xJm5h+lw0Z/UINqkwiZUW3PCO8BKxfq6sfdwM8L\n5hPhyUzy2gIJ0J/4NGYEBH1ojoYODGU8OCSmyjSTY9SoVMeWDfqYP4ZTvQARAQAB\ntCVidW5rZXJpdHktcGdwIDxjb250YWN0QGJ1bmtlcml0eS5jb20+iQJUBBMBCAA+\nFiEEw78SjkcVxXCq7hStPYCAbxJgKnwFAmCEMiMCGwMFCQPCIP0FCwkIBwIGFQoJ\nCAsCBBYCAwECHgECF4AACgkQPYCAbxJgKnzvYhAAnNqGB6ce2eZzwk1EiNlNaXaA\nhFWLq/s/J1IOAP+0V5jKJxA6zTX01HyIfIIHQy6nrxxEXzYsIUHdJ+HBPCNswCqn\n2d/aDkkfoEUc1bUD0c2bXfoSCsAeIoK+eOf6iSr4IENVoIUYFQTUKFNu+Y7eDL0I\nJ8Xadg53G+fkK9LE6TeYpBs3hDT4w7vlDfIwWa1NC9HoLzSmZ2fqZ7SnihLGsLmp\n98VqDrDjhRPzrz5/tVYgvPCQQU5ED/TayCCYvrGpw9gP8qmEOabIUz0ppGwEfQVs\nWycilm1/Js/qjdbxUFMipBIzDu7bI3kMLmENhI+16Xtub9dUrvkW2SdDngYhtWj8\nIzVOe6N/XDuiRGpaYFpEuXbrnDFexe1ygZwnVHt3fukPfa7W8mhMs2kY1ishIA0O\nWElKO1Q6N0ZWEad0PwM8NCDjaDUNWQC36ZF/MS+ipHWx9joPUjImY2AXDjN+L+Si\nABQIe4Fo6Jx6S6Bi8YvPq8idYZvaWFJjBvmaPjxdUMPbIsMRiEjvlrhvqhLuVBpE\nlGA+M4UJGw5yBl+yiiLDuws/Fppv9HwNqw6Uq1m1XaW859Om1GGBKYfphyn+fHjR\n7ftOuT7Ss4zioXT4mscOZgkfzDAqgpZiHjYhe7tLUu7iD6UEsZmey/gRV0hCxng3\nN7yaRrBu0+3sIQV4jYC5Ag0EYIQyIwEQALSurJGOx7At5mRFjvhXd4/JHuBZZOSI\nM45LSJ+mKYnAGmwsL0AneZMIf6Yc0Vcn32oqlIXN5aB8jIt91pChLre8tl/lFZZP\nxY3WIEBJhZF0FIUqSQLjg4HD0S70REii7Om1kgtZueid8V6T5F1JDcO2mDoh8oc9\nh9nRQ1Ld6dblEuwBzbFkI1K6OUk1+ec7+mQc7orHdBVgelmqwG7fGZnPiN3XfklF\ndnwSkFIX/qkAsKQmmx1VSzaGFoPLajf4wrkzZdA3iEafsHyvdEFlezZCZ7TsoHBh\ntNg1Psg6MbBVgiMfHyRHSEBJZ7r5Awj2MpFUFMOd1IPcor1I254mx0VYfCvof4Km\nRi1F/86kHc23A77pd4HFYZWiZjaWhh12L+wz5fDL5/sSFXVGSCtSWIKx6FjysZ+v\nszk3lItHoomZhA7M+FjU/cOjq9hae9uwZeU39DQk0/npln2RcHitoqgUIzII5woO\nS3SlMSc910tHf40D2cBr1iFKC0jQICjkDexB9CtNx/N25SJmLfiimYtk6/NHlPq4\nHXdq6ZfLZ7xQmuGcyWv4f0pwA2CK3twISpsIxIKe456WYTDtQu9d1s987dvmw6F/\nqURC6m2WPGroHb8COQTKzbshjpGUmLpyR3FXki4wNXeI1KaQLL7NpZmK6yJlWviO\n1sCjh4m7VS+zABEBAAGJAjwEGAEIACYWIQTDvxKORxXFcKruFK09gIBvEmAqfAUC\nYIQyIwIbDAUJA8Ig/QAKCRA9gIBvEmAqfP2WEACqmXEhu4ARl2yT9bay0+W3F1q1\nMrLQkcVOau2ihXx3PhYsXRUoEFj72VDAar41WIlHsPJfB14WtSlYcX2XdjHLHMpC\ndL2eGhqIcHzFChR0vGjtvm2wae/rJTChWf8WXiHrRnRcfFFfhpCvkNi43fQeH4yp\ncel2a35WV+IRbnkCkaly2NG3XO0t83Siok8Ku+OJGPatUMxJmaEVQeeXVPDzVRva\nrtvyd9Sclkd9QDPBLZyWHC1vsPKGRJpi5uDZjGxhaFRkimw/SYtFHj7AUrMKAIHB\nGfEcwC3Eq4rF0FeCOPfBd2vwGGrRflx76jK9rj288ta9Oq6u6ev8PCVzt0E7jrSf\nAX88vfVRcxihNfj/9i5xmY596jpgbvNA2aJX2hAO3Q8pD6AunVXPUyc3RlFHt7jC\ntL+9Xv7Qwjz7OToWqj+9cM6T+6oZLxYNVPT72Z/KOFW+mzGb87qjcsDMb/hu2fNq\ntSWyZk2AAgHQyG1y8vCQQzsDnUDM6NIPwYG5XMP+11WAsPk5fP1ksixpUqIWgjhY\nM22YUsjLeaRtgSmhAGIkbBgecs1EHSZZ6sf2lB8gSom1wW0UCBPSifP0DwYFizS5\nSOk62kZ0lqEctwgKDe3MNQnPxt9+tU9L1pIkyXgXihcOLiCMl434K0djJXxIbiX0\nJvbFAfI3qteepvnjBQ==\n=g1tf\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"advanced/","title":"Advanced usages","text":"<p>Many real-world use case examples are available in the examples folder of the GitHub repository.</p> <p>We also provide numerous boilerplates, such as YAML files for various integrations and database types. These are available in the misc/integrations folder.</p> <p>This section only focuses on advanced usages and security tuning, see the settings section of the documentation to see all the available settings.</p>"},{"location":"advanced/#use-cases","title":"Use cases","text":"<p>Testing</p> <p>To perform quick tests when multisite mode is enabled (and if you don't have the proper DNS entries set up for the domains) you can use curl with the HTTP Host header of your choice : <pre><code>curl -H \"Host: app1.example.com\" http://ip-or-fqdn-of-server\n</code></pre></p> <p>If you are using HTTPS, you will need to play with SNI : <pre><code>curl -H \"Host: app1.example.com\" --resolve example.com:443:ip-of-server https://example.com\n</code></pre></p>"},{"location":"advanced/#behind-load-balancer-or-reverse-proxy","title":"Behind load balancer or reverse proxy","text":"<p>Real IP</p> <p>When BunkerWeb is itself behind a load balancer or a reverse proxy, you need to configure it so it can get the real IP address of the clients. If you don't, the security features will block the IP address of the load balancer or reverse proxy instead of the client's one.</p> <p>BunkerWeb actually supports two methods to retrieve the real IP address of the client :</p> <ul> <li>Using the <code>PROXY protocol</code></li> <li>Using a HTTP header like <code>X-Forwarded-For</code></li> </ul> <p>The following settings can be used :</p> <ul> <li><code>USE_REAL_IP</code> : enable/disable real IP retrieval</li> <li><code>USE_PROXY_PROTOCOL</code> : enable/disable PROXY protocol support.</li> <li><code>REAL_IP_FROM</code> : list of trusted IP/network address allowed to send us the \"real IP\"</li> <li><code>REAL_IP_HEADER</code> : the HTTP header containing the real IP or special value <code>proxy_protocol</code> when using PROXY protocol</li> </ul> <p>You will find more settings about real IP in the settings section of the documentation.</p> HTTP headerProxy protocol <p>We will assume the following regarding the load balancers or reverse proxies (you will need to update the settings depending on your configuration) :</p> <ul> <li>They use the <code>X-Forwarded-For</code> header to set the real IP</li> <li>They have IPs in the <code>1.2.3.0/24</code> and <code>100.64.0.0/10</code> networks</li> </ul> Web UILinuxDockerDocker autoconfKubernetesSwarm <p>Navigate to the Global config page, select the Real IP plugin and fill out the following settings :</p> <p>Real IP settings (header) using web UI</p> <p>Please note that it's recommended to restart BunkerWeb when you change settings related to real IP.</p> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_REAL_IP=yes\nREAL_IP_FROM=1.2.3.0/24 100.64.0.0/16\nREAL_IP_HEADER=X-Forwarded-For\n...\n</code></pre> <p>Please note that it's recommended to issue a restart instead of reload when configuring settings related to real IP :</p> <pre><code>sudo systemctl restart bunkerweb &amp;&amp; \\\nsudo systemctl restart bunkerweb-scheduler\n</code></pre> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler pods.</p> <p>Here is the corresponding part of your <code>values.yaml</code> file that you can use :</p> <pre><code>bunkerweb:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"X-Forwarded-For\"\nscheduler:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"X-Forwarded-For\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler services:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your service is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>Read carefully</p> <p>Only use the PROXY protocol if you are sure that your load balancer or reverse proxy is sending it. If you enable it and it's not used, you will get errors.</p> <p>We will assume the following regarding the load balancers or reverse proxies (you will need to update the settings depending on your configuration) :</p> <ul> <li>They use the <code>PROXY protocol</code> v1 or v2 to set the real IP</li> <li>They have IPs in the <code>1.2.3.0/24</code> and <code>100.64.0.0/10</code> networks</li> </ul> Web UILinuxDockerDocker autoconfKubernetesSwarm <p>Navigate to the Global config page, select the Real IP plugin and fill out the following settings :</p> <p>Real IP settings (PROXY protocol) using web UI</p> <p>Please note that it's recommended to restart BunkerWeb when you change settings related to real IP.</p> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_REAL_IP=yes\nUSE_PROXY_PROTOCOL=yes\nREAL_IP_FROM=1.2.3.0/24 100.64.0.0/16\nREAL_IP_HEADER=proxy_protocol\n...\n</code></pre> <p>Please note that it's recommended to issue a restart instead of reload when configuring settings related to proxy protocols :</p> <pre><code>sudo systemctl restart bunkerweb &amp;&amp; \\\nsudo systemctl restart bunkerweb-scheduler\n</code></pre> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler pods.</p> <p>Here is the corresponding part of your <code>values.yaml</code> file that you can use:</p> <pre><code>bunkerweb:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: USE_PROXY_PROTOCOL\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"proxy_protocol\"\nscheduler:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: USE_PROXY_PROTOCOL\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"proxy_protocol\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler services.</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your service is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p>"},{"location":"advanced/#custom-configurations","title":"Custom configurations","text":"<p>To customize and add custom configurations to BunkerWeb, you can take advantage of its NGINX foundation. Custom NGINX configurations can be added in different NGINX contexts, including configurations for the ModSecurity Web Application Firewall (WAF), which is a core component of BunkerWeb. More details about ModSecurity configurations can be found here.</p> <p>Here are the available types of custom configurations:</p> <ul> <li>http: Configurations at the HTTP level of NGINX.</li> <li>server-http: Configurations at the HTTP/Server level of NGINX.</li> <li>default-server-http: Configurations at the Server level of NGINX, specifically for the \"default server\" when the supplied client name doesn't match any server name in <code>SERVER_NAME</code>.</li> <li>modsec-crs: Configurations applied before the OWASP Core Rule Set is loaded.</li> <li>modsec: Configurations applied after the OWASP Core Rule Set is loaded, or used when the Core Rule Set is not loaded.</li> <li>stream: Configurations at the Stream level of NGINX.</li> <li>server-stream: Configurations at the Stream/Server level of NGINX.</li> </ul> <p>Custom configurations can be applied globally or specifically for a particular server, depending on the applicable context and whether the multisite mode is enabled.</p> <p>The method for applying custom configurations depends on the integration being used. However, the underlying process involves adding files with the <code>.conf</code> suffix to specific folders. To apply a custom configuration for a specific server, the file should be placed in a subfolder named after the primary server name.</p> <p>Some integrations provide more convenient ways to apply configurations, such as using Configs in Docker Swarm or ConfigMap in Kubernetes. These options offer simpler approaches for managing and applying configurations.</p> Web UILinuxDockerDocker autoconfKubernetesSwarm <p>Navigate to the Configs page, click on Create new custom config, you can then choose if it's a global one or specific to a service, the configuration type and the configuration name :</p> <p>Custom configurations using web UI</p> <p>Don't forget to click on the save button.</p> <p>When using the Linux integration, custom configurations must be written to the /etc/bunkerweb/configs folder.</p> <p>Here is an example for server-http/hello-world.conf :</p> <pre><code>location /hello {\n  default_type 'text/plain';\n  content_by_lua_block {\n    ngx.say('world')\n  }\n}\n</code></pre> <p>Because BunkerWeb runs as an unprivileged user (nginx:nginx), you will need to edit the permissions :</p> <pre><code>chown -R root:nginx /etc/bunkerweb/configs &amp;&amp; \\\nchmod -R 770 /etc/bunkerweb/configs\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre> <p>When using the Docker integration, you have two choices for the addition of custom configurations :</p> <ul> <li>Using specific settings <code>*_CUSTOM_CONF_*</code> as environment variables (recommended)</li> <li>Writing .conf files to the volume mounted on /data of the scheduler</li> </ul> <p>Using settings</p> <p>The settings to use must follow the pattern <code>&lt;SITE&gt;_CUSTOM_CONF_&lt;TYPE&gt;_&lt;NAME&gt;</code> :</p> <ul> <li><code>&lt;SITE&gt;</code> : optional primary server name if multisite mode is enabled and the config must be applied to a specific service</li> <li><code>&lt;TYPE&gt;</code> : the type of config, accepted values are <code>HTTP</code>, <code>DEFAULT_SERVER_HTTP</code>, <code>SERVER_HTTP</code>, <code>MODSEC</code>, <code>MODSEC_CRS</code>, <code>STREAM</code> and <code>SERVER_STREAM</code></li> <li><code>&lt;NAME&gt;</code> : the name of config without the .conf suffix</li> </ul> <p>Here is a dummy example using a docker-compose file :</p> <pre><code>...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  environment:\n    - |\n      CUSTOM_CONF_SERVER_HTTP_hello-world=\n      location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n          ngx.say('world')\n          }\n      }\n  ...\n</code></pre> <p>Using files</p> <p>The first thing to do is to create the folders :</p> <pre><code>mkdir -p ./bw-data/configs/server-http\n</code></pre> <p>You can now write your configurations :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" &gt; ./bw-data/configs/server-http/hello-world.conf\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>When starting the scheduler container, you will need to mount the folder on /data :</p> <pre><code>bw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  volumes:\n    - ./bw-data:/data\n  ...\n</code></pre> <p>When using the Docker autoconf integration, you have two choices for adding custom configurations :</p> <ul> <li>Using specific settings <code>*_CUSTOM_CONF_*</code> as labels (easiest)</li> <li>Writing .conf files to the volume mounted on /data of the scheduler</li> </ul> <p>Using labels</p> <p>Limitations using labels</p> <p>When using labels with the Docker autoconf integration, you can only apply custom configurations for the corresponding web service. Applying http, default-server-http, stream or any global configurations (like server-http or server-stream for all services) is not possible : you will need to mount files for that purpose.</p> <p>The labels to use must follow the pattern <code>bunkerweb.CUSTOM_CONF_&lt;TYPE&gt;_&lt;NAME&gt;</code> :</p> <ul> <li><code>&lt;TYPE&gt;</code> : the type of config, accepted values are <code>SERVER_HTTP</code>, <code>MODSEC</code>, <code>MODSEC_CRS</code> and <code>SERVER_STREAM</code></li> <li><code>&lt;NAME&gt;</code> : the name of config without the .conf suffix</li> </ul> <p>Here is a dummy example using a docker-compose file :</p> <pre><code>myapp:\n  image: nginxdemos/nginx-hello\n  labels:\n    - |\n      bunkerweb.CUSTOM_CONF_SERVER_HTTP_hello-world=\n      location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n            ngx.say('world')\n        }\n        }\n  ...\n</code></pre> <p>Using files</p> <p>The first thing to do is to create the folders :</p> <pre><code>mkdir -p ./bw-data/configs/server-http\n</code></pre> <p>You can now write your configurations :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" &gt; ./bw-data/configs/server-http/hello-world.conf\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>When starting the scheduler container, you will need to mount the folder on /data :</p> <pre><code>bw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.1\n  volumes:\n    - ./bw-data:/data\n  ...\n</code></pre> <p>When using the Kubernetes integration, custom configurations are managed using ConfigMap.</p> <p>To keep it simple, you don't even need to use the ConfigMap with a Pod (e.g. as environment variable or volume) : the autoconf Pod is listening for ConfigMap events and will update the custom configurations when needed.</p> <p>When creating a ConfigMap, you will need to add special labels :</p> <ul> <li>bunkerweb.io/CONFIG_TYPE : must be set to a valid custom configuration type (http, server-http, default-server-http, modsec, modsec-crs, stream or server-stream)</li> <li>bunkerweb.io/CONFIG_SITE : set to a server name to apply configuration to that specific server (optional, will be applied globally if unset)</li> </ul> <p>Here is the example :</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cfg-bunkerweb-all-server-http\n  annotations:\n      bunkerweb.io/CONFIG_TYPE: \"server-http\"\ndata:\n  myconf: |\n    location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n            ngx.say('world')\n        }\n    }\n</code></pre> <p>Custom Extra Config</p> <p>Since the <code>1.6.0-rc3</code> version, you can add/override settings using the <code>bunkerweb.io/CONFIG_TYPE=settings</code> annotation. Here is an example :</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cfg-bunkerweb-extra-settings\n  annotations:\n    bunkerweb.io/CONFIG_TYPE: \"settings\"\ndata:\n  USE_ANTIBOT: \"captcha\" # multisite setting that will be applied to all services that do not override it\n  USE_REDIS: \"yes\" # global setting that will be applied globally\n  ...\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>When using the Swarm integration, custom configurations are managed using Docker Configs.</p> <p>To keep it simple, you don't even need to attach the Config to a service : the autoconf service is listening for Config events and will update the custom configurations when needed.</p> <p>When creating a Config, you will need to add special labels :</p> <ul> <li>bunkerweb.CONFIG_TYPE : must be set to a valid custom configuration type (http, server-http, default-server-http, modsec, modsec-crs, stream or server-stream)</li> <li>bunkerweb.CONFIG_SITE : set to a server name to apply configuration to that specific server (optional, will be applied globally if unset)</li> </ul> <p>Here is the example :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" | docker config create -l bunkerweb.CONFIG_TYPE=server-http my-config -\n</code></pre> <p>There is no update mechanism : the alternative is to remove an existing config using <code>docker config rm</code> and then recreate it.</p>"},{"location":"advanced/#running-many-services-in-production","title":"Running many services in production","text":""},{"location":"advanced/#global-crs","title":"Global CRS","text":"<p>CRS plugins</p> <p>When the CRS is loaded globally, CRS plugins are not supported. If you need to use them, you will need to load the CRS per service.</p> <p>If you use BunkerWeb in production with a large number of services, and you enable the ModSecurity feature globally with CRS rules, the time required to load BunkerWeb configurations may become too long, potentially resulting in a timeout.</p> <p>The workaround is to load the CRS rules globally rather than per service. This behavior is not enabled by default for backward compatibility reasons and because it has a drawback: if you enable global CRS rule loading, it will no longer be possible to define modsec-crs rules (executed before the CRS rules) on a per-service basis. However, this limitation can be bypassed by writing global <code>modsec-crs</code> exclusion rules like this:</p> <pre><code>SecRule REQUEST_FILENAME \"@rx ^/somewhere$\" \"nolog,phase:4,allow,id:1010,chain\"\nSecRule REQUEST_HEADERS:Host \"@rx ^app1\\.example\\.com$\" \"nolog\"\n</code></pre> <p>You can enable the global CRS loading by setting <code>USE_MODSECURITY_GLOBAL_CRS</code> to <code>yes</code>.</p>"},{"location":"advanced/#adjust-max_allowed_packet-for-mariadbmysql","title":"Adjust max_allowed_packet for MariaDB/MySQL","text":"<p>It appears that the default value for the <code>max_allowed_packet</code> parameter in MariaDB and MySQL database servers is not sufficient when using BunkerWeb with a large number of services.</p> <p>If you encounter errors like this, especially on the scheduler:</p> <pre><code>[Warning] Aborted connection 5 to db: 'db' user: 'bunkerweb' host: '172.20.0.4' (Got a packet bigger than 'max_allowed_packet' bytes)\n</code></pre> <p>You will need to increase the <code>max_allowed_packet</code> on your database server.</p>"},{"location":"advanced/#persistence-of-bans-and-reports","title":"Persistence of bans and reports","text":"<p>By default, BunkerWeb stores bans and reports in a local Lua datastore. While simple and efficient, this setup means that data is lost when the instance is restarted. To ensure that bans and reports persist across restarts, you can configure BunkerWeb to use a remote Redis server.</p> <p>Why Use Redis?</p> <p>Redis is a powerful, in-memory data store commonly used as a database, cache, and message broker. It is highly scalable and supports a variety of data structures, including:</p> <ul> <li>Strings: Basic key-value pairs.</li> <li>Hashes: Field-value pairs within a single key.</li> <li>Lists: Ordered collections of strings.</li> <li>Sets: Unordered collections of unique strings.</li> <li>Sorted Sets: Ordered collections with scores.</li> </ul> <p>By leveraging Redis, BunkerWeb can persistently store bans, reports, and cache data, ensuring durability and scalability.</p> <p>Enabling Redis Support</p> <p>To enable Redis support, configure the following settings in your BunkerWeb configuration file:</p> <pre><code># Enable Redis support\nUSE_REDIS=yes\n\n# Redis server hostname or IP address\nREDIS_HOST=&lt;hostname&gt;\n\n# Redis server port number (default: 6379)\nREDIS_PORT=6379\n\n# Redis database number (default: 0)\nREDIS_DATABASE=0\n</code></pre> <ul> <li><code>USE_REDIS</code>: Set to <code>yes</code> to enable Redis integration.</li> <li><code>REDIS_HOST</code>: Specify the hostname or IP address of the Redis server.</li> <li><code>REDIS_PORT</code>: Specify the port number for the Redis server. Defaults to <code>6379</code>.</li> <li><code>REDIS_DATABASE</code>: Specify the Redis database number to use. Defaults to <code>0</code>.</li> </ul> <p>If you require more advanced settings, such as authentication, SSL/TLS support, or Sentinel mode, refer to the Redis plugin settings documentation for detailed guidance.</p>"},{"location":"advanced/#protect-udptcp-applications","title":"Protect UDP/TCP applications","text":"<p>Experimental feature</p> <p>This feature is not production-ready. Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>BunkerWeb offers the capability to function as a generic UDP/TCP reverse proxy, allowing you to protect any network-based applications operating at least on layer 4 of the OSI model. Instead of utilizing the \"classical\" HTTP module, BunkerWeb leverages the stream module of NGINX.</p> <p>It's important to note that not all settings and security features are available when using the stream module. Additional information on this can be found in the settings sections of the documentation.</p> <p>Configuring a basic reverse proxy is quite similar to the HTTP setup, as it involves using the same settings: <code>USE_REVERSE_PROXY=yes</code> and <code>REVERSE_PROXY_HOST=myapp:9000</code>. Even when BunkerWeb is positioned behind a Load Balancer, the settings remain the same (with PROXY protocol being the supported option due to evident reasons).</p> <p>On top of that, the following specific settings are used :</p> <ul> <li><code>SERVER_TYPE=stream</code> : activate <code>stream</code> mode (generic UDP/TCP) instead of <code>http</code> one (which is the default)</li> <li><code>LISTEN_STREAM_PORT=4242</code> : the listening \"plain\" (without SSL/TLS) port that BunkerWeb will listen on</li> <li><code>LISTEN_STREAM_PORT_SSL=4343</code> : the listening \"ssl/tls\" port that BunkerWeb will listen on</li> <li><code>USE_UDP=no</code> : listen for and forward UDP packets instead of TCP</li> </ul> <p>For complete list of settings regarding <code>stream</code> mode, please refer to the settings section of the documentation.</p> <p>multiple listening ports</p> <p>Since the <code>1.6.0-rc2</code> version, BunkerWeb supports multiple listening ports for the <code>stream</code> mode. You can specify them using the <code>LISTEN_STREAM_PORT</code> and <code>LISTEN_STREAM_PORT_SSL</code> settings.</p> <p>Here is an example :</p> <pre><code>...\nLISTEN_STREAM_PORT=4242\nLISTEN_STREAM_PORT_SSL=4343\nLISTEN_STREAM_PORT_1=4244\nLISTEN_STREAM_PORT_SSL_1=4344\n...\n</code></pre> DockerDocker autoconfSwarmKubernetesLinux <p>When using Docker integration, the easiest way of protecting existing network applications is to add the services in the <code>bw-services</code> network :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080\" # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - \"10000:10000\" # app1\n      - \"20000:20000\" # app2\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"app1.example.com app2.example.com\"\n      MULTISITE: \"yes\"\n      USE_REVERSE_PROXY: \"yes\" # Will be applied to all services\n      SERVER_TYPE: \"stream\" # Will be applied to all services\n      app1.example.com_REVERSE_PROXY_HOST: \"myapp1:9000\"\n      app1.example.com_LISTEN_STREAM_PORT: \"10000\"\n      app2.example.com_REVERSE_PROXY_HOST: \"myapp2:9000\"\n      app2.example.com_LISTEN_STREAM_PORT: \"20000\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n</code></pre> <p>Before running the Docker autoconf integration stack on your machine, you will need to edit the ports :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080\" # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - \"10000:10000\" # app1\n      - \"20000:20000\" # app2\n...\n</code></pre> <p>Once the stack is running, you can connect your existing applications to the <code>bw-services</code> network and configure BunkerWeb with labels :</p> <pre><code>services:\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.SERVER_NAME=app1.example.com\"\n      - \"bunkerweb.SERVER_TYPE=stream\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=myapp1:9000\"\n      - \"bunkerweb.LISTEN_STREAM_PORT=10000\"\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.SERVER_NAME=app2.example.com\"\n      - \"bunkerweb.SERVER_TYPE=stream\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=myapp2:9000\"\n      - \"bunkerweb.LISTEN_STREAM_PORT=20000\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Before running the Swarm integration stack on your machine, you will need to edit the ports :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      # app1\n      - published: 10000\n        target: 10000\n        mode: host\n        protocol: tcp\n      # app2\n      - published: 20000\n        target: 20000\n        mode: host\n        protocol: tcp\n...\n</code></pre> <p>Once the stack is running, you can connect your existing applications to the <code>bw-services</code> network and configure BunkerWeb with labels :</p> <pre><code>services:\n\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.SERVER_NAME=app1.example.com\"\n        - \"bunkerweb.SERVER_TYPE=stream\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=myapp1:9000\"\n        - \"bunkerweb.LISTEN_STREAM_PORT=10000\"\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.SERVER_NAME=app2.example.com\"\n        - \"bunkerweb.SERVER_TYPE=stream\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=myapp2:9000\"\n        - \"bunkerweb.LISTEN_STREAM_PORT=20000\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Experimental feature</p> <p>At the moment, Ingresses does not support the <code>stream</code> mode. What we are doing here is a workaround to make it work.</p> <p>Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>Before running the Kubernetes integration stack on your machine, you will need to open the ports on your load balancer :</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: lb\nspec:\n  type: LoadBalancer\n  ports:\n    - name: http # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      port: 80\n      targetPort: 8080\n    - name: app1\n      port: 10000\n      targetPort: 10000\n    - name: app2\n      port: 20000\n      targetPort: 20000\n  selector:\n    app: bunkerweb\n</code></pre> <p>Once the stack is running, you can create your ingress resources :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: services\n  annotations:\n    bunkerweb.io/SERVER_TYPE: \"stream\" # Will be applied to all services\n    bunkerweb.io/app1.example.com_LISTEN_STREAM_PORT: \"10000\"\n    bunkerweb.io/app2.example.com_LISTEN_STREAM_PORT: \"20000\"\nspec:\n  rules:\n    - host: app1.example.com\n      http:\n        paths:\n          - path: / # This isn't used in stream mode but is required\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-app1\n                port:\n                  number: 9000\n    - host: app2.example.com\n      http:\n        paths:\n          - path: / # This isn't used in stream mode but is required\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-app2\n                port:\n                  number: 9000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app1\n  namespace: services\n  labels:\n    app: app1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app1\n  template:\n    metadata:\n      labels:\n        app: app1\n    spec:\n      containers:\n        - name: app1\n          image: istio/tcp-echo-server:1.3\n          args: [\"9000\", \"app1\"]\n          ports:\n            - containerPort: 9000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app1\n  namespace: services\nspec:\n  selector:\n    app: app1\n  ports:\n    - protocol: TCP\n      port: 9000\n      targetPort: 9000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app2\n  namespace: services\n  labels:\n    app: app2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app2\n  template:\n    metadata:\n      labels:\n        app: app2\n    spec:\n      containers:\n        - name: app2\n          image: istio/tcp-echo-server:1.3\n          args: [\"9000\", \"app2\"]\n          ports:\n            - containerPort: 9000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app2\n  namespace: services\nspec:\n  selector:\n    app: app2\n  ports:\n    - protocol: TCP\n      port: 9000\n      targetPort: 9000\n</code></pre> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nSERVER_NAME=app1.example.com app2.example.com\nMULTISITE=yes\nUSE_REVERSE_PROXY=yes\nSERVER_TYPE=stream\napp1.example.com_REVERSE_PROXY_HOST=myapp1.domain.or.ip:9000\napp1.example.com_LISTEN_STREAM_PORT=10000\napp2.example.com_REVERSE_PROXY_HOST=myapp2.domain.or.ip:9000\napp2.example.com_LISTEN_STREAM_PORT=20000\n...\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre>"},{"location":"advanced/#php","title":"PHP","text":"<p>Experimental feature</p> <p>At the moment, PHP support with BunkerWeb is still in beta and we recommend you use a reverse-proxy architecture if you can. By the way, PHP is not supported at all for some integrations like Kubernetes.</p> <p>BunkerWeb supports PHP using external or remote PHP-FPM instances. We will assume that you are already familiar with managing that kind of services.</p> <p>The following settings can be used :</p> <ul> <li><code>REMOTE_PHP</code> : Hostname of the remote PHP-FPM instance.</li> <li><code>REMOTE_PHP_PATH</code> : Root folder containing files in the remote PHP-FPM instance.</li> <li><code>REMOTE_PHP_PORT</code> : Port of the remote PHP-FPM instance (default is 9000).</li> <li><code>LOCAL_PHP</code> : Path to the local socket file of PHP-FPM instance.</li> <li><code>LOCAL_PHP_PATH</code> : Root folder containing files in the local PHP-FPM instance.</li> </ul> DockerDocker autoconfSwarmKubernetesLinux <p>When using the Docker integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM container for your application and mount the folder containing PHP files</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as environment variables when starting BunkerWeb</li> </ul> <p>If you enable the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>We will assume that your PHP apps are located into a folder named <code>www</code>. Please note that you will need to fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 ./www &amp;&amp; \\\nfind ./www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind ./www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>You can now run BunkerWeb, configure it for your PHP application and also run the PHP apps :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - ./www:/var/www/html\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"app1.example.com app2.example.com\"\n      MULTISITE: \"yes\"\n      REMOTE_PHP_PATH: \"/app\" # Will be applied to all services thanks to the MULTISITE setting\n      app1.example.com_REMOTE_PHP: \"myapp1\"\n      app2.example.com_REMOTE_PHP: \"myapp2\"\n      app3.example.com_REMOTE_PHP: \"myapp3\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  myapp1:\n    image: php:fpm\n    volumes:\n      - ./www/app1.example.com:/app\n    networks:\n      - bw-services\n\n  myapp2:\n    image: php:fpm\n    volumes:\n      - ./www/app2.example.com:/app\n    networks:\n      - bw-services\n\n  myapp3:\n    image: php:fpm\n    volumes:\n      - ./www/app3.example.com:/app\n    networks:\n      - bw-services\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n</code></pre> <p>Multisite mode enabled</p> <p>The Docker autoconf integration integration implies the use of multisite mode : protecting one PHP application is the same as protecting multiple ones.</p> <p>When using the Docker autoconf integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM containers for your applications and mount the folder containing PHP apps</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as labels for your PHP-FPM container</li> </ul> <p>Since the Docker autoconf implies using the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>Once the folders are created, copy your files and fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 ./www &amp;&amp; \\\nfind ./www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind ./www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>When you start the BunkerWeb autoconf stack, mount the <code>www</code> folder into <code>/var/www/html</code> for the Scheduler container :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  AUTOCONF_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n    environment:\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - ./www:/var/www/html\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-docker\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n</code></pre> <p>You can now create your PHP-FPM containers, mount the correct subfolders and use labels to configure BunkerWeb :</p> <pre><code>services:\n  myapp1:\n      image: php:fpm\n      volumes:\n        - ./www/app1.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp1\n      labels:\n        - \"bunkerweb.SERVER_NAME=app1.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp1\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp2:\n      image: php:fpm\n      volumes:\n        - ./www/app2.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp2\n      labels:\n        - \"bunkerweb.SERVER_NAME=app2.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp2\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp3:\n      image: php:fpm\n      volumes:\n        - ./www/app3.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp3\n      labels:\n        - \"bunkerweb.SERVER_NAME=app3.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp3\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Multisite mode enabled</p> <p>The Swarm integration integration implies the use of multisite mode : protecting one PHP application is the same as protecting multiple ones.</p> <p>Shared volume</p> <p>Using PHP with the Docker Swarm integration needs a shared volume between all BunkerWeb and PHP-FPM instances which is not covered in this documentation.</p> <p>When using the Docker autoconf integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM containers for your applications and mount the folder containing PHP apps</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as labels for your PHP-FPM container</li> </ul> <p>Since the Swarm integration implies using the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>As an example, we will consider that you have a shared folder mounted on your worker nodes on the <code>/shared</code> endpoint.</p> <p>Once the folders are created, copy your files and fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 /shared/www &amp;&amp; \\\nfind /shared/www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind /shared/www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>When you start the BunkerWeb stack, mount the <code>/shared/www</code> folder into <code>/var/www/html</code> for the Scheduler container :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    volumes:\n      - /shared/www:/var/www/html\n...\n</code></pre> <p>You can now create your PHP-FPM services, mount the correct subfolders and use labels to configure BunkerWeb :</p> <pre><code>services:\n  myapp1:\n      image: php:fpm\n      volumes:\n        - ./www/app1.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp1\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app1.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp1\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp2:\n      image: php:fpm\n      volumes:\n        - ./www/app2.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp2\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app2.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp2\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp3:\n      image: php:fpm\n      volumes:\n        - ./www/app3.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp3\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app3.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp3\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>PHP is not supported for Kubernetes</p> <p>Kubernetes integration allows configuration through Ingress and the BunkerWeb controller only supports HTTP applications at the moment.</p> <p>We will assume that you already have the Linux integration stack running on your machine.</p> <p>By default, BunkerWeb will search for web files inside the <code>/var/www/html</code> folder. You can use it to store your PHP applications. Please note that you will need to configure your PHP-FPM service to get or set the user/group of the running processes and the UNIX socket file used to communicate with BunkerWeb.</p> <p>First of all, you will need to make sure that your PHP-FPM instance can access the files inside the <code>/var/www/html</code> folder and also that BunkerWeb can access the UNIX socket file in order to communicate with PHP-FPM. We recommend to set a different user like <code>www-data</code> for the PHP-FPM service and to give the nginx group access to the UNIX socket file. Here is corresponding PHP-FPM configuration :</p> <pre><code>...\n[www]\nuser = www-data\ngroup = www-data\nlisten = /run/php/php-fpm.sock\nlisten.owner = www-data\nlisten.group = nginx\nlisten.mode = 0660\n...\n</code></pre> <p>Don't forget to restart your PHP-FPM service :</p> <pre><code>systemctl restart php-fpm\n</code></pre> <p>If you enable the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>/var/www/html\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>Please note that you will need to fix the permissions so BunkerWeb (group <code>nginx</code>) can at least read files and list folders and PHP-FPM (user <code>www-data</code> but it might be different depending on your system) is the owner of the files and folders :</p> <pre><code>chown -R www-data:nginx /var/www/html &amp;&amp; \\\nfind /var/www/html -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind /var/www/html -type d -exec chmod 0750 {} \\;\n</code></pre> <p>You can now edit the <code>/etc/bunkerweb/variable.env</code> file :</p> <pre><code>HTTP_PORT=80\nHTTPS_PORT=443\nDNS_RESOLVERS=9.9.9.9 8.8.8.8 8.8.4.4\nAPI_LISTEN_IP=127.0.0.1\nMULTISITE=yes\nSERVER_NAME=app1.example.com app2.example.com app3.example.com\napp1.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp1.example.com_LOCAL_PHP_PATH=/var/www/html/app1.example.com\napp2.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp2.example.com_LOCAL_PHP_PATH=/var/www/html/app2.example.com\napp3.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp3.example.com_LOCAL_PHP_PATH=/var/www/html/app3.example.com\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre>"},{"location":"advanced/#ipv6","title":"IPv6","text":"<p>Experimental feature</p> <p>This feature is not production-ready. Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>By default, BunkerWeb will only listen on IPv4 addresses and won't use IPv6 for network communications. If you want to enable IPv6 support, you need to set <code>USE_IPV6=yes</code>. Please note that IPv6 configuration of your network and environment is out-of-the-scope of this documentation.</p> Docker / Autoconf / SwarmLinux <p>First of all, you will need to configure your Docker daemon to enable IPv6 support for containers and use ip6tables if needed. Here is sample configuration for your <code>/etc/docker/daemon.json</code> file :</p> <pre><code>{\n  \"experimental\": true,\n  \"ipv6\": true,\n  \"ip6tables\": true,\n  \"fixed-cidr-v6\": \"fd00:dead:beef::/48\"\n}\n</code></pre> <p>You can now restart the Docker service to apply the changes :</p> <pre><code>systemctl restart docker\n</code></pre> <p>Once Docker is setup to support IPv6 you can add the <code>USE_IPV6</code> setting and configure the <code>bw-services</code> for IPv6 :</p> <pre><code>services:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      USE_IPv6: \"yes\"\n\n...\n\nnetworks:\n  bw-services:\n    name: bw-services\n    enable_ipv6: true\n    ipam:\n      config:\n        - subnet: fd00:13:37::/48\n          gateway: fd00:13:37::1\n\n...\n</code></pre> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_IPV6=yes\n...\n</code></pre> <p>Let's check the status of BunkerWeb :</p> <pre><code>systemctl status bunkerweb\n</code></pre> <p>If they are already running, we can restart it :</p> <pre><code>systemctl restart bunkerweb\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb\n</code></pre>"},{"location":"advanced/#security-tuning","title":"Security tuning","text":"<p>BunkerWeb offers many security features that you can configure with settings. Even if the default values of settings ensure a minimal \"security by default\", we strongly recommend you tune them. By doing so you will be able to ensure the security level of your choice but also manage false positives.</p> <p>Other settings</p> <p>This section only focuses on security tuning, see the settings section of the documentation for other settings.</p> <p> </p> Overview and order of the core security plugins"},{"location":"advanced/#security-mode","title":"Security Mode","text":"<p>STREAM support </p> <p>The Security Mode setting determines how BunkerWeb handles detected threats. This flexible feature allows you to choose between monitoring or actively blocking suspicious activity, depending on their specific needs.</p> <ul> <li><code>detect</code>: Logs potential threats without blocking access. This mode is useful for identifying and analyzing false positives in a safe, non-disruptive manner.</li> <li><code>block</code> (default): Actively blocks detected threats while logging incidents to prevent unauthorized access and protect your application.</li> </ul> <p>Detect mode</p> <p>Switching to <code>detect</code> mode can help you identify and resolve potential false positives without disrupting legitimate clients. Once these issues are addressed, you can confidently switch back to <code>block</code> mode for full protection.</p>"},{"location":"advanced/#http-protocol","title":"HTTP protocol","text":""},{"location":"advanced/#deny-status-code","title":"Deny status code","text":"<p>STREAM support </p> <p>The first step in handling denied client access is defining the appropriate action. This can be configured using the <code>DENY_HTTP_STATUS</code> setting, which supports the following values:</p> <ul> <li><code>403</code>: Sends a standard \"Forbidden\" HTTP status code. A web page or custom content will be displayed to the client.</li> <li><code>444</code>: Silently closes the connection without displaying any web page or custom content.</li> </ul> <p>The default value is <code>403</code>. Setting it to <code>444</code> is recommended only if you have thoroughly addressed false positives, are experienced with BunkerWeb, and require a higher level of security.</p> <p>In stream mode, this setting is always enforced as <code>444</code>, meaning the connection will be closed, regardless of the configured value.</p>"},{"location":"advanced/#default-server","title":"Default server","text":"<p>STREAM support </p> <p>In the HTTP protocol, the <code>Host</code> header specifies the server the client intends to contact. However, this header is optional and may be missing or set to an unknown value. This scenario is common, as many bots scan the internet to exploit services or perform fingerprinting.</p> <p>To block requests with undefined or unknown <code>Host</code> values, you can enable the <code>DISABLE_DEFAULT_SERVER</code> setting by setting it to <code>yes</code> (default: <code>no</code>). When enabled, such requests are silently denied by closing the TCP connection using NGINX's special <code>444</code> status code, meaning no response is sent to the client.</p> <p>For stricter security, you can also close SSL/TLS connections when the Server Name Indication (SNI) is undefined or unknown by setting <code>DISABLE_DEFAULT_SERVER_STRICT_SNI</code> to <code>yes</code> (default: <code>no</code>). This approach blocks attackers at the SSL/TLS level. However, it may cause issues if your BunkerWeb instance is behind a reverse proxy that forwards HTTPS requests without SNI.</p>"},{"location":"advanced/#allowed-methods","title":"Allowed methods","text":"<p>STREAM support </p> <p>You can define the allowed HTTP methods using the <code>ALLOWED_METHODS</code> setting, listing them separated by a <code>|</code> (default: <code>GET|POST|HEAD</code>). If a client sends a request using a method not listed, they will receive a 405 - Method Not Allowed response.</p> <p>CORS requests</p> <p>You should also include <code>OPTIONS</code> to accommodate CORS pre-flight requests if needed.</p>"},{"location":"advanced/#max-sizes","title":"Max sizes","text":"<p>STREAM support </p> <p>The maximum request body size can be controlled using the <code>MAX_CLIENT_SIZE</code> setting (default: <code>10m</code>). Accepted values follow the syntax described here.</p> <p>To allow a request body of unlimited size, you can use the special value <code>0</code> (not recommended for security and performance reasons).</p>"},{"location":"advanced/#serve-files","title":"Serve files","text":"<p>STREAM support </p> <p>To prevent serving files from the <code>www</code> folder, set the <code>SERVE_FILES</code> option to <code>no</code> (default: <code>yes</code>). Using <code>no</code> is recommended if BunkerWeb is configured as a reverse proxy.</p>"},{"location":"advanced/#headers","title":"Headers","text":"<p>STREAM support </p> <p>Headers play a crucial role in HTTP security. While some headers may be overly verbose, others might require enhanced verbosity to ensure better security, particularly on the client side.</p>"},{"location":"advanced/#remove-headers","title":"Remove headers","text":"<p>STREAM support </p> <p>You can use the <code>REMOVE_HEADERS</code> setting to automatically remove specific verbose headers from HTTP responses. By default, it removes the following headers: <code>Server</code>, <code>Expect-CT</code>, <code>X-Powered-By</code>, <code>X-AspNet-Version</code>, <code>X-AspNetMvc-Version</code> and <code>Public-Key-Pins</code>.</p> <p>Headers to be removed should be listed and separated by spaces.</p>"},{"location":"advanced/#keep-upstream-headers","title":"Keep upstream headers","text":"<p>STREAM support </p> <p>The <code>KEEP_UPSTREAM_HEADERS</code> setting allows you to preserve specific headers from upstream servers, ensuring that BunkerWeb does not override them in HTTP responses.</p> <ul> <li>By default, it includes the headers: <code>Content-Security-Policy</code>, <code>Permissions-Policy</code>, and <code>X-Frame-Options</code>.</li> <li>To preserve all headers from the upstream server, use the special value <code>*</code>.</li> </ul> <p>Headers to be preserved must be listed and separated by spaces.</p>"},{"location":"advanced/#cookies","title":"Cookies","text":"<p>STREAM support </p> <p>Cookie security is critical for protecting user data and ensuring application security. Misconfigured cookies can expose sensitive information, making them a potential target for attacks such as Cross-Site Scripting (XSS) or Cross-Site Request Forgery (CSRF).</p> <p>To strengthen cookie security, you can use the following flags:</p> <ul> <li>HttpOnly: Prevents access to cookies via JavaScript using <code>document.cookie</code>, mitigating XSS risks.</li> <li>SameSite: Restricts cookie sharing policies for requests originating from third-party websites, reducing CSRF vulnerabilities.</li> <li>Secure: Ensures cookies are sent only over secure HTTPS connections, protecting them from being intercepted.</li> </ul> <p>You can configure these flags using the <code>COOKIE_FLAGS</code> setting (default: <code>* HttpOnly SameSite=Lax</code>). Refer to this guide for accepted values.</p> <p>To further enhance security, the <code>Secure</code> flag can be applied automatically for HTTPS requests by enabling the <code>COOKIE_AUTO_SECURE_FLAG</code> setting (default: <code>yes</code>).</p> <p>Important</p> <p>Disabling the <code>COOKIE_AUTO_SECURE_FLAG</code> setting may expose your cookies to interception over insecure HTTP connections.</p>"},{"location":"advanced/#security-headers","title":"Security headers","text":"<p>STREAM support </p> <p>Security headers are a fundamental aspect of web application security, helping protect against a wide range of vulnerabilities, including XSS, clickjacking, and other attacks. BunkerWeb simplifies the process by allowing you to configure these headers through its settings. Below is a list of key security headers, along with their corresponding settings and default values:</p> Header Setting Default <code>Content-Security-Policy</code> <code>CONTENT_SECURITY_POLICY</code> <code>object-src 'none'; form-action 'self'; frame-ancestors 'self';</code> <code>Strict-Transport-Security</code> <code>STRICT_TRANSPORT_SECURITY</code> <code>mmax-age=63072000; includeSubDomains; preload</code> <code>Referrer-Policy</code> <code>REFERRER_POLICY</code> <code>strict-origin-when-cross-origin</code> <code>Permissions-Policy</code> <code>PERMISSIONS_POLICY</code> <code>accelerometer=(), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(), compute-pressure=(), display-capture=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), identity-credentials-get=(), idle-detection=(), local-fonts=(), magnetometer=(), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=(), interest-cohort=()</code> <code>X-Frame-Options</code> <code>X_FRAME_OPTIONS</code> <code>SAMEORIGIN</code> <code>X-Content-Type-Options</code> <code>X_CONTENT_TYPE_OPTIONS</code> <code>nosniff</code> <code>X-DNS-Prefetch-Control</code> <code>X_DNS_PREFETCH_CONTROL</code> <code>off</code> <p>About Security Headers</p> <p>Security headers are a first line of defense against malicious actors. Properly configuring them can drastically reduce the attack surface of your application. Use the BunkerWeb settings to fine-tune these headers and ensure your application adheres to the highest security standards.</p>"},{"location":"advanced/#cors","title":"CORS","text":"<p>STREAM support </p> <p>Cross-Origin Resource Sharing (CORS) lets you control which origins can access your service and how they can do so.</p> <p>To enable CORS: 1. Include the <code>OPTIONS</code> HTTP method in the <code>ALLOWED_METHODS</code> setting to support pre-flight requests. 2. Configure the necessary CORS headers for proper handling of requests.</p> <p>Here is a list of settings related to CORS:</p> Setting Default Context Multiple Description <code>USE_CORS</code> <code>no</code> multisite no Use CORS <code>CORS_ALLOW_ORIGIN</code> <code>self</code> multisite no Allowed origins to make CORS requests : PCRE regex or * or self (for the same origin). <code>CORS_ALLOW_METHODS</code> <code>GET, POST, OPTIONS</code> multisite no Value of the Access-Control-Allow-Methods header. <code>CORS_ALLOW_HEADERS</code> <code>DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range</code> multisite no Value of the Access-Control-Allow-Headers header. <code>CORS_ALLOW_CREDENTIALS</code> <code>no</code> multisite no Send the Access-Control-Allow-Credentials header. <code>CORS_EXPOSE_HEADERS</code> <code>Content-Length,Content-Range</code> multisite no Value of the Access-Control-Expose-Headers header. <code>CROSS_ORIGIN_OPENER_POLICY</code> <code>same-origin</code> multisite no Value for the Cross-Origin-Opener-Policy header. <code>CROSS_ORIGIN_EMBEDDER_POLICY</code> <code>require-corp</code> multisite no Value for the Cross-Origin-Embedder-Policy header. <code>CROSS_ORIGIN_RESOURCE_POLICY</code> <code>same-site</code> multisite no Value for the Cross-Origin-Resource-Policy header. <code>CORS_MAX_AGE</code> <code>86400</code> multisite no Value of the Access-Control-Max-Age header. <code>CORS_DENY_REQUEST</code> <code>yes</code> multisite no Deny request and don't send it to backend if Origin is not allowed. <p>Here are examples of possible values for the <code>CORS_ALLOW_ORIGIN</code> setting, along with their behavior:</p> <ul> <li><code>*</code>: Allows requests from all origins.</li> <li><code>self</code>: Automatically allows requests from the same origin as the server_name configured.</li> <li><code>^https://www\\.example\\.com$</code>: Allows requests only from <code>https://www.example.com</code>.</li> <li><code>^https://.+\\.example\\.com$</code>: Allows requests from any subdomain ending with <code>.example.com</code>.</li> <li><code>^https://(www\\.example1\\.com|www\\.example2\\.com)$</code>: Allows requests from either <code>https://www.example1.com</code> or <code>https://www.example2.com</code>.</li> <li><code>^https?://www\\.example\\.com$</code>: Allows requests from both <code>https://www.example.com</code> and <code>http://www.example.com</code>.</li> </ul> <p>Helpful resources for configuring CORS settings:</p> <ul> <li>Cross-Origin-Opener-Policy: MDN Documentation</li> <li>Cross-Origin-Embedder-Policy: MDN Documentation</li> <li>Cross-Origin-Resource-Policy: MDN Documentation</li> </ul> <p>These examples and resources will help you configure CORS policies effectively, ensuring secure and controlled access to your service.</p>"},{"location":"advanced/#compression-algorithms","title":"Compression algorithms","text":"<p>STREAM support </p> <p>Compression algorithms in BunkerWeb, such as Brotli and Gzip, optimize performance by reducing the size of HTTP responses. These algorithms help save bandwidth and improve loading times for end-users.</p>"},{"location":"advanced/#brotli","title":"Brotli","text":"<p>The Brotli algorithm provides higher compression rates compared to Gzip, making it ideal for modern web applications.</p> Setting Default Context Multiple Description <code>USE_BROTLI</code> <code>no</code> multisite no Enable or disable Brotli compression. <code>BROTLI_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with brotli. <code>BROTLI_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Brotli compression to apply. <code>BROTLI_COMP_LEVEL</code> <code>6</code> multisite no Compression level for Brotli (0 = no compression, 11 = maximum compression)."},{"location":"advanced/#gzip","title":"Gzip","text":"<p>The Gzip algorithm is widely supported and ensures compatibility with older clients.</p> Setting Default Context Multiple Description <code>USE_GZIP</code> <code>no</code> multisite no Enable or disable Gzip compression. <code>GZIP_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with gzip. <code>GZIP_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Gzip compression to apply. <code>GZIP_COMP_LEVEL</code> <code>5</code> multisite no Compression level for Gzip (1 = least compression, 9 = maximum compression). <code>GZIP_PROXIED</code> <code>no-cache no-store private expired auth</code> multisite no Specifies which proxied requests should be compressed. <p>Choosing the Right Algorithm:</p> <ul> <li>Brotli: Provides better compression rates, suitable for modern browsers and applications where reducing payload size is a priority.</li> <li>Gzip: Offers broader compatibility and is ideal for environments with older clients.</li> </ul> <p>Optimizing Compression Settings</p> <p>Properly configuring MIME types and compression levels helps balance performance gains with resource usage.</p>"},{"location":"advanced/#https-ssltls","title":"HTTPS / SSL/TLS","text":"<p>Strong SSL/TLS certificates are essential for ensuring secure communication between clients and your server. They protect sensitive data from being intercepted or tampered with and are a fundamental component of a secure HTTPS setup.</p> <p>Ensuring your SSL/TLS certificates are strong, up-to-date, and properly configured is critical to safeguarding your application and building trust with your users. Combine these settings with a robust HTTPS/SSL/TLS setup for maximum protection.</p> <p>In addition to configuring HTTPS and SSL/TLS protocols, the following settings can be customized to enhance your security:</p> Setting Default Description <code>REDIRECT_HTTP_TO_HTTPS</code> <code>no</code> When set to <code>yes</code>, will redirect every HTTP request to HTTPS even if BunkerWeb is not configured with HTTPS. <code>AUTO_REDIRECT_HTTP_TO_HTTPS</code> <code>yes</code> When set to <code>yes</code>, will redirect every HTTP request to HTTPS only if BunkerWeb is configured with HTTPS. <code>SSL_PROTOCOLS</code> <code>TLSv1.2 TLSv1.3</code> List of supported SSL/TLS protocols when SSL is enabled. <code>HTTP2</code> <code>yes</code> When set to <code>yes</code>, will enable HTTP2 protocol support when using HTTPS. <code>HTTP3</code> <code>no</code> When set to <code>yes</code>, will enable HTTP3 protocol support when using HTTPS. <code>HTTP3_ALT_SVC_PORT</code> <code>443</code> HTTP3 alternate service port. This value will be used as part of the Alt-Svc header. <code>LISTEN_HTTP</code> <code>yes</code> When set to <code>no</code>, BunkerWeb will not listen for HTTP requests. Useful if you want HTTPS only for example. <p>About HTTP3</p> <p>HTTP/3 is the latest iteration of the Hypertext Transfer Protocol, designed to enhance web performance and security. Unlike its predecessors, HTTP/1.1 and HTTP/2, which rely on the Transmission Control Protocol (TCP), HTTP/3 utilizes QUIC\u2014a transport layer protocol developed by Google that operates over the User Datagram Protocol (UDP). This shift addresses issues like head-of-line blocking in TCP, leading to faster and more reliable connections.</p> <p>NGINX introduced experimental support for QUIC and HTTP/3 starting from version 1.25.0. However, this support is still in the experimental stage, and caution is advised when deploying it in production environments. For more details, refer to NGINX's official documentation.</p> <p>Given the experimental nature of HTTP/3 support in NGINX, it may not be suitable for all use cases. Thorough testing is recommended before enabling it in a production setting.</p>"},{"location":"advanced/#lets-encrypt","title":"Let's Encrypt","text":"<p>STREAM support </p> <p>BunkerWeb offers automatic Let's Encrypt certificate generation and renewal, making it simple to secure your web applications with HTTPS / SSL/TLS. Let\u2019s Encrypt is a free, automated, and widely trusted Certificate Authority (CA) that provides SSL/TLS certificates to enable encrypted communication.</p> <p>Prerequisites</p> <p>To use this feature, ensure proper DNS A records are set up for each domain, pointing to the public IP(s) where BunkerWeb is accessible.</p> <p>Below is the list of related settings:</p> Setting Default Description <code>AUTO_LETS_ENCRYPT</code> <code>no</code> When set to <code>yes</code>, HTTPS / SSL/TLS will be enabled with automatic certificate generation and renewal from Let's Encrypt. <code>EMAIL_LETS_ENCRYPT</code> <code>contact@{FIRST_SERVER}</code> Email to use when generating certificates. Let's Encrypt will send notifications to that email like certificate expiration. <code>LETS_ENCRYPT_CHALLENGE</code> <code>http</code> The challenge type to use for Let's Encrypt (http or dns). <code>LETS_ENCRYPT_DNS_PROVIDER</code> The DNS provider to use for DNS challenges. <code>LETS_ENCRYPT_DNS_PROPAGATION</code> <code>default</code> The time to wait for DNS propagation in seconds for DNS challenges. <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> Configuration item that will be added to the credentials.ini file for the DNS provider (e.g. 'cloudflare_api_token 123456') for DNS challenges. (Values can also be base64 encoded or it can be a base64 encoded json object) <code>USE_LETS_ENCRYPT_WILDCARD</code> <code>no</code> Create wildcard certificates for all domains. This allows a single certificate to secure multiple subdomains. (Only available with DNS challenges) <code>USE_LETS_ENCRYPT_STAGING</code> <code>no</code> Use the staging environment for Let\u2019s Encrypt certificate generation. Useful when you are testing your deployments to avoid being rate limited in the production environment. <code>LETS_ENCRYPT_CLEAR_OLD_CERTS</code> <code>no</code> Clear old certificates when renewing. <p>Information and behavior</p> <ul> <li> <p>The <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> setting is a multiple setting and can be used to set multiple items for the DNS provider. The items will be saved as a cache file and Certbot will read the credentials from it.</p> </li> <li> <p>If no <code>LETS_ENCRYPT_DNS_PROPAGATION</code> setting is set, the provider's default propagation time will be used.</p> </li> </ul> <p>Wildcard certificates</p> <p>Wildcard certificates are only available with DNS challenges. If you want to use them, you will need to set the <code>USE_LETS_ENCRYPT_WILDCARD</code> setting to <code>yes</code>.</p>"},{"location":"advanced/#available-dns-providers","title":"Available DNS Providers","text":"Provider Description Mandatory Settings Optional Settings Link(s) <code>cloudflare</code> Cloudflare <code>api_token</code> Documentation <code>desec</code> deSEC <code>token</code> Documentation <code>digitalocean</code> DigitalOcean <code>token</code> Documentation <code>dnsimple</code> DNSimple <code>token</code> Documentation <code>dnsmadeeasy</code> DNS Made Easy <code>api_key</code><code>secret_key</code> Documentation <code>gehirn</code> Gehirn DNS <code>api_token</code><code>api_secret</code> Documentation <code>google</code> Google Cloud <code>project_id</code><code>private_key_id</code><code>private_key</code><code>client_email</code><code>client_id</code><code>client_x509_cert_url</code> <code>type</code> (default: <code>service_account</code>)<code>auth_uri</code> (default: <code>https://accounts.google.com/o/oauth2/auth</code>)<code>token_uri</code> (default: <code>https://accounts.google.com/o/oauth2/token</code>)<code>auth_provider_x509_cert_url</code> (default: <code>https://www.googleapis.com/oauth2/v1/certs</code>) Documentation <code>linode</code> Linode <code>key</code> Documentation <code>luadns</code> LuaDNS <code>email</code><code>token</code> Documentation <code>nsone</code> NS1 <code>api_key</code> Documentation <code>ovh</code> OVH <code>application_key</code><code>application_secret</code><code>consumer_key</code> <code>endpoint</code> (default: <code>ovh-eu</code>) Documentation <code>rfc2136</code> RFC 2136 <code>server</code><code>name</code><code>secret</code> <code>port</code> (default: <code>53</code>)<code>algorithm</code> (default: <code>HMAC-SHA512</code>)<code>sign_query</code> (default: <code>false</code>) Documentation <code>route53</code> Amazon Route 53 <code>access_key_id</code><code>secret_access_key</code> Documentation <code>sakuracloud</code> Sakura Cloud <code>api_token</code><code>api_secret</code> Documentation <code>scaleway</code> Scaleway <code>application_token</code> Documentation <p>Full Let's Encrypt automation using the <code>http</code> challenge is fully working with stream mode as long as you open the <code>80/tcp</code> port from the outside. Please note that you will need to use the <code>LISTEN_STREAM_PORT_SSL</code> setting in order to choose your listening SSL/TLS port.</p>"},{"location":"advanced/#custom-certificates","title":"Custom certificates","text":"<p>STREAM support </p> <p>BunkerWeb also allows you to use your own custom SSL/TLS certificates, providing flexibility for advanced use cases or specific organizational requirements. This feature is ideal for scenarios where you need to use certificates issued by a specific Certificate Authority (CA) or self-signed certificates for internal purposes.</p> <p>Below is the list of related settings to configure your own certificates:</p> Setting Default Context Multiple Description <code>USE_CUSTOM_SSL</code> <code>no</code> multisite no Use custom HTTPS / SSL/TLS certificate. <code>CUSTOM_SSL_CERT</code> multisite no Full path of the certificate or bundle file (must be readable by the scheduler). <code>CUSTOM_SSL_KEY</code> multisite no Full path of the key file (must be readable by the scheduler). <code>CUSTOM_SSL_CERT_DATA</code> multisite no Certificate data encoded in base64. <code>CUSTOM_SSL_KEY_DATA</code> multisite no Key data encoded in base64. <p>When you enable custom SSL/TLS by setting <code>USE_CUSTOM_SSL</code> to <code>yes</code>, BunkerWeb will automatically monitor the custom certificate specified in <code>CUSTOM_SSL_CERT</code>. It checks for changes daily and reloads NGINX if any modifications are detected, ensuring the latest certificate is always in use.</p> <p>For stream mode, you must configure the <code>LISTEN_STREAM_PORT_SSL</code> setting to specify the SSL/TLS listening port. This step is essential for proper operation in stream mode.</p>"},{"location":"advanced/#self-signed","title":"Self-signed","text":"<p>STREAM support </p> <p>If you need to quickly test HTTPS / SSL/TLS in a staging or development environment, BunkerWeb can generate self-signed certificates for you. This is a convenient way to enable encryption without requiring an external Certificate Authority (CA).</p> <p>Below is the list of related settings:</p> Setting Default Description <code>GENERATE_SELF_SIGNED_SSL</code> <code>no</code> When set to <code>yes</code>, HTTPS / SSL/TLS will be enabled with automatic self-signed certificate generation and renewal from Let's Encrypt. <code>SELF_SIGNED_SSL_EXPIRY</code> <code>365</code> Number of days for the certificate expiration (-days value used with openssl). <code>SELF_SIGNED_SSL_SUBJ</code> <code>/CN=www.example.com/</code> Certificate subject to use (-subj value used with openssl). <p>For stream mode, you must configure the <code>LISTEN_STREAM_PORT_SSL</code> setting to specify the SSL/TLS listening port. This step is essential for proper operation in stream mode.</p>"},{"location":"advanced/#modsecurity","title":"ModSecurity","text":"<p>STREAM support </p> <p>ModSecurity is a robust web application firewall (WAF) that helps protect your applications from a wide range of attacks, including SQL injection, cross-site scripting (XSS), and other common vulnerabilities. It acts as a shield, inspecting incoming and outgoing HTTP traffic and enforcing security rules to block malicious activity.</p> <p>In BunkerWeb, ModSecurity is integrated and enabled by default, paired with the OWASP Core Rule Set (CRS). The OWASP CRS is a curated set of rules designed to detect and mitigate common web application vulnerabilities, offering strong baseline protection for your applications.</p> <p>Below is the list of related settings:</p> Setting Default Context Multiple Description <code>USE_MODSECURITY</code> <code>yes</code> multisite no Enable ModSecurity WAF. <code>USE_MODSECURITY_CRS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set. <code>USE_MODSECURITY_CRS_PLUGINS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set plugins. <code>MODSECURITY_CRS_VERSION</code> <code>4</code> multisite no Version of the OWASP Core Rule Set to use with ModSecurity (3, 4 or nightly). <code>MODSECURITY_CRS_PLUGINS</code> multisite no List of OWASP CRS plugins (plugin-name[/tag] or URL) to download and install (separated with spaces). (Not compatible with CRS version 3) <code>USE_MODSECURITY_GLOBAL_CRS</code> <code>no</code> global no Use ModSecurity CRS in global mode to improve rules loading when you have many services. <code>MODSECURITY_SEC_AUDIT_ENGINE</code> <code>RelevantOnly</code> multisite no SecAuditEngine directive of ModSecurity. <code>MODSECURITY_SEC_RULE_ENGINE</code> <code>On</code> multisite no SecRuleEngine directive of ModSecurity. <code>MODSECURITY_SEC_AUDIT_LOG_PARTS</code> <code>ABCFHZ</code> multisite no SecAuditLogParts directive of ModSecurity. <code>MODSECURITY_REQ_BODY_NO_FILES_LIMIT</code> <code>131072</code> multisite no SecRequestBodyNoFilesLimit directive of ModSecurity. <p>ModSecurity and the OWASP Core Rule Set</p> <p>We strongly recommend keeping both ModSecurity and the OWASP Core Rule Set (CRS) enabled to provide robust protection against common web vulnerabilities. While occasional false positives may occur, they can be resolved with some effort by fine-tuning rules or using predefined exclusions.</p> <p>The CRS team actively maintains a list of exclusions for popular applications such as WordPress, Nextcloud, Drupal, and Cpanel, making it easier to integrate without impacting functionality. The security benefits far outweigh the minimal configuration effort required to address false positives.</p> <p>You can select from the following versions of the OWASP Core Rule Set (CRS) to suit your application's security needs:</p> <ul> <li><code>3</code>: The stable v3.3.7 release of the OWASP CRS.</li> <li><code>4</code>: The stable v4.12.0 release of the OWASP CRS (default).</li> <li><code>nightly</code>: The nightly build, which is updated daily with the latest rules and improvements.</li> </ul> <p>Nightly Build</p> <p>The nightly build contains the most up-to-date rules, offering the latest protections against emerging threats. However, since it is updated daily and may include experimental or untested changes, it is recommended to first use the nightly build in a staging environment before deploying it in production.</p>"},{"location":"advanced/#custom-configurations_1","title":"Custom configurations","text":"<p>Tuning ModSecurity and the OWASP Core Rule Set (CRS) can be achieved through custom configurations. These configurations allow you to customize behavior at specific stages of the security rules processing:</p> <ul> <li><code>modsec-crs</code>: Applied before the OWASP Core Rule Set is loaded.</li> <li><code>modsec</code>: Applied after the OWASP Core Rule Set is loaded. This is also used if the CRS is not loaded at all.</li> <li><code>crs-plugins-before</code>: Applied before the CRS plugins are loaded.</li> <li><code>crs-plugins-after</code>: Applied after the CRS plugins are loaded.</li> </ul> <p>This structure provides flexibility, allowing you to fine-tune ModSecurity and CRS settings to suit your application's specific needs while maintaining a clear configuration flow.</p>"},{"location":"advanced/#adding-crs-exclusions-with-modsec-crs","title":"Adding CRS Exclusions with <code>modsec-crs</code>","text":"<p>You can use a custom configuration of type <code>modsec-crs</code> to add exclusions for specific use cases, such as enabling predefined exclusions for WordPress:</p> <pre><code>SecAction \\\n \"id:900130,\\\n  phase:1,\\\n  nolog,\\\n  pass,\\\n  t:none,\\\n  setvar:tx.crs_exclusions_wordpress=1\"\n</code></pre> <p>In this example:</p> <ul> <li>The action is executed in Phase 1 (early in the request lifecycle).</li> <li>It enables WordPress-specific CRS exclusions by setting the variable <code>tx.crs_exclusions_wordpress</code>.</li> </ul>"},{"location":"advanced/#updating-crs-rules-with-modsec","title":"Updating CRS Rules with <code>modsec</code>","text":"<p>To fine-tune the loaded CRS rules, you can use a custom configuration of type <code>modsec</code>. For example, you can remove specific rules or tags for certain request paths:</p> <pre><code>SecRule REQUEST_FILENAME \"/wp-admin/admin-ajax.php\" \"id:1,ctl:ruleRemoveByTag=attack-xss,ctl:ruleRemoveByTag=attack-rce\"\nSecRule REQUEST_FILENAME \"/wp-admin/options.php\" \"id:2,ctl:ruleRemoveByTag=attack-xss\"\nSecRule REQUEST_FILENAME \"^/wp-json/yoast\" \"id:3,ctl:ruleRemoveById=930120\"\n</code></pre> <p>In this example:</p> <ul> <li>Rule 1: Removes rules tagged as <code>attack-xss</code> and <code>attack-rce</code> for requests to <code>/wp-admin/admin-ajax.php</code>.</li> <li>Rule 2: Removes rules tagged as <code>attack-xss</code> for requests to <code>/wp-admin/options.php</code>.</li> <li>Rule 3: Removes a specific rule (ID <code>930120</code>) for requests matching <code>/wp-json/yoast</code>.</li> </ul>"},{"location":"advanced/#key-points","title":"Key Points","text":"<ul> <li>Use <code>modsec-crs</code> for configurations that should be applied before CRS rules are loaded, such as enabling exclusions or setting variables.</li> <li>Use <code>modsec</code> for configurations that modify or extend loaded CRS rules, such as removing rules by ID or tag.</li> </ul> <p>This approach provides precise control over the security rules, allowing you to adapt them to your application's specific needs while minimizing false positives.</p> <p>Order of execution</p> <p>The execution order for ModSecurity in BunkerWeb is as follows, ensuring a clear and logical progression of rule application:</p> <ol> <li>OWASP CRS Configuration: Base configuration for the OWASP Core Rule Set.</li> <li>Custom Plugins Configuration (<code>crs-plugins-before</code>): Settings specific to plugins, applied before any CRS rules.</li> <li>Custom Plugin Rules (Before CRS Rules) (<code>crs-plugins-before</code>): Custom rules for plugins executed prior to CRS rules.</li> <li>Downloaded Plugins Configuration: Configuration for externally downloaded plugins.</li> <li>Downloaded Plugin Rules (Before CRS Rules): Rules for downloaded plugins executed before CRS rules.</li> <li>Custom CRS Rules (<code>modsec-crs</code>): User-defined rules applied before loading the CRS rules.</li> <li>OWASP CRS Rules: The core set of security rules provided by OWASP.</li> <li>Custom Plugin Rules (After CRS Rules) (<code>crs-plugins-after</code>): Custom plugin rules executed after CRS rules.</li> <li>Downloaded Plugin Rules (After CRS Rules): Rules for downloaded plugins executed after CRS rules.</li> <li>Custom Rules (<code>modsec</code>): User-defined rules applied after all CRS and plugin rules.</li> </ol> <p>Key Notes:</p> <ul> <li>Pre-CRS customizations (<code>crs-plugins-before</code>, <code>modsec-crs</code>) allow you to define exceptions or preparatory rules before the core CRS rules are loaded.</li> <li>Post-CRS customizations (<code>crs-plugins-after</code>, <code>modsec</code>) are ideal for overriding or extending rules after CRS and plugin rules have been applied.</li> <li>This structure provides maximum flexibility, enabling precise control over rule execution and customization while maintaining a strong security baseline.</li> </ul>"},{"location":"advanced/#owasp-crs-plugins","title":"OWASP CRS Plugins","text":"<p>The OWASP Core Rule Set also supports a range of plugins designed to extend its functionality and improve compatibility with specific applications or environments. These plugins can help fine-tune the CRS for use with popular platforms such as WordPress, Nextcloud, and Drupal, or even custom setups. For more information and a list of available plugins, refer to the OWASP CRS plugin registry.</p> <p>Plugin download</p> <p>The <code>MODSECURITY_CRS_PLUGINS</code> setting allows you to download and install plugins to extend the functionality of the OWASP Core Rule Set (CRS). This setting accepts a list of plugin names with optional tags or URLs, making it easy to integrate additional security features tailored to your specific needs.</p> <p>Here's a non-exhaustive of accepted values for the <code>MODSECURITY_CRS_PLUGINS</code> setting:</p> <ul> <li><code>fake-bot</code> &lt;---- Download the latest release of the plugin.</li> <li><code>wordpress-rule-exclusions/v1.0.0</code> &lt;---- Download the version 1.0.0 of the plugin.</li> <li><code>https://github.com/coreruleset/dos-protection-plugin-modsecurity/archive/refs/heads/main.zip</code> &lt;---- Download the plugin directly from the URL.</li> </ul>"},{"location":"advanced/#crowdsec","title":"CrowdSec","text":"<p>STREAM support </p> <p></p> <p>This BunkerWeb plugin acts as a CrowdSec bouncer. It will deny requests based on the decision of your CrowdSec API. Not only you will benefinit from the crowdsourced blacklist, you can also configure scenarios to automatically ban IPs based on suspicious behaviors.</p>"},{"location":"advanced/#setup","title":"Setup","text":"DockerLinux <p>Acquisition file</p> <p>You will need to run CrowdSec instance and configure it to parse BunkerWeb logs. Because BunkerWeb is based on NGINX, you can use the <code>nginx</code> value for the <code>type</code> parameter in your acquisition file (assuming that BunkerWeb logs are stored \"as is\" without additional data) :</p> <pre><code>filenames:\n  - /var/log/bunkerweb.log\nlabels:\n  type: nginx\n</code></pre> <p>Application Security Component (optional)</p> <p>CrowdSec also provides an Application Security Component that can be used to protect your application from attacks. You can configure the plugin to send requests to the AppSec Component for further analysis. If you want to use it, you will need to create another acquisition file for the AppSec Component :</p> <pre><code>appsec_config: crowdsecurity/appsec-default\nlabels:\n  type: appsec\nlisten_addr: 0.0.0.0:7422\nsource: appsec\n</code></pre> <p>Syslog</p> <p>For container-based integrations, we recommend you to redirect the logs of the BunkerWeb container to a syslog service that will store the logs so CrowdSec can access it easily. Here is an example configuration for syslog-ng that will store raw logs coming from BunkerWeb to a local <code>/var/log/bunkerweb.log</code> file :</p> <pre><code>@version: 4.8\n\nsource s_net {\n    udp(\n        ip(\"0.0.0.0\")\n    );\n};\n\ntemplate t_imp {\n    template(\"$MSG\\n\");\n    template_escape(no);\n};\n\ndestination d_file {\n    file(\"/var/log/bunkerweb.log\" template(t_imp));\n};\n\nlog {\n    source(s_net);\n    destination(d_file);\n};\n</code></pre> <p>Docker Compose</p> <p>Here is the docker-compose boilerplate that you can use (don't forget to edit the bouncer key) :</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n\nservices:\n  bunkerweb:\n    # This is the name that will be used to identify the instance in the Scheduler\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      &lt;&lt;: *bw-env # We use the anchor to avoid repeating the same settings for all services\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n      - bw-plugins\n    logging:\n      driver: syslog # Send logs to syslog\n      options:\n        syslog-address: \"udp://10.10.10.254:514\" # The IP address of the syslog service\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      SERVER_NAME: \"\"\n      MULTISITE: \"yes\"\n      USE_CROWDSEC: \"yes\"\n      CROWDSEC_API: \"http://crowdsec:8080\" # This is the address of the CrowdSec container API in the same network\n      CROWDSEC_APPSEC_URL: \"http://crowdsec:7422\" # Comment if you don't want to use the AppSec Component\n      CROWDSEC_API_KEY: \"s3cr3tb0unc3rk3y\" # Remember to set a stronger key for the bouncer\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  crowdsec:\n    image: crowdsecurity/crowdsec:v1.6.5 # Use the latest version but always pin the version for a better stability/security\n    volumes:\n      - cs-data:/var/lib/crowdsec/data # To persist the CrowdSec data\n      - bw-logs:/var/log:ro # The logs of BunkerWeb for CrowdSec to parse\n      - ./acquis.yaml:/etc/crowdsec/acquis.yaml # The acquisition file for BunkerWeb logs\n      - ./appsec.yaml:/etc/crowdsec/acquis.d/appsec.yaml # Comment if you don't want to use the AppSec Component\n    environment:\n      BOUNCER_KEY_bunkerweb: \"s3cr3tb0unc3rk3y\" # Remember to set a stronger key for the bouncer\n      COLLECTIONS: \"crowdsecurity/nginx crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules\"\n      #   COLLECTIONS: \"crowdsecurity/nginx\" # If you don't want to use the AppSec Component use this line instead\n    networks:\n      - bw-plugins\n\n  syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n        bw-plugins:\n          ipv4_address: 10.10.10.254\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n  cs-data:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n  bw-plugins:\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.10.10.0/24\n</code></pre> <p>You'll need to install CrowdSec and configure it to parse BunkerWeb logs. To do so, you can follow the official documentation.</p> <p>For CrowdSec to parse BunkerWeb logs, you have to add the following lines to your acquisition file located in <code>/etc/crowdsec/acquis.yaml</code> :</p> <pre><code>filenames:\n  - /var/log/bunkerweb/access.log\n  - /var/log/bunkerweb/error.log\n  - /var/log/bunkerweb/modsec_audit.log\nlabels:\n    type: nginx\n</code></pre> <p>Now we have to add our custom bouncer to the CrowdSec API. To do so, you can use the <code>cscli</code> tool :</p> <pre><code>sudo cscli bouncers add crowdsec-bunkerweb-bouncer/v1.6\n</code></pre> <p>API key</p> <p>Keep the key generated by the <code>cscli</code> command, you will need it later.</p> <p>Now restart the CrowdSec service :</p> <pre><code>sudo systemctl restart crowdsec\n</code></pre> <p>Application Security Component (optional)</p> <p>If you want to use the AppSec Component, you will need to create another acquisition file for it located in <code>/etc/crowdsec/acquis.d/appsec.yaml</code> :</p> <pre><code>appsec_config: crowdsecurity/appsec-default\nlabels:\n    type: appsec\nlisten_addr: 127.0.0.1:7422\nsource: appsec\n</code></pre> <p>And you will need to install the AppSec Component's collections :</p> <pre><code>sudo cscli collections install crowdsecurity/appsec-virtual-patching\nsudo cscli collections install crowdsecurity/appsec-generic-rules\n</code></pre> <p>Now you just have to restart the CrowdSec service :</p> <pre><code>sudo systemctl restart crowdsec\n</code></pre> <p>If you need more information about the AppSec Component, you can refer to the official documentation.</p> <p>Settings</p> <p>Now you can configure the plugin by adding the following settings to your BunkerWeb configuration file :</p> <pre><code>USE_CROWDSEC=yes\nCROWDSEC_API=http://127.0.0.1:8080\nCROWDSEC_API_KEY=&lt;The key provided by cscli&gt;\n# Comment if you don't want to use the AppSec Component\nCROWDSEC_APPSEC_URL=http://127.0.0.1:7422\n</code></pre> <p>And finally reload the BunkerWeb service :</p> <pre><code>sudo systemctl reload bunkerweb\n</code></pre>"},{"location":"advanced/#bad-behavior","title":"Bad behavior","text":"<p>STREAM support </p> <p>Attackers often generate \"suspicious\" HTTP status codes when probing for or exploiting vulnerabilities\u2014codes that a typical user is unlikely to trigger within a given time frame. By detecting this behavior, BunkerWeb can automatically ban the offending IP address, forcing the attacker to switch to a new IP to continue their attempts.</p> <p>This security measure, known as \"Bad Behavior,\" is implemented and enabled by default in BunkerWeb, providing an additional layer of protection against malicious activity.</p> <p>Below is the list of related settings:</p> Setting Default Description <code>USE_BAD_BEHAVIOR</code> <code>yes</code> When set to <code>yes</code>, the Bad behavior feature will be enabled. <code>BAD_BEHAVIOR_STATUS_CODES</code> <code>400 401 403 404 405 429 444</code> List of HTTP status codes considered as \"suspicious\". <code>BAD_BEHAVIOR_THRESHOLD</code> <code>10</code> Maximum number of \"suspicious\" HTTP status codes within the time period. <code>BAD_BEHAVIOR_COUNT_TIME</code> <code>60</code> Period of time during which we count \"suspicious\" HTTP status codes. <code>BAD_BEHAVIOR_BAN_TIME</code> <code>86400</code> The duration time (in seconds) of a ban when a client reached the threshold. <code>BAD_BEHAVIOR_BAN_SCOPE</code> <code>service</code> Determines the level of the ban. 'service' will ban the IP for the service only, 'global' will ban the IP for the whole system. <p>By default, BunkerWeb's \"Bad Behavior\" feature works as follows:</p> <ul> <li>If a client generates more than 10 HTTP status codes from the list <code>400, 401, 403, 404, 405, 429, 444</code> within a 60-second period, their IP address will be banned for 86400 seconds (24 hours).</li> </ul> <p>In stream mode, only the <code>444</code> status code is considered \"bad\" and will trigger this behavior.</p> <p>This configuration helps prevent attackers from repeatedly probing your server for vulnerabilities while minimizing the impact on legitimate users.</p>"},{"location":"advanced/#antibot","title":"Antibot","text":"<p>STREAM support </p> <p>Attackers often use automated tools to exploit vulnerabilities in web applications. A common countermeasure is to challenge users to determine whether they are bots. If the challenge is successfully completed, the client is deemed \"legitimate\" and granted access to the web application.</p> <p>BunkerWeb includes a built-in \"Antibot\" feature to implement this type of security, though it is not enabled by default. Below are the supported challenge mechanisms:</p> <ul> <li>Cookie: Sends a cookie to the client and expects it to be returned on subsequent requests.</li> <li>JavaScript: Requires the client to solve a computational challenge using JavaScript.</li> <li>Captcha: Presents a traditional CAPTCHA challenge (no external dependencies).</li> <li>reCAPTCHA: Uses Google reCAPTCHA to ensure the client achieves a minimum score.</li> <li>hCaptcha: Challenges the client with a CAPTCHA provided by hCaptcha.</li> <li>Turnstile: Enforces rate limiting and access control using Cloudflare Turnstile, leveraging various mechanisms.</li> <li>mCaptcha: Challenges the client with a CAPTCHA provided by mCaptcha.</li> </ul> <p>Here is the list of related settings :</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Activate antibot feature. <code>ANTIBOT_URI</code> <code>/challenge</code> multisite no Unused URI that clients will be redirected to to solve the challenge. <code>ANTIBOT_TIME_RESOLVE</code> <code>60</code> multisite no Maximum time (in seconds) clients have to resolve the challenge. Once this time has passed, a new challenge will be generated. <code>ANTIBOT_TIME_VALID</code> <code>86400</code> multisite no Maximum validity time of solved challenges. Once this time has passed, clients will need to resolve a new one. <code>ANTIBOT_RECAPTCHA_SCORE</code> <code>0.7</code> multisite no Minimum score required for reCAPTCHA challenge (Only compatible with reCAPTCHA v3). <code>ANTIBOT_RECAPTCHA_SITEKEY</code> multisite no Sitekey for reCAPTCHA challenge. <code>ANTIBOT_RECAPTCHA_SECRET</code> multisite no Secret for reCAPTCHA challenge. <code>ANTIBOT_HCAPTCHA_SITEKEY</code> multisite no Sitekey for hCaptcha challenge. <code>ANTIBOT_HCAPTCHA_SECRET</code> multisite no Secret for hCaptcha challenge. <code>ANTIBOT_TURNSTILE_SITEKEY</code> multisite no Sitekey for Turnstile challenge. <code>ANTIBOT_TURNSTILE_SECRET</code> multisite no Secret for Turnstile challenge. <code>ANTIBOT_MCAPTCHA_SITEKEY</code> multisite no Sitekey for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_SECRET</code> multisite no Secret for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_URL</code> <code>https://demo.mcaptcha.org</code> multisite no Domain to use for mCaptcha challenge. <p>Please note that antibot feature is using a cookie to maintain a session with clients. If you are using BunkerWeb in a clustered environment, you will need to set the <code>SESSIONS_SECRET</code> and <code>SESSIONS_NAME</code> settings to another value than the default one (which is <code>random</code>). You will find more info about sessions here.</p>"},{"location":"advanced/#captcha","title":"Captcha","text":"<p>Our homemade Captcha mechanism offers a simple yet effective challenge designed and hosted entirely within your BunkerWeb environment. It generates dynamic, image-based challenges that test users' ability to recognize and interpret randomized characters, ensuring automated bots are effectively blocked without the need for any external API calls or third-party services.</p> <p>To enable the Captcha antibot mechanism, set the <code>USE_ANTIBOT</code> setting to <code>captcha</code> in your BunkerWeb configuration.</p>"},{"location":"advanced/#recaptcha","title":"reCAPTCHA","text":"<p>When enabled, reCAPTCHA runs in the background (v3) to assign a score based on user behavior. A score lower than the configured threshold will prompt further verification or block the request. For visible challenges (v2), users must interact with the reCAPTCHA widget before continuing.</p> <p>To use reCAPTCHA with BunkerWeb, you need to obtain your site and secret keys from the Google reCAPTCHA admin console. Once you have the keys, you can configure BunkerWeb to use reCAPTCHA as an antibot mechanism.</p> <p>Add or update the following settings as needed in your BunkerWeb configuration:</p> Setting Default Description <code>ANTIBOT_RECAPTCHA_SITEKEY</code> Your Google reCAPTCHA site key. <code>ANTIBOT_RECAPTCHA_SECRET</code> Your Google reCAPTCHA secret key. <code>ANTIBOT_RECAPTCHA_SCORE</code> 0.7 Minimum score required for reCAPTCHA v3 validation. <p>Make sure to set the <code>USE_ANTIBOT</code> setting to <code>recaptcha</code> to enable the reCAPTCHA antibot mechanism.</p>"},{"location":"advanced/#hcaptcha","title":"hCaptcha","text":"<p>When enabled, hCaptcha provides an effective alternative to reCAPTCHA by verifying user interactions without relying on a scoring mechanism. It challenges users with a simple, interactive test to confirm their legitimacy.</p> <p>To integrate hCaptcha with BunkerWeb, you must obtain the necessary credentials from the hCaptcha dashboard at hCaptcha. These credentials include a site key and a secret key.</p> <p>After acquiring the keys, update your BunkerWeb configuration with the following settings to enable hCaptcha antibot protection:</p> Setting Default Description <code>ANTIBOT_HCAPTCHA_SITEKEY</code> Your hCaptcha site key. <code>ANTIBOT_HCAPTCHA_SECRET</code> Your hCaptcha secret key used for verification. <p>Make sure to set the <code>USE_ANTIBOT</code> setting to <code>hcaptcha</code> to enable the hCaptcha antibot mechanism.</p>"},{"location":"advanced/#turnstile","title":"Turnstile","text":"<p>Turnstile is a modern, privacy-friendly challenge mechanism that leverages Cloudflare\u2019s technology to detect and block automated traffic. It validates user interactions in a seamless, background manner, reducing friction for legitimate users while effectively discouraging bots.</p> <p>To integrate Turnstile with BunkerWeb, ensure you obtain the necessary credentials from Cloudflare Turnstile and update your configuration with the following settings:</p> Setting Default Description <code>ANTIBOT_TURNSTILE_SITEKEY</code> Your Cloudflare Turnstile site key. <code>ANTIBOT_TURNSTILE_SECRET</code> Your Cloudflare Turnstile secret key for validation. <p>Make sure to set the <code>USE_ANTIBOT</code> setting to <code>turnstile</code> to enable the Turnstile antibot mechanism.</p>"},{"location":"advanced/#mcaptcha","title":"mCaptcha","text":"<p>mCaptcha is an alternative CAPTCHA challenge mechanism that verifies the legitimacy of users by presenting an interactive test similar to other antibot solutions. When enabled, it challenges users with a CAPTCHA provided by mCaptcha, ensuring that only genuine users bypass the automated security checks.</p> <p>mCaptcha is designed with privacy in mind. It is fully GDPR compliant, ensuring that all user data involved in the challenge process adheres to strict data protection standards. Additionally, mCaptcha offers the flexibility to be self-hosted, allowing organizations to maintain full control over their data and infrastructure. This self-hosting capability not only enhances privacy but also optimizes performance and customization to suit specific deployment needs.</p> <p>To integrate mCaptcha with BunkerWeb, you must obtain the necessary credentials from the mCaptcha platform or yours. These credentials include a site key and a secret key for verification. After acquiring the keys, update your BunkerWeb configuration with the following settings to enable mCaptcha antibot protection:</p> Setting Default Description <code>ANTIBOT_MCAPTCHA_SITEKEY</code> Your mCaptcha site key used in the challenge. <code>ANTIBOT_MCAPTCHA_SECRET</code> Your mCaptcha secret for verifying responses. <code>ANTIBOT_MCAPTCHA_URL</code> <code>https://demo.mcaptcha.org</code> The endpoint URL for mCaptcha challenge integration. <p>Make sure to set the <code>USE_ANTIBOT</code> setting to <code>mcaptcha</code> to enable the mCaptcha antibot mechanism.</p>"},{"location":"advanced/#blacklisting-whitelisting-and-greylisting","title":"Blacklisting, whitelisting and greylisting","text":"<p>The security features for blacklisting, whitelisting, and greylisting are straightforward to understand:</p> <ul> <li>Blacklisting: If a specific criterion is met, the client will be blocked.</li> <li>Whitelisting: If a specific criterion is met, the client will be allowed, bypassing all additional security checks.</li> <li>Greylisting: If a specific criterion is met, the client will be allowed but subjected to additional security checks else the client will be blocked.</li> </ul> <p>These mechanisms can be configured simultaneously. If all three are enabled and a client meets criteria for multiple lists, whitelisting takes precedence, followed by blacklisting, and finally greylisting. In such cases, a whitelisted client will bypass both blacklisting and greylisting, regardless of overlapping criteria.</p>"},{"location":"advanced/#blacklisting","title":"Blacklisting","text":"<p>STREAM support </p> <p>You can use the following settings to set up blacklisting :</p> Setting Default Context Description <code>USE_BLACKLIST</code> <code>yes</code> multisite Activate blacklist feature. <code>BLACKLIST_IP</code> multisite List of IP/network, separated with spaces, to block. <code>BLACKLIST_RDNS</code> <code>.shodan.io .censys.io</code> multisite List of reverse DNS suffixes, separated with spaces, to block. <code>BLACKLIST_RDNS_GLOBAL</code> <code>yes</code> multisite Only perform RDNS blacklist checks on global IP addresses. <code>BLACKLIST_ASN</code> multisite List of ASN numbers, separated with spaces, to block. <code>BLACKLIST_USER_AGENT</code> multisite List of User-Agent (PCRE regex), separated with spaces, to block. <code>BLACKLIST_URI</code> multisite List of URI (PCRE regex), separated with spaces, to block. <code>BLACKLIST_IGNORE_IP</code> multisite List of IP/network, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_RDNS</code> multisite List of reverse DNS suffixes, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_ASN</code> multisite List of ASN numbers, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_USER_AGENT</code> multisite List of User-Agent (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_URI</code> multisite List of URI (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IP_URLS</code> <code>https://www.dan.me.uk/torlist/?exit</code> multisite List of URLs, separated with spaces, containing bad IP/network to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_RDNS_URLS</code> multisite List of URLs, separated with spaces, containing reverse DNS suffixes to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_ASN_URLS</code> multisite List of URLs, separated with spaces, containing ASN to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_USER_AGENT_URLS</code> <code>https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list</code> multisite List of URLs, separated with spaces, containing bad User-Agent to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_URI_URLS</code> multisite List of URLs, separated with spaces, containing bad URI to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_IP_URLS</code> multisite List of URLs, separated with spaces, containing IP/network to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_RDNS_URLS</code> multisite List of URLs, separated with spaces, containing reverse DNS suffixes to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_ASN_URLS</code> multisite List of URLs, separated with spaces, containing ASN to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_USER_AGENT_URLS</code> multisite List of URLs, separated with spaces, containing User-Agent to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_URI_URLS</code> multisite List of URLs, separated with spaces, containing URI to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <p>stream mode</p> <p>When using stream mode, only IP, RDNS and ASN checks will be done.</p> <p>Ignore lists</p> <p>The ignore lists are useful when you want to block a specific criterion but want to exclude some IPs, RDNS, ASN, User-Agent, or URI from the blacklist.</p>"},{"location":"advanced/#greylisting","title":"Greylisting","text":"<p>STREAM support </p> <p>You can use the following settings to set up greylisting :</p> Setting Default Context Description <code>USE_GREYLIST</code> <code>no</code> multisite Activate greylist feature. <code>GREYLIST_IP</code> multisite List of IP/network, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS</code> multisite List of reverse DNS suffixes, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS_GLOBAL</code> <code>yes</code> multisite Only perform RDNS greylist checks on global IP addresses. <code>GREYLIST_ASN</code> multisite List of ASN numbers, separated with spaces, to put into the greylist. <code>GREYLIST_USER_AGENT</code> multisite List of User-Agent (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_URI</code> multisite List of URI (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_IP_URLS</code> multisite List of URLs, separated with spaces, containing good IP/network to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_RDNS_URLS</code> multisite List of URLs, separated with spaces, containing reverse DNS suffixes to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_ASN_URLS</code> multisite List of URLs, separated with spaces, containing ASN to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_USER_AGENT_URLS</code> multisite List of URLs, separated with spaces, containing good User-Agent to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_URI_URLS</code> multisite List of URLs, separated with spaces, containing bad URI to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <p>stream mode</p> <p>When using stream mode, only IP, RDNS and ASN checks will be done.</p>"},{"location":"advanced/#whitelisting","title":"Whitelisting","text":"<p>STREAM support </p> <p>You can use the following settings to set up whitelisting :</p> Setting Default Context Multiple Description <code>USE_WHITELIST</code> <code>yes</code> multisite no Activate whitelist feature. <code>WHITELIST_IP</code> multisite no List of IP/network, separated with spaces, to put into the whitelist. <code>WHITELIST_RDNS</code> <code>.google.com .googlebot.com .yandex.ru .yandex.net .yandex.com .search.msn.com .baidu.com .baidu.jp .crawl.yahoo.net .fwd.linkedin.com .twitter.com .twttr.com .discord.com</code> multisite no List of reverse DNS suffixes, separated with spaces, to whitelist. <code>WHITELIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS whitelist checks on global IP addresses. <code>WHITELIST_ASN</code> <code>32934</code> multisite no List of ASN numbers, separated with spaces, to whitelist. <code>WHITELIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_IP_URLS</code> multisite no List of URLs, separated with spaces, containing good IP/network to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing good User-Agent to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <p>stream mode</p> <p>When using stream mode, only IP, RDNS and ASN checks will be done.</p>"},{"location":"advanced/#reverse-scan","title":"Reverse scan","text":"<p>STREAM support </p> <p>The reverse scan feature is designed to identify open ports by attempting to establish TCP connections with clients' IP addresses. This is particularly useful for detecting potential open proxies or connections originating from servers.</p> <p>By default, we provide a list of suspicious ports, which you can customize to suit your specific needs. However, keep in mind that adding too many ports to the list may slow down client connections due to the additional network checks. If an open port from the list is detected, the client's access will be denied.</p> <p>Here is the list of settings related to reverse scan :</p> Setting Default Description <code>USE_REVERSE_SCAN</code> <code>no</code> When set to <code>yes</code>, will enable ReverseScan. <code>REVERSE_SCAN_PORTS</code> <code>22 80 443 3128 8000 8080</code> List of suspicious ports to scan. <code>REVERSE_SCAN_TIMEOUT</code> <code>500</code> Specify the maximum timeout (in ms) when scanning a port."},{"location":"advanced/#bunkernet","title":"BunkerNet","text":"<p>STREAM support </p> <p>BunkerNet is a global, crowdsourced database of malicious requests, collaboratively shared among all BunkerWeb instances worldwide.</p> <p>When you enable BunkerNet, malicious requests detected by your instance are sent to a remote server, where they are analyzed by our advanced systems. This process allows us to aggregate and extract malicious patterns from reports across all participating instances. The resulting insights are then redistributed to bolster the security of every BunkerWeb instance connected to BunkerNet.</p> <p>Beyond the enhanced security that comes from leveraging this collective intelligence, enabling BunkerNet unlocks additional features, such as seamless integration with the CrowdSec Console, providing further tools to monitor and manage threats effectively.</p> <p>The setting used to enable or disable BunkerNet is <code>USE_BUNKERNET</code> (default : <code>yes</code>).</p>"},{"location":"advanced/#crowdsec-console-integration","title":"CrowdSec Console integration","text":"<p>If you're not already familiar with it, CrowdSec is an open-source cybersecurity solution that leverages crowdsourced intelligence to combat cyber threats. Think of it as the \"Waze of cybersecurity\"\u2014when one server is attacked, other systems worldwide are alerted and protected from the same attackers. You can learn more about it here.</p> <p>Through our partnership with CrowdSec, you can enroll your BunkerWeb instances into your CrowdSec Console. This means that attacks blocked by BunkerWeb will be visible in your CrowdSec Console alongside attacks blocked by CrowdSec Security Engines, giving you a unified view of threats.</p> <p>Importantly, CrowdSec does not need to be installed for this integration (though we highly recommend trying it out with the CrowdSec plugin for BunkerWeb to further enhance the security of your web services). Additionally, you can enroll your CrowdSec Security Engines into the same Console account for even greater synergy.</p> <p>Step #1 : create your CrowdSec Console account</p> <p>Go to the CrowdSec Console and register your account if you don't already have one. Once it's done, write down your enroll key by going to \"Security Engines\", then \"Engines\" and click on \"Add Security Engine\" :</p> <p> </p> Get your Crowdsec Console enroll key <p>Step #2 : get your BunkerNet ID</p> <p>Activating the BunkerNet feature (which is the case by default) is mandatory if you want to enroll your BunkerWeb instance(s) into your CrowdSec console. You can do it by setting <code>USE_BUNKERNET</code> to <code>yes</code>.</p> <p>Get your BunkerNet ID on Docker :</p> <pre><code>docker exec my-bw-scheduler cat /var/cache/bunkerweb/bunkernet/instance.id\n</code></pre> <p>Get your BunkerNet ID on Linux :</p> <pre><code>cat /var/cache/bunkerweb/bunkernet/instance.id\n</code></pre> <p>Step #3 : enroll your instance using the Panel</p> <p>Once you have noted your BunkerNet ID and CrowdSec Console enroll key, you can order the free product \"BunkerNet / CrowdSec\" on the Panel. Please note that you will need to create an account if you don't already have one.</p> <p>You can now select the \"BunkerNet / CrowdSec\" service and fill out the form by pasting your BunkerNet ID and CrowdSec Console enroll key :</p> <p> </p> Enroll your BunkerWeb instance into the CrowdSec Console <p>Step #4 : accept new security engine on the Console</p> <p>Last but not least, you need to go back to your CrowdSec Console and accept the new Security Engine :</p> <p> </p> Accept enroll into the CrowdSec Console <p>Congratulations, your BunkerWeb instance is now enrolled into your CrowdSec Console !</p> <p>Pro tip : when viewing your alerts, click on \"columns\" and tick the \"context\" checkbox to get access to BunkerWeb specific data.</p> <p> </p> BunkerWeb data shown in the context column"},{"location":"advanced/#dnsbl","title":"DNSBL","text":"<p>STREAM support </p> <p>DNSBL (Domain Name System Blacklist) is an external database of malicious IP addresses that can be queried using the DNS protocol. BunkerWeb supports automatic querying of such blacklists, providing an additional layer of security.</p> <p>When a client connects, BunkerWeb can query the DNSBL server of your choice. If the server confirms that the client's IP address is listed as malicious, BunkerWeb will automatically ban the client, preventing any potential threats from reaching your application. This streamlined integration enhances your ability to block known malicious actors in real time.</p> <p>Here is the list of settings related to DNSBL :</p> Setting Default Description <code>USE_DNSBL</code> <code>yes</code> When set to <code>yes</code>, will enable DNSBL checking. <code>DNSBL_LIST</code> <code>bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org</code> List of DNSBL servers to ask."},{"location":"advanced/#limiting","title":"Limiting","text":"<p>BunkerWeb allows you to enforce limit policies on the following:</p> <ul> <li>Number of connections per IP</li> <li>Number of requests per IP and URL within a specific time period</li> </ul> <p>While these policies are not designed to effectively mitigate DoS or DDoS attacks, they serve as powerful tools for preventing brute-force attempts or implementing rate limiting for APIs.</p> <p>In both cases\u2014whether the limit applies to connections or requests\u2014clients exceeding the defined limits will receive an HTTP status code \"429 - Too Many Requests\", ensuring fair usage and protecting your resources.</p>"},{"location":"advanced/#connections","title":"Connections","text":"<p>STREAM support </p> <p>The following settings are related to the Limiting connections feature :</p> Setting Default Description <code>USE_LIMIT_CONN</code> <code>yes</code> When set to <code>yes</code>, will limit the maximum number of concurrent connections for a given IP. <code>LIMIT_CONN_MAX_HTTP1</code> <code>10</code> Maximum number of concurrent connections when using HTTP1 protocol. <code>LIMIT_CONN_MAX_HTTP2</code> <code>100</code> Maximum number of concurrent streams when using HTTP2 protocol. <code>LIMIT_CONN_MAX_HTTP3</code> <code>100</code> Maximum number of concurrent streams when using HTTP3 protocol. <code>LIMIT_CONN_MAX_STREAM</code> <code>10</code> Maximum number of connections per IP when using stream."},{"location":"advanced/#requests","title":"Requests","text":"<p>STREAM support </p> <p>The following settings are related to the Limiting requests feature :</p> Setting Default Context Multiple Description <code>USE_LIMIT_REQ</code> <code>yes</code> multisite no Activate limit requests feature. <code>LIMIT_REQ_URL</code> <code>/</code> multisite yes URL (PCRE regex) where the limit request will be applied or special value / for all requests. <code>LIMIT_REQ_RATE</code> <code>2r/s</code> multisite yes Rate to apply to the URL (s for second, m for minute, h for hour and d for day). <p>You can configure specific rate limits for different URLs by appending a numeric suffix to the relevant settings, providing fine-grained control over traffic to various endpoints. For example:</p> <ul> <li><code>LIMIT_REQ_URL_1=^/url1$</code> and <code>LIMIT_REQ_RATE_1=5r/d</code>: Limits requests to <code>/url1</code> to a maximum of 5 requests per day.</li> <li><code>LIMIT_REQ_URL_2=^/url2/subdir/.*$</code> and <code>LIMIT_REQ_RATE_2=1r/m</code>: Imposes a stricter limit of 1 request per minute for any URL under <code>/url2/subdir/</code>.</li> </ul> <p>This flexibility ensures tailored rate limits for different endpoints based on their usage patterns, sensitivity, or importance.</p> <p>Rate Limiting Best Practices</p> <ul> <li> <p>Regex Matching:   The <code>LIMIT_REQ_URL</code> values use PCRE (Perl Compatible Regular Expressions), allowing advanced patterns to precisely match specific URLs or structures. This supports complex scenarios such as:</p> <ul> <li>Matching nested paths.</li> <li>Limiting requests to specific file types (e.g., <code>^/files/.*\\.pdf$</code>).</li> <li>Handling parameterized URLs.</li> </ul> </li> <li> <p>Efficient Traffic Management:   Properly applied, these settings help balance resource usage, mitigate abuse, and protect critical endpoints without impacting legitimate users.</p> </li> </ul>"},{"location":"advanced/#country","title":"Country","text":"<p>STREAM support </p> <p>The Country Security feature enables you to enforce policies based on the geographic location of a client's IP address. This provides an additional layer of control and security for your application. You can configure it to:</p> <ul> <li>Blacklist: Deny access to clients if their country is included in a blacklist. These clients will be entirely blocked from reaching your application.</li> <li>Whitelist: Allow access only to clients whose country is included in a whitelist. Clients from other countries will be denied access, but those allowed will still undergo other configured security checks.</li> </ul> <p>This feature is particularly useful for restricting access to certain regions, protecting sensitive resources, or reducing exposure to potential threats originating from specific areas.</p> <p>Here is the list of related settings :</p> Setting Default Context Multiple Description <code>BLACKLIST_COUNTRY</code> multisite no Deny access if the country of the client is in the list (ISO 3166-1 alpha-2 format separated with spaces). <code>WHITELIST_COUNTRY</code> multisite no Deny access if the country of the client is not in the list (ISO 3166-1 alpha-2 format separated with spaces). <p>Using both a country blacklist and a whitelist simultaneously is logically redundant and not recommended. If both are configured, the whitelist takes precedence, meaning only the whitelist will be applied, and the blacklist will be ignored.</p> <p>To avoid confusion and ensure clear policy enforcement, use either a blacklist or a whitelist based on your specific security requirements, but not both at the same time.</p>"},{"location":"advanced/#authentication","title":"Authentication","text":""},{"location":"advanced/#auth-basic","title":"Auth basic","text":"<p>STREAM support </p> <p>To safeguard sensitive resources, such as an admin area, you can enable HTTP Basic Authentication. This simple yet effective mechanism requires users to provide valid credentials before accessing the protected resource, adding an extra layer of security with minimal configuration.</p> <p>Here is the list of related settings :</p> Setting Default Multiple Description <code>USE_AUTH_BASIC</code> <code>no</code> no When set to <code>yes</code> HTTP auth basic will be enabled. <code>AUTH_BASIC_LOCATION</code> <code>sitewide</code> no Location (URL) of the sensitive resource. Use special value <code>sitewide</code> to enable everywhere. <code>AUTH_BASIC_USER</code> <code>changeme</code> yes The username required. <code>AUTH_BASIC_PASSWORD</code> <code>changeme</code> yes The password required. <code>AUTH_BASIC_TEXT</code> <code>Restricted area</code> Text to display in the auth prompt. <p>multi users</p> <p>You can set multiple users by using the following format : <code>AUTH_BASIC_USER_1</code>, <code>AUTH_BASIC_PASSWORD_1</code>, <code>AUTH_BASIC_USER_2</code>, <code>AUTH_BASIC_PASSWORD_2</code>, etc.</p>"},{"location":"advanced/#auth-request","title":"Auth request","text":"<p>For more advanced authentication methods, such as Single Sign-On (SSO), you can leverage the auth request settings. This allows integration with external authentication systems by using subrequest-based authentication. For detailed information about this feature, refer to the NGINX documentation.</p> <p>To help you get started, the BunkerWeb repository includes examples for popular authentication solutions like Authelia and Authentik. These examples demonstrate how to integrate these tools seamlessly with your deployment.</p> <p>Auth request settings are related to reverse proxy rules.</p> Setting Default Context Multiple Description <code>REVERSE_PROXY_AUTH_REQUEST</code> multisite yes Enable authentication using an external provider (value of auth_request directive). <code>REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL</code> multisite yes Redirect clients to sign-in URL when using REVERSE_PROXY_AUTH_REQUEST (used when auth_request call returned 401). <code>REVERSE_PROXY_AUTH_REQUEST_SET</code> multisite yes List of variables to set from the authentication provider, separated with ; (values of auth_request_set directives)."},{"location":"advanced/#monitoring-and-reporting","title":"Monitoring and reporting","text":""},{"location":"advanced/#monitoring-pro","title":"Monitoring  (PRO)","text":"<p>STREAM support </p> <p>The monitoring plugin lets you collect and retrieve metrics about BunkerWeb. By enabling it, your instance(s) will start collecting various data related to attacks, requests and performance. You can then retrieve them by calling the <code>/monitoring</code> API endpoint on regular basis or by using other plugins like the Prometheus exporter one.</p> <p>List of features</p> <ul> <li>Enable collection of various BunkerWeb metrics</li> <li>Retrieve metrics from the API</li> <li>Use in combination with other plugins (e.g. Prometheus exporter)</li> <li>Dedicate UI page to monitor your instance(s)</li> </ul> <p>List of settings</p> Setting Default Context Multiple Description <code>USE_MONITORING</code> <code>yes</code> global no Enable monitoring of BunkerWeb. <code>MONITORING_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the dict to store monitoring metrics."},{"location":"advanced/#prometheus-exporter-pro","title":"Prometheus exporter  (PRO)","text":"<p>STREAM support </p> <p>The Prometheus exporter plugin adds a Prometheus exporter on your BunkerWeb instance(s). When enabled, you can configure your Prometheus instance(s) to scrape a specific endpoint on Bunkerweb and gather internal metrics.</p> <p>We also provide a Grafana dashboard that you can import into your own instance and connect to your own Prometheus datasource.</p> <p>Please note that the use of Prometheus exporter plugin requires to enable the Monitoring plugin (<code>USE_MONITORING=yes</code>)</p> <p>List of features</p> <ul> <li>Prometheus exporter providing internal BunkerWeb metrics</li> <li>Dedicated and configurable port, listen IP and URL</li> <li>Whitelist IP/network for maximum security</li> </ul> <p>List of settings</p> Setting Default Context Multiple Description <code>USE_PROMETHEUS_EXPORTER</code> <code>no</code> global no Enable the Prometheus export. <code>PROMETHEUS_EXPORTER_IP</code> <code>0.0.0.0</code> global no Listening IP of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_PORT</code> <code>9113</code> global no Listening port of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_URL</code> <code>/metrics</code> global no HTTP URL of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_ALLOW_IP</code> <code>127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16</code> global no List of IP/networks allowed to contact the Prometheus exporter endpoint."},{"location":"advanced/#reporting-pro","title":"Reporting  (PRO)","text":"<p>STREAM support </p> <p>Monitoring plugin needed</p> <p>This plugins requires the Monitoring Pro plugin to be installed and enabled with the <code>USE_MONITORING</code> setting set to <code>yes</code>.</p> <p>The Reporting plugin provides a comprehensive solution for regular reporting of important data from BunkerWeb, including global statistics, attacks, bans, requests, reasons, and AS information. It offers a wide range of features, including automatic report creation, customization options, and seamless integration with monitoring pro plugin. With the Reporting plugin, you can easily generate and manage reports to monitor the performance and security of your application.</p> <p>List of features</p> <ul> <li>Regular reporting of important data from BunkerWeb, including global statistics, attacks, bans, requests, reasons, and AS information.</li> <li>Integration with Monitoring Pro plugin for seamless integration and enhanced reporting capabilities.</li> <li>Support for webhooks (classic, Discord, and Slack) for real-time notifications.</li> <li>Support for SMTP for email notifications.</li> <li>Configuration options for customization and flexibility.</li> </ul> <p>List of settings</p> Setting Default Context Description <code>USE_REPORTING_SMTP</code> <code>no</code> global Enable sending the report via email. <code>USE_REPORTING_WEBHOOK</code> <code>no</code> global Enable sending the report via webhook. <code>REPORTING_SCHEDULE</code> <code>weekly</code> global The frequency at which reports are sent. <code>REPORTING_WEBHOOK_URLS</code> global List of webhook URLs to receive the report in Markdown (separated by spaces). <code>REPORTING_SMTP_EMAILS</code> global List of email addresses to receive the report in HTML format (separated by spaces). <code>REPORTING_SMTP_HOST</code> global The host server used for SMTP sending. <code>REPORTING_SMTP_PORT</code> <code>465</code> global The port used for SMTP. Please note that there are different standards depending on the type of connection (SSL = 465, TLS = 587). <code>REPORTING_SMTP_FROM_EMAIL</code> global The email address used as the sender. Note that 2FA must be disabled for this email address. <code>REPORTING_SMTP_FROM_USER</code> global The user authentication value for sending via the from email address. <code>REPORTING_SMTP_FROM_PASSWORD</code> global The password authentication value for sending via the from email address. <code>REPORTING_SMTP_SSL</code> <code>SSL</code> global Determine whether or not to use a secure connection for SMTP. <code>REPORTING_SMTP_SUBJECT</code> <code>BunkerWeb Report</code> global The subject line of the email. <p>Information and behavior</p> <ul> <li>case <code>USE_REPORTING_SMTP</code> is set to <code>yes</code>, the setting <code>REPORTING_SMTP_EMAILS</code> must be set.</li> <li>case <code>USE_REPORTING_WEBHOOK</code> is set to <code>yes</code>, the setting <code>REPORTING_WEBHOOK_URLS</code> must be set.</li> <li>Accepted values for <code>REPORTING_SCHEDULE</code> are <code>daily</code>, <code>weekly</code>and <code>monthly</code>.</li> <li>case no <code>REPORTING_SMTP_FROM_USER</code> and <code>REPORTING_SMTP_FROM_PASSWORD</code> are set, the plugin will try to send the email without authentication.</li> <li>case <code>REPORTING_SMTP_FROM_USER</code> isn't set but <code>REPORTING_SMTP_FROM_PASSWORD</code> is set, the plugin will use the <code>REPORTING_SMTP_FROM_EMAIL</code> as the username.</li> <li>case the job fails, the plugin will retry sending the report in the next execution.</li> </ul>"},{"location":"advanced/#backup-and-restore","title":"Backup and restore","text":""},{"location":"advanced/#backup","title":"Backup","text":"<p>STREAM support </p>"},{"location":"advanced/#automated-backup","title":"Automated backup","text":"<p>Information for Red Hat Enterprise Linux (RHEL) 8.9 users</p> <p>If you are using RHEL 8.9 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <p>Data is invaluable, especially in digital environments where it's susceptible to loss due to various factors such as hardware failures, software errors, or human mistakes. To mitigate such risks and ensure the safety and availability of your important files, it's crucial to establish a robust backup system. This section outlines the backup functionality provided by BunkerWeb, allowing you to securely store your data in a custom location through regular backups.</p> <p>Information and behavior</p> <p>The importance of backups cannot be overstated. They serve as a safety net against data loss scenarios, providing a means to restore your system to a previous state in case of unexpected events. Regular backups not only safeguard your data but also offer peace of mind, knowing that you have a reliable mechanism in place to recover from any mishaps.</p> Setting Default Context Multiple Description <code>USE_BACKUP</code> <code>yes</code> global no Enable or disable the backup feature <code>BACKUP_SCHEDULE</code> <code>daily</code> global no The frequency of the backup <code>BACKUP_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_DIRECTORY</code> <code>/var/lib/bunkerweb/backups</code> global no The directory where the backup will be stored"},{"location":"advanced/#manual-backup","title":"Manual backup","text":"<p>To manually initiate a backup, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup save\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <p>This command will create a backup of your database and store it in the backup directory specified in the <code>BACKUP_DIRECTORY</code> setting.</p> <p>You can also specify a custom directory for the backup by providing the <code>BACKUP_DIRECTORY</code> environment variable when executing the command:</p> LinuxDocker <pre><code>BACKUP_DIRECTORY=/path/to/backup/directory bwcli plugin backup save\n</code></pre> <pre><code>docker exec -it -e BACKUP_DIRECTORY=/path/to/backup/directory &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/backup/directory /path/to/backup/directory\n</code></pre> <p>Specifications for MariaDB/MySQL</p> <p>In case you are using MariaDB/MySQL, you may encounter the following error when trying to backup your database:</p> <pre><code>caching_sha2_password could not be loaded: Error loading shared library /usr/lib/mariadb/plugin/caching_sha2_password.so\n</code></pre> <p>To resolve this issue, you can execute the following command to change the authentication plugin to <code>mysql_native_password</code>:</p> <pre><code>ALTER USER 'yourusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'youpassword';\n</code></pre> <p>If you're using the Docker integration, you can add the following command to the <code>docker-compose.yml</code> file to automatically change the authentication plugin:</p> MariaDBMySQL <pre><code>bw-db:\n    image: mariadb:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre> <pre><code>bw-db:\n    image: mysql:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre>"},{"location":"advanced/#manual-restore","title":"Manual restore","text":"<p>To manually initiate a restore, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup restore\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup restore\n</code></pre> <p>This command will create a temporary backup of your database in <code>/var/tmp/bunkerweb/backups</code> and restore your database to the latest backup available in the backup directory specified in the <code>BACKUP_DIRECTORY</code> setting.</p> <p>You can also specify a custom backup file for the restore by providing the path to it as an argument when executing the command:</p> LinuxDocker <pre><code>bwcli plugin backup restore /path/to/backup/file\n</code></pre> <pre><code>docker cp /path/to/backup/file &lt;scheduler_container&gt;:/path/to/backup/file\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup restore /path/to/backup/file\n</code></pre> <p>In case of failure</p> <p>Don't worry if the restore fails, you can always restore your database to the previous state by executing the command again but with the <code>BACKUP_DIRECTORY</code> setting set to <code>/var/tmp/bunkerweb/backups</code>:</p> LinuxDocker <pre><code>BACKUP_DIRECTORY=/var/tmp/bunkerweb/backups bwcli plugin backup restore\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/var/tmp/bunkerweb/backups /var/tmp/bunkerweb/backups\n</code></pre> <pre><code>docker exec -it -e BACKUP_DIRECTORY=/var/tmp/bunkerweb/backups &lt;scheduler_container&gt; bwcli plugin backup restore\n</code></pre>"},{"location":"advanced/#backup-s3-pro","title":"Backup S3  (PRO)","text":"<p>STREAM support </p> <p>The Backup S3 tool seamlessly automates data protection, similar to the community backup plugin. However, it stands out by securely storing backups directly in an S3 bucket.</p> <p>By activating this feature, you're proactively safeguarding your data's integrity. Storing backups remotely shields crucial information from threats like hardware failures, cyberattacks, or natural disasters. This ensures both security and availability, enabling swift recovery during unexpected events, preserving operational continuity, and ensuring peace of mind.</p> <p>Information for Red Hat Enterprise Linux (RHEL) 8.9 users</p> <p>If you are using RHEL 8.9 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <p>List of features</p> <ul> <li>Automatic data backup to an S3 bucket</li> <li>Flexible scheduling options: daily, weekly, or monthly</li> <li>Rotation management for controlling the number of backups to keep</li> <li>Customizable compression level for backup files</li> </ul> <p>List of settings</p> Setting Default Context Description <code>USE_BACKUP_S3</code> <code>no</code> global Enable or disable the S3 backup feature <code>BACKUP_S3_SCHEDULE</code> <code>daily</code> global The frequency of the backup <code>BACKUP_S3_ROTATION</code> <code>7</code> global The number of backups to keep <code>BACKUP_S3_ENDPOINT</code> global The S3 endpoint <code>BACKUP_S3_BUCKET</code> global The S3 bucket <code>BACKUP_S3_DIR</code> global The S3 directory <code>BACKUP_S3_REGION</code> global The S3 region <code>BACKUP_S3_ACCESS_KEY_ID</code> global The S3 access key ID <code>BACKUP_S3_ACCESS_KEY_SECRET</code> global The S3 access key secret <code>BACKUP_S3_COMP_LEVEL</code> <code>6</code> global The compression level of the backup zip file"},{"location":"advanced/#manual-backup_1","title":"Manual backup","text":"<p>To manually initiate a backup, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 save\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 save\n</code></pre> <p>This command will create a backup of your database and store it in the S3 bucket specified in the <code>BACKUP_S3_BUCKET</code> setting.</p> <p>You can also specify a custom S3 bucket for the backup by providing the <code>BACKUP_S3_BUCKET</code> environment variable when executing the command:</p> LinuxDocker <pre><code>BACKUP_S3_BUCKET=your-bucket-name bwcli plugin backup_s3 save\n</code></pre> <pre><code>docker exec -it -e BACKUP_S3_BUCKET=your-bucket-name &lt;scheduler_container&gt; bwcli plugin backup_s3 save\n</code></pre> <p>Specifications for MariaDB/MySQL</p> <p>In case you are using MariaDB/MySQL, you may encounter the following error when trying to backup your database:</p> <pre><code>caching_sha2_password could not be loaded: Error loading shared library /usr/lib/mariadb/plugin/caching_sha2_password.so\n</code></pre> <p>To resolve this issue, you can execute the following command to change the authentication plugin to <code>mysql_native_password</code>:</p> <pre><code>ALTER USER 'yourusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'youpassword';\n</code></pre> <p>If you're using the Docker integration, you can add the following command to the <code>docker-compose.yml</code> file to automatically change the authentication plugin:</p> MariaDBMySQL <pre><code>bw-db:\n    image: mariadb:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre> <pre><code>bw-db:\n    image: mysql:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre>"},{"location":"advanced/#manual-restore_1","title":"Manual restore","text":"<p>To manually initiate a restore, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 restore\n</code></pre> <p>This command will create a temporary backup of your database in the S3 bucket specified in the <code>BACKUP_S3_BUCKET</code> setting and restore your database to the latest backup available in the bucket.</p> <p>You can also specify a custom backup file for the restore by providing the path to it as an argument when executing the command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore s3_backup_file.zip\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup restore s3_backup_file.zip\n</code></pre> <p>In case of failure</p> <p>Don't worry if the restore fails, you can always restore your database to the previous state by executing the command again as a backup is created before the restore:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 restore\n</code></pre>"},{"location":"advanced/#migration-pro","title":"Migration  (PRO)","text":"<p>STREAM support </p> <p>The Migration plugin revolutionizes BunkerWeb configuration transfers between instances with its user-friendly web interface, simplifying the entire migration journey. Whether you're upgrading systems, scaling infrastructure, or transitioning environments, this tool empowers you to effortlessly transfer settings, preferences, and data with unmatched ease and confidence. Say goodbye to cumbersome manual processes and hello to a seamless, hassle-free migration experience.</p> <p>List of features</p> <ul> <li> <p>Effortless Migration: Easily transfer BunkerWeb configurations between instances without the complexities of manual procedures.</p> </li> <li> <p>Intuitive Web Interface: Navigate through the migration process effortlessly with a user-friendly web interface designed for intuitive operation.</p> </li> <li> <p>Cross-Database Compatibility: Enjoy seamless migration across various database platforms, including SQLite, MySQL, MariaDB, and PostgreSQL, ensuring compatibility with your preferred database environment.</p> </li> </ul>"},{"location":"advanced/#create-a-migration-file","title":"Create a migration file","text":"<p>To manually create a migration file, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin migration create /path/to/migration/file\n</code></pre> <ol> <li> <p>Create a migration file:</p> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin migration create /path/to/migration/file\n</code></pre> </li> <li> <p>Copy the migration file to your local machine:</p> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/migration/file /path/to/migration/file\n</code></pre> </li> </ol> <p>This command will create a backup of your database and store it in the backup directory specified in the command.</p> <p>Specifications for MariaDB/MySQL</p> <p>In case you are using MariaDB/MySQL, you may encounter the following error when trying to backup your database:</p> <pre><code>caching_sha2_password could not be loaded: Error loading shared library /usr/lib/mariadb/plugin/caching_sha2_password.so\n</code></pre> <p>To resolve this issue, you can execute the following command to change the authentication plugin to <code>mysql_native_password</code>:</p> <pre><code>ALTER USER 'yourusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'youpassword';\n</code></pre> <p>If you're using the Docker integration, you can add the following command to the <code>docker-compose.yml</code> file to automatically change the authentication plugin:</p> MariaDBMySQL <pre><code>bw-db:\n    image: mariadb:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre> <pre><code>bw-db:\n    image: mysql:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre>"},{"location":"advanced/#initialize-a-migration","title":"Initialize a migration","text":"<p>To manually initialize a migration, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin migration migrate /path/to/migration/file\n</code></pre> <ol> <li> <p>Copy the migration file to the container:</p> <pre><code>docker cp /path/to/migration/file &lt;scheduler_container&gt;:/path/to/migration/file\n</code></pre> </li> <li> <p>Initialize the migration:</p> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin migration migrate /path/to/migration/file\n</code></pre> </li> </ol> <p>This command seamlessly migrates your BunkerWeb data to precisely match the configuration outlined in the migration file.</p>"},{"location":"advanced/#securitytxt","title":"Security.txt","text":"<p>STREAM support </p> <p>The Security.txt plugin allows you to easily create a <code>security.txt</code> file for your website, providing a standardized method for security researchers and others to report security vulnerabilities. By enabling this feature, you can enhance your site's security posture and streamline the reporting process for potential security issues.</p> <p>List of features</p> <ul> <li>Streamlined and Standardized Reporting: Implement a standardized and user-friendly method for security researchers to report vulnerabilities, ensuring clear communication and timely responses.</li> <li>Enhanced Security Posture and Transparency: Strengthen your site's security by providing clear guidelines for reporting security issues, fostering transparency and trust within the security community.</li> <li>Customizable and User-Friendly Configuration: Customize the <code>security.txt</code> file to include specific contact information and security policies, and manage it easily through a user-friendly web interface.</li> <li>Compliance with Best Practices: Align with industry best practices by implementing a <code>security.txt</code> file, demonstrating your commitment to security and fostering a collaborative security culture.</li> </ul> <p>Settings required</p> <p>To enable the Security.txt plugin, you need to at least set the <code>SECURITYTXT_CONTACT</code> setting to a valid value to specify the contact information for reporting security vulnerabilities. If this setting is not configured, the <code>security.txt</code> file won't be served.</p> <p>List of settings</p> Setting Default Context Multiple Description <code>USE_SECURITYTXT</code> <code>no</code> multisite no Enable security.txt file. <code>SECURITYTXT_URI</code> <code>/.well-known/security.txt</code> multisite no Indicates the URI where the \"security.txt\" file will be accessible from. <code>SECURITYTXT_CONTACT</code> multisite yes Indicates a method that researchers should use for reporting security vulnerabilities such as an email address, a phone number, and/or a web page with contact information. (If the value is empty, the security.txt file will not be created as it is a required field) <code>SECURITYTXT_EXPIRES</code> multisite no Indicates the date and time after which the data contained in the \"security.txt\" file is considered stale and should not be used (If the value is empty, the value will always be the current date and time + 1 year). <code>SECURITYTXT_ENCRYPTION</code> multisite yes Indicates an encryption key that security researchers should use for encrypted communication. <code>SECURITYTXT_ACKNOWLEDGEMENTS</code> multisite yes Indicates a link to a page where security researchers are recognized for their reports. <code>SECURITYTXT_PREFERRED_LANG</code> <code>en</code> multisite no Can be used to indicate a set of natural languages that are preferred when submitting security reports. <code>SECURITYTXT_CANONICAL</code> multisite yes Indicates the canonical URIs where the \"security.txt\" file is located, which is usually something like \"https://example.com/.well-known/security.txt\". (If the value is empty, the default value will be automatically generated from the site URL + SECURITYTXT_URI) <code>SECURITYTXT_POLICY</code> multisite yes Indicates a link to where the vulnerability disclosure policy is located. <code>SECURITYTXT_HIRING</code> multisite yes Used for linking to the vendor's security-related job positions. <code>SECURITYTXT_CSAF</code> multisite yes A link to the provider-metadata.json of your CSAF (Common Security Advisory Framework) provider. <p>Autogenerated values</p> <ul> <li>The <code>SECURITYTXT_CANONICAL</code> setting is automatically generated from the site URL and the <code>SECURITYTXT_URI</code> setting (if the value is empty).</li> <li>The <code>SECURITYTXT_EXPIRES</code> setting is automatically generated to be the current date and time + 1 year if the value is empty.</li> </ul>"},{"location":"advanced/#anti-ddos-pro","title":"Anti DDoS  (PRO)","text":"<p>STREAM support </p> <p>The Anti DDoS Plugin provides advanced protection against Distributed Denial of Service (DDoS) attacks by monitoring, analyzing, and filtering suspicious traffic in real-time.</p> <p>By employing a sliding window mechanism, the plugin maintains an in-memory dictionary of request timestamps to detect abnormal traffic spikes from individual IP addresses. Based on the configured security mode, it can either block offending connections or log the suspicious activity for further review.</p>"},{"location":"advanced/#features","title":"Features","text":"<ul> <li>Real-Time Traffic Analysis: Continuously monitors incoming requests to detect potential DDoS attacks.</li> <li>Sliding Window Mechanism: Tracks recent request activity within a configurable time window.</li> <li>Configurable Thresholds: Allows you to define the maximum number of suspicious requests per IP.</li> <li>Advanced Blocking Logic: Evaluates both per-IP request counts and the number of distinct IPs exceeding the threshold.</li> <li>Flexible Security Modes: Choose between immediate connection blocking or detection-only (logging) mode.</li> <li>Optimized In-Memory Datastore: Ensures high-speed lookups and efficient metric tracking.</li> <li>Automatic Housekeeping: Periodically clears outdated data to maintain optimal performance.</li> </ul>"},{"location":"advanced/#configuration","title":"Configuration","text":"<p>Customize the plugin behavior using the following settings:</p> Setting Default Context Multiple Description <code>USE_ANTIDDOS</code> <code>no</code> global no Enable or disable the Anti DDoS protection. Set to <code>\"yes\"</code> to activate the plugin. <code>ANTIDDOS_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the in-memory datastore for tracking DDoS metrics (e.g., <code>10M</code>, <code>500k</code>). <code>ANTIDDOS_THRESHOLD</code> <code>100</code> global no Maximum number of suspicious requests allowed per IP within the defined time window. <code>ANTIDDOS_WINDOW_TIME</code> <code>10</code> global no Time window in seconds during which suspicious requests are tallied. <code>ANTIDDOS_STATUS_CODES</code> <code>429 403 444</code> global no HTTP status codes considered suspicious and used to trigger anti-DDoS actions. <code>ANTIDDOS_DISTINCT_IP</code> <code>5</code> global no Minimum number of distinct IPs that must exceed the threshold before enforcing the block mode."},{"location":"advanced/#best-practices","title":"Best Practices","text":"<ul> <li>Threshold Tuning: Adjust <code>ANTIDDOS_THRESHOLD</code> and <code>ANTIDDOS_WINDOW_TIME</code> based on your typical traffic patterns.</li> <li>Status Code Review: Regularly update <code>ANTIDDOS_STATUS_CODES</code> to capture new or evolving suspicious behaviors.</li> <li>Monitoring: Analyze logs and metrics periodically to fine-tune settings and improve overall protection.</li> </ul>"},{"location":"advanced/#user-manager-pro","title":"User Manager  (PRO)","text":"<p>The User Management Plugin offers a robust interface for administering user accounts within your system.</p> <p>With this plugin, administrators can effortlessly create, update, and disable user accounts, manage user roles, toggle two-factor authentication (2FA), and view detailed user information such as last login timestamps and account statuses (active or inactive). Designed with security and ease-of-use in mind, this plugin simplifies routine user management tasks while ensuring compliance and auditability.</p>"},{"location":"advanced/#features_1","title":"Features","text":"<ul> <li>User Account Operations: Create, edit, and delete user accounts with ease.</li> <li>Role-Based Access Control: Assign and modify user roles to manage permissions and access levels.</li> <li>2FA Management: Disable two-factor authentication based on administrative decisions.</li> <li>Comprehensive User Insights: Monitor key user data including last login times, account creation dates, and active/inactive status.</li> <li>Audit Logging: Maintain an audit trail for all user management actions for enhanced security and compliance.</li> </ul> User Manager page User Manager - Create user form User Manager - Activities page"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#architecture","title":"Architecture","text":"<p>Within your infrastructure, BunkerWeb acts as a reverse proxy in front of your web services. The typical architecture consists of accessing BunkerWeb from the Internet, which then forwards requests to the appropriate application service on a secure network.</p> <p>Using BunkerWeb that way (classical reverse proxy architecture) with TLS offloading and centralized security policies enhances performance by reducing encryption overhead on backend servers while ensuring consistent access control, threat mitigation, and compliance enforcement across all services.</p>"},{"location":"concepts/#integrations","title":"Integrations","text":"<p>The first concept is the integration of BunkerWeb into the target environment. We prefer to use the word \"integration\" instead of \"installation\" because one of the goals of BunkerWeb is to integrate seamlessly into existing environments.</p> <p>The following integrations are officially supported :</p> <ul> <li>Docker</li> <li>Linux</li> <li>Docker autoconf</li> <li>Kubernetes</li> <li>Swarm</li> </ul> <p>If you think that a new integration should be supported, do not hesitate to open a new issue on the GitHub repository.</p> <p>Going further</p> <p>The technical details of all BunkerWeb integrations are available in the integrations section of the documentation.</p>"},{"location":"concepts/#settings","title":"Settings","text":"<p>PRO settings</p> <p>Some plugins are reserved for the PRO version. Find out more about the pro version here.</p> <p>Once BunkerWeb is integrated into your environment, you will need to configure it to serve and protect your web applications.</p> <p>The configuration of BunkerWeb is done by using what we call the \"settings\" or \"variables\". Each setting is identified by a name such as <code>AUTO_LETS_ENCRYPT</code> or <code>USE_ANTIBOT</code>. You can assign values to the settings to configure BunkerWeb.</p> <p>Here is a dummy example of a BunkerWeb configuration :</p> <pre><code>SERVER_NAME=www.example.com\nAUTO_LETS_ENCRYPT=yes\nUSE_ANTIBOT=captcha\nREFERRER_POLICY=no-referrer\nUSE_MODSECURITY=no\nUSE_GZIP=yes\nUSE_BROTLI=no\n</code></pre> <p>Please note that if you are using the web User Interface, the setting names are also displayed in addition to a \"human-friendly\" label :</p> <p> </p> Settings name in the web UI <p>You can also use the search bar and directly specify a setting name :</p> <p> </p> Settings search in the web UI <p>Going further</p> <p>The complete list of available settings with descriptions and possible values is available in the settings section of the documentation.</p> <p>Settings generator tool</p> <p>To help you tune BunkerWeb, we offer an easy-to-use settings generator tool available at config.bunkerweb.io.</p>"},{"location":"concepts/#multisite-mode","title":"Multisite mode","text":"<p>Understanding the multisite mode is essential when utilizing BunkerWeb. As our primary focus is safeguarding web applications, our solution is intricately linked to the concept of \"virtual hosts\" or \"vhosts\" (more info here). These virtual hosts enable the serving of multiple web applications from a single instance or cluster.</p> <p>By default, BunkerWeb has the multisite mode disabled. This means that only one web application will be served, and all settings will be applied to it. This setup is ideal when you have a single application to protect, as you don't need to concern yourself with multisite configurations.</p> <p>However, when the multisite mode is enabled, BunkerWeb becomes capable of serving and protecting multiple web applications. Each web application is identified by a unique server name and has its own set of settings. This mode proves beneficial when you have multiple applications to secure, and you prefer to utilize a single instance (or a cluster) of BunkerWeb.</p> <p>The activation of the multisite mode is controlled by the <code>MULTISITE</code> setting, which can be set to <code>yes</code> to enable it or <code>no</code> to keep it disabled (which is the default value).</p> <p>Each setting within BunkerWeb has a specific context that determines where it can be applied. If the context is set to \"global,\" the setting can't be applied per server or site but is instead applied to the entire configuration as a whole. On the other hand, if the context is \"multisite,\" the setting can be applied globally and per server. To define a multisite setting for a specific server, simply add the server name as a prefix to the setting name. For example, <code>app1.example.com_AUTO_LETS_ENCRYPT</code> or <code>app2.example.com_USE_ANTIBOT</code> are examples of setting names with server name prefixes. When a multisite setting is defined globally without a server prefix, all servers inherit that setting. However, individual servers can still override the setting if the same setting is defined with a server name prefix.</p> <p>Understanding the intricacies of multisite mode and its associated settings allows you to tailor BunkerWeb's behavior to suit your specific requirements, ensuring optimal protection for your web applications.</p> <p>Here's a dummy example of a multisite BunkerWeb configuration :</p> <pre><code>MULTISITE=yes\nSERVER_NAME=app1.example.com app2.example.com app3.example.com\nAUTO_LETS_ENCRYPT=yes\nUSE_GZIP=yes\nUSE_BROTLI=yes\napp1.example.com_USE_ANTIBOT=javascript\napp1.example.com_USE_MODSECURITY=no\napp2.example.com_USE_ANTIBOT=cookie\napp2.example.com_WHITELIST_COUNTRY=FR\napp3.example.com_USE_BAD_BEHAVIOR=no\n</code></pre> <p>Please note that multisite mode is implicit when using the web User Interface. You have the option to apply configurations directly to your services or to set a global configuration that will be applied to all your services (you can still apply exceptions directly to specific services) :</p> <p> </p> Apply a setting to all services from the web UI <p>Going further</p> <p>You will find concrete examples of multisite mode in the advanced usages of the documentation and the examples directory of the repository.</p>"},{"location":"concepts/#custom-configurations","title":"Custom configurations","text":"<p>To address unique challenges and cater to specific use cases, BunkerWeb offers the flexibility of custom configurations. While the provided settings and external plugins cover a wide range of scenarios, there may be situations that require additional customization.</p> <p>BunkerWeb is built on the renowned NGINX web server, which provides a powerful configuration system. This means you can leverage NGINX's configuration capabilities to meet your specific needs. Custom NGINX configurations can be included in various contexts such as HTTP or server, allowing you to fine-tune the behavior of BunkerWeb according to your requirements. Whether you need to customize global settings or apply configurations to specific server blocks, BunkerWeb empowers you to optimize its behavior to align perfectly with your use case.</p> <p>Another integral component of BunkerWeb is the ModSecurity Web Application Firewall. With custom configurations, you have the flexibility to address false positives or add custom rules to further enhance the protection provided by ModSecurity. These custom configurations allow you to fine-tune the behavior of the firewall and ensure that it aligns with the specific requirements of your web applications.</p> <p>By leveraging custom configurations, you unlock a world of possibilities to tailor BunkerWeb's behavior and security measures precisely to your needs. Whether it's adjusting NGINX configurations or fine-tuning ModSecurity, BunkerWeb provides the flexibility to meet your unique challenges effectively.</p> <p>Managing custom configurations from the web User Interface is done through the Configs menu :</p> <p> </p> Manage custom configurations from the web UI <p>Going further</p> <p>You will find concrete examples of custom configurations in the advanced usages of the documentation and the examples directory of the repository.</p>"},{"location":"concepts/#database","title":"Database","text":"<p>BunkerWeb securely stores its current configuration in a backend database, which contains essential data for smooth operation. The following information is stored in the database:</p> <ul> <li> <p>Settings for all services: The database holds the defined settings for all the services provided by BunkerWeb. This ensures that your configurations and preferences are preserved and readily accessible.</p> </li> <li> <p>Custom configurations: Any custom configurations you create are also stored in the backend database. This includes personalized settings and modifications tailored to your specific requirements.</p> </li> <li> <p>BunkerWeb instances: Information about BunkerWeb instances, including their setup and relevant details, is stored in the database. This allows for easy management and monitoring of multiple instances if applicable.</p> </li> <li> <p>Metadata about job execution: The database stores metadata related to the execution of various jobs within BunkerWeb. This includes information about scheduled tasks, maintenance processes, and other automated activities.</p> </li> <li> <p>Cached files: BunkerWeb utilizes caching mechanisms for improved performance. The database holds cached files, ensuring efficient retrieval and delivery of frequently accessed resources.</p> </li> </ul> <p>Under the hood, whenever you edit a setting or add a new configuration, BunkerWeb automatically stores the changes in the database, ensuring data persistence and consistency. BunkerWeb supports multiple backend database options, including SQLite, MariaDB, MySQL, and PostgreSQL.</p> <p>Configuring the database is straightforward using the <code>DATABASE_URI</code> setting, which follows the specified formats for each supported database:</p> <ul> <li>SQLite: <code>sqlite:///var/lib/bunkerweb/db.sqlite3</code></li> <li>MariaDB: <code>mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db</code></li> <li>MySQL: <code>mysql+pymysql://bunkerweb:changeme@bw-db:3306/db</code></li> <li>PostgreSQL: <code>postgresql://bunkerweb:changeme@bw-db:5432/db</code></li> </ul> <p>By specifying the appropriate database URI in the configuration, you can seamlessly integrate BunkerWeb with your preferred database backend, ensuring efficient and reliable storage of your configuration data.</p> <p> </p> Database Schema"},{"location":"concepts/#scheduler","title":"Scheduler","text":"<p>For seamless coordination and automation, BunkerWeb employs a specialized service known as the scheduler. The scheduler plays a vital role in ensuring smooth operation by performing the following tasks:</p> <ul> <li> <p>Storing settings and custom configurations: The scheduler is responsible for storing all the settings and custom configurations within the backend database. This centralizes the configuration data, making it easily accessible and manageable.</p> </li> <li> <p>Executing various tasks (jobs): The scheduler handles the execution of various tasks, referred to as jobs. These jobs encompass a range of activities, such as periodic maintenance, scheduled updates, or any other automated tasks required by BunkerWeb.</p> </li> <li> <p>Generating BunkerWeb configuration: The scheduler generates a configuration that is readily understood by BunkerWeb. This configuration is derived from the stored settings and custom configurations, ensuring that the entire system operates cohesively.</p> </li> <li> <p>Acting as an intermediary for other services: The scheduler acts as an intermediary, facilitating communication and coordination between different components of BunkerWeb. It interfaces with services such as the web UI or autoconf, ensuring a seamless flow of information and data exchange.</p> </li> </ul> <p>In essence, the scheduler serves as the brain of BunkerWeb, orchestrating various operations and ensuring the smooth functioning of the system.</p> <p>Depending on the integration approach, the execution environment of the scheduler may differ. In container-based integrations, the scheduler is executed within its dedicated container, providing isolation and flexibility. On the other hand, for Linux-based integrations, the scheduler is self-contained within the bunkerweb service, simplifying the deployment and management process.</p> <p>By employing the scheduler, BunkerWeb streamlines the automation and coordination of essential tasks, enabling efficient and reliable operation of the entire system.</p> <p>If you are using the web User Interface, you can manage scheduler jobs by clicking on Jobs from the menu :</p> <p> </p> Manage jobs from the web UI <p>Instances healthcheck</p> <p>Since the 1.6.0, the Scheduler possess a built-in healthcheck system, that will check the health of the instances. If an instance becomes unhealthy, the scheduler will stop sending the configuration to it. If the instance becomes healthy again, the scheduler will start sending the configuration to it again.</p> <p>The healthcheck interval is set by the <code>HEALTHCHECK_INTERVAL</code> environment variable with a default value of <code>30</code> which means that the scheduler will check the health of the instances every 30 seconds.</p>"},{"location":"concepts/#templates","title":"Templates","text":"<p>BunkerWeb leverages the power of templates to simplify the configuration process and enhance flexibility. Templates provide a structured and standardized approach to defining settings and custom configurations, ensuring consistency and ease of use.</p> <ul> <li> <p>Predefined templates: The community version offers three predefined templates that encapsulate common custom  configurations and settings. These templates serve as a starting point for configuring BunkerWeb, enabling quick setup and deployment. The predefined templates are the following:</p> <ul> <li>low: A basic template that provides essential settings for web application protection.</li> <li>medium: A balanced template that offers a mix of security features and performance optimizations.</li> <li>high: An advanced template that focuses on robust security measures and comprehensive protection.</li> </ul> </li> <li> <p>Custom templates: In addition to predefined templates, BunkerWeb allows users to create custom templates tailored to their specific requirements. Custom templates enable fine-tuning of settings and custom configurations, ensuring that BunkerWeb aligns perfectly with the user's needs.</p> </li> </ul> <p>With the web User Interface, templates are available through easy mode when you add or edit a service :</p> <p> </p> Templates usage from the web UI <p>Creating custom templates</p> <p>Creating a custom template is a straightforward process that involves defining the desired settings, custom configurations and steps in a structured format.</p> <ul> <li>Template structure: A custom template consists of a name, series of settings, custom configurations and optional steps. The template structure is defined in a JSON file that adheres to the specified format. The key components of a custom template include:<ul> <li>Settings: A setting is defined with a name and corresponding value. This value will override the default value of the setting. Only multisite settings are supported.</li> <li>Configs: A custom configuration is a path to an NGINX configuration file that will be included as a custom configuration. To know where to place the custom configuration file, refer to the example of a plugin's tree below. Only multisite configuration types are supported.</li> <li>Steps: A step contains a title, subtitle, settings and custom configurations. Each step represents a configuration step that the user can follow to set up BunkerWeb according to the custom template in the web UI.</li> </ul> </li> </ul> <p>Specifications about steps</p> <p>If steps are declared, it is not mandatory to include all the settings and custom configurations in the settings and configs sections. keep in mind that when a setting or a custom configuration is declared in a step, the user will be allowed to make edits to it in the web UI.</p> <ul> <li> <p>Template file: The custom template is defined in a json file in a <code>templates</code> folder inside the plugin directory that adheres to the specified structure. The template file contains a name, the settings, custom configurations, and steps required to configure BunkerWeb according to the user's preferences.</p> </li> <li> <p>Selecting a template: Once the custom template is defined, users can select it during the easy-mode configuration process of a service in the web UI. A template can also be selected with the <code>USE_TEMPLATE</code> setting in the configuration. The name of the template file (without the <code>.json</code> extension) should be specified as the value of the <code>USE_TEMPLATE</code> setting.</p> </li> </ul> <p>Example of a custom template file: <pre><code>{\n    \"name\": \"template name\",\n    // optional\n    \"settings\": {\n        \"SETTING_1\": \"value\",\n        \"SETTING_2\": \"value\"\n    },\n    // optional\n    \"configs\": [\n        \"modsec/false_positives.conf\",\n        \"modsec/non_editable.conf\",\n        \"modsec-crs/custom_rules.conf\"\n    ],\n    // optional\n    \"steps\": [\n        {\n            \"title\": \"Title 1\",\n            \"subtitle\": \"subtitle 1\",\n            \"settings\": [\n                \"SETTING_1\"\n            ],\n            \"configs\": [\n                \"modsec-crs/custom_rules.conf\"\n            ]\n        },\n        {\n            \"title\": \"Title 2\",\n            \"subtitle\": \"subtitle 2\",\n            \"settings\": [\n                \"SETTING_2\"\n            ],\n            \"configs\": [\n                \"modsec/false_positives.conf\"\n            ]\n        }\n    ]\n}\n</code></pre></p> <p>Example of a plugin's tree including custom templates: <pre><code>.\n\u251c\u2500\u2500 plugin.json\n\u2514\u2500\u2500 templates\n    \u251c\u2500\u2500 my_other_template.json\n    \u251c\u2500\u2500 my_template\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configs\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 modsec\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 false_positives.conf\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 non_editable.conf\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 modsec-crs\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 custom_rules.conf\n    \u2514\u2500\u2500 my_template.json\n</code></pre></p>"},{"location":"integrations/","title":"Integrations","text":""},{"location":"integrations/#bunkerweb-cloud","title":"BunkerWeb Cloud","text":"BunkerWeb Cloud <p>Coming soon</p> <p>After a successful beta phase, we are working hard on the BunkerWeb Cloud offer to release it to the public.</p> <p>BunkerWeb Cloud will be the easiest way to get started with BunkerWeb. It offers you a fully managed BunkerWeb service with no hassle. Think of a like a BunkerWeb-as-a-Service !</p> <p>If you are interested into the BunkerWeb Cloud offer, don't hesitate to contact us so we can discuss about your needs.</p>"},{"location":"integrations/#docker","title":"Docker","text":"Docker integration <p>Utilizing BunkerWeb as a Docker container offers a convenient and straightforward approach for testing and utilizing the solution, particularly if you are already familiar with Docker technology.</p> <p>To facilitate your Docker deployment, we provide readily available prebuilt images on Docker Hub, supporting multiple architectures. These prebuilt images are optimized and prepared for use on the following architectures:</p> <ul> <li>x64 (64-bit)</li> <li>x86</li> <li>armv8 (ARM 64-bit)</li> <li>armv7 (ARM 32-bit)</li> </ul> <p>By accessing these prebuilt images from Docker Hub, you can quickly pull and run BunkerWeb within your Docker environment, eliminating the need for extensive configuration or setup processes. This streamlined approach allows you to focus on leveraging the capabilities of BunkerWeb without unnecessary complexities.</p> <p>Whether you're conducting tests, developing applications, or deploying BunkerWeb in production, the Docker containerization option provides flexibility and ease of use. Embracing this method empowers you to take full advantage of BunkerWeb's features while leveraging the benefits of Docker technology.</p> <pre><code>docker pull bunkerity/bunkerweb:1.6.1\n</code></pre> <p>Docker images are also available on GitHub packages and can be downloaded using the <code>ghcr.io</code> repository address :</p> <pre><code>docker pull ghcr.io/bunkerity/bunkerweb:1.6.1\n</code></pre> <p>Docker integration key concepts are :</p> <ul> <li>Environment variables to configure BunkerWeb</li> <li>Scheduler container to store configuration and execute jobs</li> <li>Networks to expose ports for clients and connect to upstream web services</li> </ul> <p>When integrating BunkerWeb with Docker, there are key concepts to keep in mind, ensuring a smooth and efficient deployment:</p> <ul> <li> <p>Environment variables: BunkerWeb can be easily configured using environment variables. These variables allow you to customize various aspects of BunkerWeb's behavior, such as network settings, security options, and other parameters.</p> </li> <li> <p>Scheduler container: To effectively manage the configuration and execution of jobs, BunkerWeb utilizes a dedicated container called the scheduler.</p> </li> <li> <p>Networks: Docker networks play a vital role in the integration of BunkerWeb. These networks serve two main purposes: exposing ports to clients and connecting to upstream web services. By exposing ports, BunkerWeb can accept incoming requests from clients, allowing them to access the protected web services. Additionally, by connecting to upstream web services, BunkerWeb can efficiently route and manage the traffic, providing enhanced security and performance.</p> </li> </ul> <p>Database backend</p> <p>Please be aware that our instructions assume you are using SQLite as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p>"},{"location":"integrations/#environment-variables","title":"Environment variables","text":"<p>Settings are passed to the Scheduler using Docker environment variables :</p> <pre><code>...\nservices:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      - MY_SETTING=value\n      - ANOTHER_SETTING=another value\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n...\n</code></pre> <p>Full list</p> <p>For the complete list of environment variables, see the settings section of the documentation.</p>"},{"location":"integrations/#scheduler","title":"Scheduler","text":"<p>The scheduler is executed in its own container which is also available on Docker Hub :</p> <pre><code>docker pull bunkerity/bunkerweb-scheduler:1.6.1\n</code></pre> <p>BunkerWeb settings</p> <p>Since the <code>1.6.0</code> version, the Scheduler container is the one who you will define the settings for BunkerWeb. The Scheduler will then push the configuration to the BunkerWeb container.</p> <p>\u26a0 Important : All API related settings (like <code>API_HTTP_PORT</code>, <code>API_LISTEN_IP</code>, <code>API_SERVER_NAME</code> and <code>API_WHITELIST_IP</code>) must be defined in the BunkerWeb container as well. (The settings have to be mirrored in both containers, else the BunkerWeb container will not accept API requests from the Scheduler).</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_HTTP_PORT: \"5000\" # Default value\n  API_LISTEN_IP: \"0.0.0.0\" # Default value\n  API_SERVER_NAME: \"bwapi\" # Default value\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\" # Set this according to your network settings\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    environment:\n      # This will set the API settings for the BunkerWeb container\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      # This will set the API settings for the Scheduler container\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n...\n</code></pre> <p>A volume is needed to store the SQLite database and the backups that will be used by the scheduler :</p> <pre><code>...\nservices:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    volumes:\n      - bw-storage:/data\n...\nvolumes:\n  bw-storage:\n</code></pre> <p>Using local folder for persistent data</p> <p>The scheduler runs as an unprivileged user with UID 101 and GID 101 inside the container. The reason behind this is security : in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges.</p> <p>But there is a downside : if you use a local folder for the persistent data, you will need to set the correct permissions so the unprivileged user can write data to it. Something like that should do the trick :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nchown root:101 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Alternatively, if the folder already exists :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>If you are using Docker in rootless mode or podman, UIDs and GIDs in the container will be mapped to different ones in the host. You will first need to check your initial subuid and subgid :</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100) :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nsudo chgrp 100100 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Or if the folder already exists :</p> <pre><code>sudo chgrp -R 100100 bw-data &amp;&amp; \\\nsudo chmod -R 770 bw-data\n</code></pre>"},{"location":"integrations/#networks","title":"Networks","text":"<p>By default, BunkerWeb container is listening (inside the container) on 8080/tcp for HTTP, 8443/tcp for HTTPS and 8443/udp for QUIC.</p> <p>Privileged ports in rootless mode or when using podman</p> <p>If you are using Docker in rootless mode and want to redirect privileged ports (&lt; 1024) like 80 and 443 to BunkerWeb, please refer to the prerequisites here.</p> <p>If you are using podman you can lower the minimum number for unprivileged ports : <pre><code>sudo sysctl net.ipv4.ip_unprivileged_port_start=1\n</code></pre></p> <p>The typical BunkerWeb stack when using the Docker integration contains the following containers :</p> <ul> <li>BunkerWeb</li> <li>Scheduler</li> <li>Your services</li> </ul> <p>For defense in depth purposes, we strongly recommend to create at least three different Docker networks :</p> <ul> <li><code>bw-services</code> : for BunkerWeb and your web services</li> <li><code>bw-universe</code> : for BunkerWeb and scheduler</li> </ul> <p>To secure the communication between the scheduler and BunkerWeb API, it is important to authorize API calls. You can use the <code>API_WHITELIST_IP</code> setting to specify allowed IP addresses and subnets.</p> <p>It is strongly recommended to use a static subnet for the <code>bw-universe</code> network to enhance security. By implementing these measures, you can ensure that only authorized sources can access the BunkerWeb API, reducing the risk of unauthorized access or malicious activities:</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-services\n      - bw-universe\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n...\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Static subnet so only authorized sources can access the BunkerWeb API\n  bw-services:\n    name: bw-services\n</code></pre>"},{"location":"integrations/#full-compose-file","title":"Full compose file","text":"<pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    depends_on:\n      - bunkerweb\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"www.example.com\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Static subnet so only authorized sources can access the BunkerWeb API\n  bw-services:\n    name: bw-services\n</code></pre>"},{"location":"integrations/#build-from-source","title":"Build from source","text":"<p>Alternatively, if you prefer a more hands-on approach, you have the option to build the Docker image directly from the source. Building the image from source gives you greater control and customization over the deployment process. However, please note that this method may take some time to complete, depending on your hardware configuration  (you can take a coffee \u2615 if needed).</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t bw -f src/bw/Dockerfile . &amp;&amp; \\\ndocker build -t bw-scheduler -f src/scheduler/Dockerfile . &amp;&amp; \\\ndocker build -t bw-autoconf -f src/autoconf/Dockerfile . &amp;&amp; \\\ndocker build -t bw-ui -f src/ui/Dockerfile .\n</code></pre>"},{"location":"integrations/#all-in-one-image","title":"All-In-One Image","text":"<p>Do not use in production</p> <p>The All-In-One Image is ideal for testing and small-scale deployments. In production environments, consider using a multi-container setup to improve scalability, isolation, and monitoring.</p> <p>The All-In-One Image simplifies deployment by combining all BunkerWeb components (core, scheduler, autoconf, and web UI) into a single container. It uses Supervisor to manage processes and directs logs to Docker\u2019s logging system.</p> <p>To deploy the all-in-one container, run:</p> <pre><code>docker run -d -v bw-storage:/data -p 80:8080/tcp -p 443:8443/tcp -p 443/8443/udp bunkerity/bunkerweb-all-in-one:1.6.1\n</code></pre> <p>By default, the container exposes:</p> <ul> <li>8080/tcp for HTTP</li> <li>8443/tcp for HTTPS</li> <li>8443/udp for QUIC</li> <li>7000/tcp for the web UI access without BunkerWeb in front</li> </ul> <p>You can control the services with the following environment variables:</p> <ul> <li><code>SERVICE_SCHEDULER</code> (default: <code>yes</code>)</li> <li><code>SERVICE_UI</code> (default: <code>yes</code>)</li> <li><code>AUTOCONF_MODE</code> (default: <code>no</code>)</li> </ul> <p>For example, to disable the Web UI:</p> <pre><code>docker run -d -v bw-storage:/data -e SERVICE_UI=no -p 80:8080/tcp -p 443:8443/tcp -p 443/8443/udp bunkerity/bunkerweb-all-in-one:1.6.1\n</code></pre>"},{"location":"integrations/#linux","title":"Linux","text":"Linux integration <p>Supported Linux distributions for BunkerWeb (amd64/x86_64 and arm64/aarch64 architectures) include:</p> <ul> <li>Debian 12 \"Bookworm\"</li> <li>Ubuntu 22.04 \"Jammy\"</li> <li>Ubuntu 24.04 \"Noble\"</li> <li>Fedora 40</li> <li>Fedora 41</li> <li>Red Hat Enterprise Linux (RHEL) 8.9</li> <li>Red Hat Enterprise Linux (RHEL) 9.4</li> </ul>"},{"location":"integrations/#installation-using-package-manager","title":"Installation using package manager","text":"<p>Please ensure that you have NGINX 1.26.3 installed before installing BunkerWeb. For all distributions, except Fedora, it is mandatory to use prebuilt packages from the official NGINX repository. Compiling NGINX from source or using packages from different repositories will not work with the official prebuilt packages of BunkerWeb. However, you have the option to build BunkerWeb from source.</p> DebianUbuntuFedoraRedHat <p>The first step is to add NGINX official repository :</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/debian `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.26.3-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you will need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>Disable the setup wizard</p> <p>If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable :</p> <pre><code>export UI_WIZARD=no\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>The first step is to add NGINX official repository :</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release ubuntu-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.26.3-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you will need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>Disable the setup wizard</p> <p>If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable :</p> <pre><code>export UI_WIZARD=no\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>Fedora Update Testing</p> <p>If you can't find the NGINX version listed in the stable repository, you can enable the <code>updates-testing</code> repository :</p> Fedora 41Fedora 40 <pre><code>sudo dnf config-manager setopt updates-testing.enabled=1\n</code></pre> <pre><code>sudo dnf config-manager --set-enabled updates-testing\n</code></pre> <p>Fedora already provides NGINX 1.26.3 that we support :</p> <pre><code>sudo dnf install -y nginx-1.26.3\n</code></pre> <p>Disable the setup wizard</p> <p>If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable :</p> <pre><code>export UI_WIZARD=no\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf makecache &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre> <p>The first step is to add NGINX official repository. Create the following file at <code>/etc/yum.repos.d/nginx.repo</code> :</p> <pre><code>[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo dnf install nginx-1.26.3\n</code></pre> <p>Disable the setup wizard</p> <p>If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable :</p> <pre><code>export UI_WIZARD=no\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>  sudo dnf install -y epel-release &amp;&amp; \\\ncurl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf check-update &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre>"},{"location":"integrations/#configuration-and-service","title":"Configuration and service","text":"<p>Manual configuration of BunkerWeb is done by editing the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>MY_SETTING_1=value1\nMY_SETTING_2=value2\n...\n</code></pre> <p>When installed, BunkerWeb comes with three services <code>bunkerweb</code>, <code>bunkerweb-scheduler</code> and <code>bunkerweb-ui</code> that you can manage using <code>systemctl</code>.</p> <p>If you manually edit the BunkerWeb configuration using <code>/etc/bunkerweb/variables.env</code> a restart of the <code>bunkerweb-scheduler</code> service will be enough to generate and reload the configuration without any downtime. But depending on the case (such as changing listening ports) you might need to restart the <code>bunkerweb</code> service.</p>"},{"location":"integrations/#high-availability","title":"High availability","text":"<p>The scheduler can be detached from the BunkerWeb instance to provide high availability. In this case, the scheduler will be installed on a separate server and will be able to manage multiple BunkerWeb instances.</p> <p>Manager</p> <p>To install only the scheduler on a server, you can export the following variables before executing the BunkerWeb installation :</p> <pre><code>export MANAGER_MODE=yes\nexport UI_WIZARD=no\n</code></pre> <p>Alternatively, you can also export the following variables to only enable the scheduler :</p> <pre><code>export SERVICE_SCHEDULER=yes\nexport SERVICE_BUNKERWEB=no\nexport SERVICE_UI=no\n</code></pre> <p>Worker</p> <p>On another server, to install only BunkerWeb, you can export the following variables before executing the BunkerWeb installation :</p> <pre><code>export WORKER_MODE=yes\n</code></pre> <p>Alternatively, you can also export the following variables to only enable BunkerWeb :</p> <pre><code>export SERVICE_BUNKERWEB=yes\nexport SERVICE_SCHEDULER=no\nexport SERVICE_UI=no\n</code></pre> <p>Web UI</p> <p>The Web UI can be installed on a separate server to provide a dedicated interface for managing BunkerWeb instances. To install only the Web UI, you can export the following variables before executing the BunkerWeb installation :</p> <pre><code>export SERVICE_BUNKERWEB=no\nexport SERVICE_SCHEDULER=no\nexport SERVICE_UI=yes\n</code></pre>"},{"location":"integrations/#docker-autoconf","title":"Docker autoconf","text":"Docker autoconf integration <p>Docker integration</p> <p>The Docker autoconf integration is an \"evolution\" of the Docker one. Please read the Docker integration section first if needed.</p> <p>An alternative approach is available to address the inconvenience of recreating the container every time there is an update. By utilizing another image called autoconf, you can automate the real-time reconfiguration of BunkerWeb without the need for container recreation.</p> <p>To leverage this functionality, instead of defining environment variables for the BunkerWeb container, you can add labels to your web application containers. The autoconf image will then listen for Docker events and seamlessly handle the configuration updates for BunkerWeb.</p> <p>This \"automagical\" process simplifies the management of BunkerWeb configurations. By adding labels to your web application containers, you can delegate the reconfiguration tasks to autoconf without the manual intervention of container recreation. This streamlines the update process and enhances convenience.</p> <p>By adopting this approach, you can enjoy real-time reconfiguration of BunkerWeb without the hassle of container recreation, making it more efficient and user-friendly.</p> <p>Multisite mode</p> <p>The Docker autoconf integration implies the use of multisite mode. Please refer to the multisite section of the documentation for more information.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>To enable automated configuration updates, include an additional container called <code>bw-autoconf</code> in the stack. This container hosts the autoconf service, which manages dynamic configuration changes for BunkerWeb.</p> <p>To support this functionality, use a dedicated \"real\" database backend (e.g., MariaDB, MySQL, or PostgreSQL) for synchronized configuration storage. By integrating <code>bw-autoconf</code> and a suitable database backend, you establish the infrastructure for seamless automated configuration management in BunkerWeb.</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  AUTOCONF_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # Mandatory label for the autoconf service to identify the BunkerWeb instance\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>Database in the <code>bw-db</code> network</p> <p>The database container is intentionally not included in the <code>bw-universe</code> network. It is used by the <code>bw-autoconf</code> and <code>bw-scheduler</code> containers rather than directly by BunkerWeb. Therefore, the database container is part of the <code>bw-db</code> network, which enhances security by making external access to the database more challenging. This deliberate design choice helps safeguard the database and strengthens the overall security perspective of the system.</p> <p>Using Docker in rootless mode</p> <p>If you are using Docker in rootless mode, you will need to replace the mount of the docker socket with the following value : <code>$XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock:ro</code>.</p>"},{"location":"integrations/#autoconf-services","title":"Autoconf services","text":"<p>Once the stack is set up, you will be able to create the web application container and add the settings as labels using the \"bunkerweb.\" prefix in order to automatically set up BunkerWeb :</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.MY_SETTING_1=value1\"\n      - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"integrations/#namespaces","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's Autoconf stacks now support namespaces. This feature enables you to manage multiple \"clusters\" of BunkerWeb instances and services on the same Docker host. To take advantage of namespaces, simply set the <code>NAMESPACE</code> label on your services. Here's an example:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the service\n      - \"bunkerweb.MY_SETTING_1=value1\"\n      - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to a specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bw-autoconf</code> service :</p> <pre><code>...\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n      - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the BunkerWeb instance so the autoconf service can detect it\n  ...\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    environment:\n      ...\n      NAMESPACES: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> label to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#kubernetes","title":"Kubernetes","text":"Kubernetes integration <p>To automate the configuration of BunkerWeb instances in a Kubernetes environment, the autoconf service serves as an Ingress controller. It configures the BunkerWeb instances based on Ingress resources and also monitors other Kubernetes objects, such as ConfigMap, for custom configurations.</p> <p>For an optimal setup, it is recommended to define BunkerWeb as a DaemonSet, which ensures that a pod is created on all nodes, while the autoconf and scheduler are defined as single replicated Deployment.</p> <p>Given the presence of multiple BunkerWeb instances, it is necessary to establish a shared data store implemented as a Redis service. This Redis service will be utilized by the instances to cache and share data among themselves. Further information about the Redis settings can be found here.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>Clustered database backends setup are out-of-the-scope of this documentation.</p> <p>Please ensure that the autoconf services have access to the Kubernetes API. It is recommended to utilize RBAC authorization for this purpose.</p> <p>Custom CA for Kubernetes API</p> <p>If you use a custom CA for your Kubernetes API, you can mount a bundle file containing your intermediate(s) and root certificates on the ingress controller and set the <code>KUBERNETES_SSL_CA_CERT</code> environment value to the path of the bundle inside the container. Alternatively, even if it's not recommended, you can disable certificate verification by setting the <code>KUBERNETES_SSL_VERIFY</code> environment variable of the ingress controller to <code>no</code> (default is <code>yes</code>).</p> <p>Additionally, it is crucial to set the <code>KUBERNETES_MODE</code> environment variable to <code>yes</code> when utilizing the Kubernetes integration. This variable is mandatory for proper functionality.</p>"},{"location":"integrations/#installation-methods","title":"Installation methods","text":""},{"location":"integrations/#using-helm-chart-recommended","title":"Using helm chart (recommended)","text":"<p>The recommended way to install Kubernetes is to use the Helm chart available at <code>https://repo.bunkerweb.io/charts</code> :</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\n</code></pre> <p>You can then use the bunkerweb helm chart from that repository :</p> <pre><code>helm install -f myvalues.yaml mybunkerweb bunkerweb/bunkerweb\n</code></pre> <p>The full list of values are listed in the charts/bunkerweb/values.yaml file of the bunkerity/bunkerweb-helm repository.</p>"},{"location":"integrations/#full-yaml-files","title":"Full YAML files","text":"<p>Instead of using the helm chart, you can also use the YAML boilerplates inside the misc/integrations folder of the GitHub repository. Please note that we highly recommend to use the helm chart instead.</p>"},{"location":"integrations/#ingress-resources","title":"Ingress resources","text":"<p>Once the BunkerWeb Kubernetes stack is successfully set up and operational (refer to the autoconf logs for detailed information), you can proceed with deploying web applications within the cluster and declaring your Ingress resource.</p> <p>It is important to note that the BunkerWeb settings need to be specified as annotations for the Ingress resource. For the domain part, please use the special value <code>bunkerweb.io</code>. By including the appropriate annotations, you can configure BunkerWeb accordingly for the Ingress resource.</p> <p>TLS support</p> <p>BunkerWeb ingress controller fully supports custom HTTPS certificates using the tls spec as shown in the example. Configuring solutions such as <code>cert-manager</code> to automatically generate tls secrets is out of the scope of this documentation.</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  annotations:\n    # Will be applied to all host in this ingress\n    bunkerweb.io/MY_SETTING: \"value\"\n    # Will only be applied to the www.example.com host\n    bunkerweb.io/www.example.com_MY_SETTING: \"value\"\nspec:\n  # TLS is optional, you can also use builtin Let's Encrypt for example\n  # tls:\n  #   - hosts:\n  #       - www.example.com\n  #     secretName: secret-example-tls\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-my-app\n                port:\n                  number: 8000\n...\n</code></pre>"},{"location":"integrations/#namespaces_1","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's autoconf stacks now support namespaces. This feature enables you to manage multiple clusters of BunkerWeb instances and services on the same Kubernetes cluster. To take advantage of namespaces, simply set the <code>namespace</code> metadata field on your BunkerWeb instances and services. Here's an example:</p> <pre><code>apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: bunkerweb\n  namespace: my-namespace # Set the namespace for the BunkerWeb instance\n...\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to a specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bunkerweb-controller</code> deployment :</p> <pre><code>...\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bunkerweb-controller\n  namespace: my-namespace # Set the namespace for the Controller\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: bunkerweb-controller\n  template:\n    metadata:\n      labels:\n        app: bunkerweb-controller\n    spec:\n      serviceAccountName: sa-bunkerweb\n      containers:\n        - name: bunkerweb-controller\n          image: bunkerity/bunkerweb-autoconf:1.6.1\n          imagePullPolicy: Always\n          env:\n            - name: NAMESPACES\n              value: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n            ...\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> annotation to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#ingress-class","title":"Ingress class","text":"<p>When installed using the official methods in the documentation, BunkerWeb comes with the following <code>IngressClass</code> definition :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: bunkerweb\nspec:\n  controller: bunkerweb.io/ingress-controller\n</code></pre> <p>In order to restrict the <code>Ingress</code> resources monitored by the ingress controller, you can set the <code>KUBERNETES_INGRESS_CLASS</code> environment variable with the value <code>bunkerweb</code>. Then, you can leverage the <code>ingressClassName</code> directive in your <code>Ingress</code> definitions :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  annotations:\n    bunkerweb.io/MY_SETTING: \"value\"\n    bunkerweb.io/www.example.com_MY_SETTING: \"value\"\nspec:\n  ingressClassName: bunkerweb\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-my-app\n                port:\n                  number: 8000\n</code></pre>"},{"location":"integrations/#custom-domain-name","title":"Custom domain name","text":"<p>If you use a custom domain name for your Kubernetes cluster different than the default <code>kubernetes.local</code> one, you can set the value using the <code>KUBERNETES_DOMAIN_NAME</code> environment variable on the scheduler container.</p>"},{"location":"integrations/#use-with-existing-ingress-controller","title":"Use with existing ingress controller","text":"<p>Keeping both existing ingress controller and BunkerWeb</p> <p>This is a use-case where you want to keep an existing ingress controller such as the nginx one. Typical traffic flow will be : Load Balancer =&gt; Ingress Controller =&gt; BunkerWeb =&gt; Application.</p> <p>nginx ingress controller install</p> <p>Install ingress nginx helm repo:</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\n</code></pre> <p>Install nginx ingress controller with default values (might not work on your own cluster out-of-the-box, please check the documentation):</p> <pre><code>helm install --namespace nginx --create-namespace nginx ingress-nginx/ingress-nginx\n</code></pre> <p>Extract IP address of LB:</p> <pre><code>kubectl get svc nginx-ingress-nginx-controller -n nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre> <p>Setup DNS entries to IP of LB (e.g <code>bunkerweb</code> subdomain for BW UI and <code>myapp</code> for application):</p> <pre><code>$ nslookup bunkerweb.example.com\nServer:         172.26.112.1\nAddress:        172.26.112.1#53\n\nNon-authoritative answer:\nName:   bunkerweb.example.com\nAddress: 1.2.3.4\n$ nslookup myapp.example.com\nServer:         172.26.112.1\nAddress:        172.26.112.1#53\n\nNon-authoritative answer:\nName:   myapp.example.com\nAddress: 1.2.3.4\n</code></pre> <p>BunkerWeb install</p> <p>Install BunkerWeb helm repo:</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\nhelm repo update\n</code></pre> <p>Create <code>values.yaml</code> file:</p> <pre><code># Here we will setup the values needed to setup BunkerWeb behind an existing ingress controller\n# Traffic flow with BW : LB =&gt; existing Ingress Controller =&gt; BunkerWeb =&gt; Service\n# Traffic flow without BW : LB =&gt; existing Ingress Controller =&gt; Service\n\n# Global settings\nsettings:\n  misc:\n    # Replace with your DNS resolver\n    # to get it : kubectl exec in a random pod then cat /etc/resolv.conf\n    # if you have an IP as nameserver then do a reverse DNS lookup : nslookup &lt;IP&gt;\n    # most of the time it's coredns.kube-system.svc.cluster.local or kube-dns.kube-system.svc.cluster.local\n    dnsResolvers: \"kube-dns.kube-system.svc.cluster.local\"\n  kubernetes:\n    # We only consider Ingress resources with ingressClass bunkerweb to avoid conflicts with existing ingress controller\n    ingressClass: \"bunkerweb\"\n    # Optional : you can choose namespace(s) where BunkerWeb will listen for Ingress/ConfigMap changes\n    # Default (blank value) is all namespaces\n    namespaces: \"\"\n\n# Override the bunkerweb-external service type to ClusterIP\n# Since we don't need to expose it to the outside world\n# We will use the existing ingress controller to route traffic to BunkerWeb\nservice:\n  type: ClusterIP\n\n# BunkerWeb settings\nbunkerweb:\n  tag: 1.6.1\n\n# Scheduler settings\nscheduler:\n  tag: 1.6.1\n  extraEnvs:\n    # Enable real IP module to get real IP of clients\n    - name: USE_REAL_IP\n      value: \"yes\"\n\n# Controller settings\ncontroller:\n  tag: 1.6.1\n\n# UI settings\nui:\n  tag: 1.6.1\n</code></pre> <p>Install BunkerWeb with custom values:</p> <pre><code>helm install --namespace bunkerweb --create-namespace -f values.yaml bunkerweb bunkerweb/bunkerweb\n</code></pre> <p>Check logs and wait until everything is ready.</p> <p>Web UI install</p> <p>Setup the following ingress (assuming nginx controller is installed):</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ui-bunkerweb\n  # Replace with your namespace of BW if needed\n  namespace: bunkerweb\n  annotations:\n    # HTTPS is mandatory for web UI even if traffic is internal\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\n    # We must set SNI so BW can serve the right vhost\n    # Replace with your domain\n    nginx.ingress.kubernetes.io/proxy-ssl-name: \"bunkerweb.example.com\"\n    nginx.ingress.kubernetes.io/proxy-ssl-server-name: \"on\"\nspec:\n  # Only served by nginx controller and not BW\n  ingressClassName: nginx\n  # Uncomment and edit if you want to use your own certificate\n  # tls:\n  # - hosts:\n  #   - bunkerweb.example.com\n  #   secretName: tls-secret\n  rules:\n  # Replace with your domain\n  - host: bunkerweb.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            # Created by Helm chart\n            name: bunkerweb-external\n            port:\n              # Using HTTPS port is mandatory for UI\n              number: 443\n</code></pre> <p>And you can now proceed to the setup wizard by browsing to <code>https://bunkerweb.example.com/setup</code>.</p> <p>Protecting existing application</p> <p>First of all, you will need to go to Global Config, select the SSL plugin and then disable the Auto redirect HTTP to HTTPS. Please note that you only need to do it one time.</p> <p>Let's assume that you have an application in the <code>myapp</code> namespace which is accessible using the <code>myapp-service</code> service on port <code>5000</code>.</p> <p>You will need to add a new service on the web UI and fill the required information :</p> <ul> <li>Server name : the public facing domain of your application (e.g. <code>myapp.example.com</code>)</li> <li>SSL/TLS : your ingress controller take care of that part so don't enable it on BunkerWeb since traffic is internal within the cluster</li> <li>Reverse proxy host : the full URL of your application within the cluster (e.g. <code>http://myapp-service.myapp.svc.cluster.local:5000</code>)</li> </ul> <p>Once the new service has been added, you can now declare an Ingress resource for that service and route it to the BunkerWeb service on HTTP port :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp\n  # Replace with your namespace of BW if needed\n  namespace: bunkerweb\nspec:\n  # Only served by nginx controller and not BW\n  ingressClassName: nginx\n  # Uncomment and edit if you want to use your own certificate\n  # tls:\n  # - hosts:\n  #   - myapp.example.com\n  #   secretName: tls-secret\n  rules:\n  # Replace with your domain\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            # Created by Helm chart\n            name: bunkerweb-external\n            port:\n              number: 80\n</code></pre> <p>You can visit <code>http(s)://myapp.example.com</code>, which is now protected with BunkerWeb \ud83d\udee1\ufe0f</p>"},{"location":"integrations/#swarm","title":"Swarm","text":"Docker Swarm integration <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>PRO support</p> <p>If you need Swarm support, please contact us at contact@bunkerity.com or via the contact form.</p> <p>Docker autoconf</p> <p>The Swarm integration is similar to the Docker autoconf one (but with services instead of containers). Please read the Docker autoconf integration section first if needed.</p> <p>To enable automatic configuration of BunkerWeb instances, the autoconf service requires access to the Docker API. This service listens for Docker Swarm events, such as service creation or deletion, and seamlessly configures the BunkerWeb instances in real-time without any downtime. It also monitors other Swarm objects, such as configs, for custom configurations.</p> <p>Similar to the Docker autoconf integration, configuration for web services is defined using labels that start with the bunkerweb  prefix.</p> <p>For an optimal setup, it is recommended to schedule the BunkerWeb service as a global service on all nodes, while the autoconf, scheduler, and Docker API proxy services should be scheduled as single replicated services. Please note that the Docker API proxy service needs to be scheduled on a manager node unless you configure it to use a remote API (which is not covered in the documentation).</p> <p>Since multiple instances of BunkerWeb are running, a shared data store implemented as a Redis service must be created. These instances will utilize the Redis service to cache and share data. Further details regarding the Redis settings can be found here.</p> <p>As for the database volume, the documentation does not specify a specific approach. Choosing either a shared folder or a specific driver for the database volume is dependent on your unique use-case and is left as an exercise for the reader.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>Clustered database backends setup are out-of-the-scope of this documentation.</p> <p>Here is the stack boilerplate that you can deploy using <code>docker stack deploy</code> :</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  SWARM_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # QUIC\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\" # Mandatory label for the autoconf service to identify the BunkerWeb instance\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    environment:\n      SWARM_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-redis:\n    image: redis:7-alpine\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre> <p>Swarm mandatory setting</p> <p>Please note that the <code>SWARM_MODE: \"yes\"</code> environment variable is mandatory when using the Swarm integration.</p>"},{"location":"integrations/#swarm-services","title":"Swarm services","text":"<p>Once the BunkerWeb Swarm stack is set up and running (see autoconf and scheduler logs for more information), you will be able to deploy web applications in the cluster and use labels to dynamically configure BunkerWeb :</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.MY_SETTING_1=value1\"\n        - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"integrations/#namespaces_2","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's Autoconf stacks now support namespaces. This feature enables you to manage multiple \"clusters\" of BunkerWeb instances and services on the same Docker host. To take advantage of namespaces, simply set the <code>NAMESPACE</code> label on your services. Here's an example:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the service\n        - \"bunkerweb.MY_SETTING_1=value1\"\n        - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to a specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bw-autoconf</code> service :</p> <pre><code>...\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ...\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n        - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the BunkerWeb instance\n  ...\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    environment:\n      NAMESPACES: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n      ...\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> label to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#microsoft-azure","title":"Microsoft Azure","text":"Azure integration <p>Recommended VM size</p> <p>Please be aware while you choose the SKU of the VM. You must select a SKU compatible with Gen2 VM and we recommend starting at B2s or Ds2 series for optimal use.</p> <p>You can easily deploy BunkerWeb on your Azure subscription in several ways:</p> <ul> <li>Azure CLI in Cloud Shell</li> <li>Azure ARM Template</li> <li>Azure portal via the Marketplace</li> </ul> Cloud ShellARM TemplateMarketplace <p>Create a resource group. Replace value <code>RG_NAME</code></p> <pre><code>az group create --name \"RG_NAME\" --location \"LOCATION\"\n</code></pre> <p>Create a VM with <code>Standard_B2s</code> SKU in the location of the resource group. Replace values <code>RG_NAME</code>, <code>VM_NAME</code>, <code>VNET_NAME</code>, <code>SUBNET_NAME</code></p> <pre><code>az vm create --resource-group \"RG_NAME\" --name \"VM_NAME\" --image bunkerity:bunkerweb:bunkerweb:latest --accept-term --generate-ssh-keys --vnet-name \"VNET_NAME\" --size Standard_B2s --subnet \"SUBNET_NAME\"\n</code></pre> <p>Full command. Replace values <code>RG_NAME</code>, <code>VM_NAME</code>, <code>LOCATION</code>, <code>HOSTNAME</code>, <code>USERNAME</code>, <code>PUBLIC_IP</code>, <code>VNET_NAME</code>, <code>SUBNET_NAME</code>, <code>NSG_NAME</code></p> <pre><code>az vm create --resource-group \"RG_NAME\" --name \"VM_NAME\" --location \"LOCATION\" --image bunkerity:bunkerweb:bunkerweb:latest --accept-term --generate-ssh-keys --computer-name \"HOSTNAME\" --admin-username \"USERNAME\" --public-ip-address \"PUBLIC_IP\" --public-ip-address-allocation Static --size Standard_B2s --public-ip-sku Standard --os-disk-delete-option Delete --nic-delete-option Delete --vnet-name \"VNET_NAME\" --subnet \"SUBNET_NAME\" --nsg \"NSG_NAME\"\n</code></pre> <p>Permissions requirement</p> <p>To deploy a ARM template, you need write access on the resources you're deploying and access to all operations on the Microsoft.Resources/deployments resource type. To deploy a virtual machine, you need Microsoft.Compute/virtualMachines/write and Microsoft.Resources/deployments/* permissions. The what-if operation has the same permission requirements.</p> <p>Deploy the ARM Template:</p> <p></p> <p>Login in Azure portal.</p> <p>Get BunkerWeb from the Create resource menu.</p> <p>You can also go through the Marketplace.</p> <p>You can access the setup wizard by browsing the <code>https://your-ip-address/setup</code> URI of your virtual machine.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>BunkerWeb comes with a plugin system making it possible to easily add new features. Once a plugin is installed, you can manage it using additional settings defined by the plugin.</p>"},{"location":"plugins/#official-plugins","title":"Official plugins","text":"<p>Here is the list of \"official\" plugins that we maintain (see the bunkerweb-plugins repository for more information) :</p> Name Version Description Link ClamAV 1.9 Automatically scans uploaded files with the ClamAV antivirus engine and denies the request when a file is detected as malicious. bunkerweb-plugins/clamav Coraza 1.9 Inspect requests using a the Coraza WAF (alternative of ModSecurity). bunkerweb-plugins/coraza Discord 1.9 Send security notifications to a Discord channel using a Webhook. bunkerweb-plugins/discord Slack 1.9 Send security notifications to a Slack channel using a Webhook. bunkerweb-plugins/slack VirusTotal 1.9 Automatically scans uploaded files with the VirusTotal API and denies the request when a file is detected as malicious. bunkerweb-plugins/virustotal WebHook 1.9 Send security notifications to a custom HTTP endpoint using a  Webhook. bunkerweb-plugins/webhook"},{"location":"plugins/#how-to-use-a-plugin","title":"How to use a plugin","text":""},{"location":"plugins/#automatic","title":"Automatic","text":"<p>If you want to quickly install external plugins, you can use the <code>EXTERNAL_PLUGIN_URLS</code> setting. It takes a list of URLs, separated with space, pointing to compressed (zip format) archive containing one or more plugin(s).</p> <p>You can use the following value if you want to automatically install the official plugins : <code>EXTERNAL_PLUGIN_URLS=https://github.com/bunkerity/bunkerweb-plugins/archive/refs/tags/v1.9.zip</code></p>"},{"location":"plugins/#manual","title":"Manual","text":"<p>The first step is to install the plugin by putting the plugin files inside the corresponding <code>plugins</code> data folder, the procedure depends on your integration :</p> DockerDocker autoconfSwarmKubernetesLinux <p>When using the Docker integration, plugins must be written to the volume mounted on <code>/data/plugins</code> into the scheduler container.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p ./bw-data/plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* ./bw-data/plugins\n</code></pre> <p>Using local folder for persistent data</p> <p>The scheduler runs as an unprivileged user with UID 101 and GID 101 inside the container. The reason behind this is security : in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges. But there is a downside : if you use a local folder for the persistent data, you will need to set the correct permissions so the unprivileged user can write data to it. Something like that should do the trick :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nchown root:101 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Alternatively, if the folder already exists :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>If you are using Docker in rootless mode or podman, UIDs and GIDs in the container will be mapped to different ones in the host. You will first need to check your initial subuid and subgid :</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100) :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nsudo chgrp 100100 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Or if the folder already exists :</p> <pre><code>sudo chgrp -R 100100 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>Then you can mount the volume when starting your Docker stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    volumes:\n      - ./bw-data:/data\n...\n</code></pre> <p>When using the Docker autoconf integration, plugins must be written to the volume mounted on <code>/data/plugins</code> into the scheduler container.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p ./bw-data/plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* ./bw-data/plugins\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R 101:101 ./bw-data\n</code></pre> <p>Then you can mount the volume when starting your Docker stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    volumes:\n      - ./bw-data:/data\n...\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>When using the Swarm integration, plugins must be written to the volume mounted on <code>/data/plugins</code> into the scheduler container.</p> <p>Swarm volume</p> <p>Configuring a Swarm volume that will persist when the scheduler service is running on different nodes is not covered is in this documentation. We will assume that you have a shared folder mounted on <code>/shared</code> across all nodes.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p /shared/bw-plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* /shared/bw-plugins\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R 101:101 /shared/bw-plugins\n</code></pre> <p>Then you can mount the volume when starting your Swarm stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    volumes:\n      - /shared/bw-plugins:/data/plugins\n...\n</code></pre> <p>When using the Kubernetes integration, plugins must be written to the volume mounted on <code>/data/plugins</code> into the scheduler container.</p> <p>The fist thing to do is to declare a PersistentVolumeClaim that will contain our plugins data :</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc-bunkerweb-plugins\nspec:\n  accessModes:\n    - ReadWriteOnce\nresources:\n  requests:\n    storage: 5Gi\n</code></pre> <p>You can now add the volume mount and an init containers to automatically provision the volume :</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bunkerweb-scheduler\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: bunkerweb-scheduler\n  template:\n    metadata:\n      labels:\n        app: bunkerweb-scheduler\n    spec:\n      serviceAccountName: sa-bunkerweb\n      containers:\n        - name: bunkerweb-scheduler\n          image: bunkerity/bunkerweb-scheduler:1.6.1\n          imagePullPolicy: Always\n          env:\n            - name: KUBERNETES_MODE\n              value: \"yes\"\n            - name: \"DATABASE_URI\"\n              value: \"mariadb+pymysql://bunkerweb:changeme@svc-bunkerweb-db:3306/db\"\n          volumeMounts:\n            - mountPath: \"/data/plugins\"\n              name: vol-plugins\n      initContainers:\n        - name: bunkerweb-scheduler-init\n          image: alpine/git\n          command: [\"/bin/sh\", \"-c\"]\n          args: [\"git clone https://github.com/bunkerity/bunkerweb-plugins /data/plugins &amp;&amp; chown -R 101:101 /data/plugins\"]\n          volumeMounts:\n            - mountPath: \"/data/plugins\"\n              name: vol-plugins\n      volumes:\n        - name: vol-plugins\n          persistentVolumeClaim:\n            claimName: pvc-bunkerweb-plugins\n</code></pre> <p>When using the Linux integration, plugins must be written to the <code>/etc/bunkerweb/plugins</code> folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* /etc/bunkerweb/plugins &amp;&amp; \\\nchown -R nginx:nginx /etc/bunkerweb/plugins\n</code></pre>"},{"location":"plugins/#writing-a-plugin","title":"Writing a plugin","text":""},{"location":"plugins/#structure","title":"Structure","text":"<p>Existing plugins</p> <p>If the documentation is not enough, you can have a look at the existing source code of official plugins and the core plugins (already included in BunkerWeb but they are plugins, technically speaking).</p> <p>What a plugin structure looks like: <pre><code>plugin /\n    confs / conf_type / conf_name.conf\n    ui / actions.py\n         hooks.py\n         template.html\n         blueprints / &lt;blueprint_file(s)&gt;\n              templates / &lt;blueprint_template(s)&gt;\n    jobs / my-job.py\n    templates / my-template.json\n          my-template / configs / conf_type / conf_name.conf\n    plugin.lua\n    plugin.json\n</code></pre></p> <ul> <li> <p>conf_name.conf : Add custom NGINX configurations (as Jinja2 templates).</p> </li> <li> <p>actions.py : Script to execute on the Flask server. This script runs in a Flask context, giving you access to libraries and utilities like <code>jinja2</code> and <code>requests</code>.</p> </li> <li> <p>hooks.py : Custom Python file that contains flask's hooks and will be executed when the plugin is loaded.</p> </li> <li> <p>template.html : Custom plugin page accessed via the UI.</p> </li> <li> <p>blueprints folder (within ui):   This folder is used to override existing Flask blueprints or create new ones. Inside, you can include blueprint files and an optional templates subfolder for blueprint-specific templates.</p> </li> <li> <p>jobs py file : Custom Python files executed as jobs by the scheduler.</p> </li> <li> <p>my-template.json : Add custom templates to override the default values of settings and apply custom configurations easily.</p> </li> <li> <p>plugin.lua : Code executed on NGINX using the NGINX LUA module.</p> </li> <li> <p>plugin.json : Metadata, settings, and job definitions for your plugin.</p> </li> </ul>"},{"location":"plugins/#getting-started","title":"Getting started","text":"<p>The first step is to create a folder that will contain the plugin :</p> <pre><code>mkdir myplugin &amp;&amp; \\\ncd myplugin\n</code></pre>"},{"location":"plugins/#metadata","title":"Metadata","text":"<p>A file named plugin.json and written at the root of the plugin folder must contain metadata about the plugin. Here is an example :</p> <pre><code>{\n  \"id\": \"myplugin\",\n  \"name\": \"My Plugin\",\n  \"description\": \"Just an example plugin.\",\n  \"version\": \"1.0\",\n  \"stream\": \"partial\",\n  \"settings\": {\n    \"DUMMY_SETTING\": {\n      \"context\": \"multisite\",\n      \"default\": \"1234\",\n      \"help\": \"Here is the help of the setting.\",\n      \"id\": \"dummy-id\",\n      \"label\": \"Dummy setting\",\n      \"regex\": \"^.*$\",\n      \"type\": \"text\"\n    }\n  },\n  \"jobs\": [\n    {\n      \"name\": \"my-job\",\n      \"file\": \"my-job.py\",\n      \"every\": \"hour\"\n    }\n  ]\n}\n</code></pre> <p>Here are the details of the fields :</p> Field Mandatory Type Description <code>id</code> yes string Internal ID for the plugin : must be unique among other plugins (including \"core\" ones) and contain only lowercase chars. <code>name</code> yes string Name of your plugin. <code>description</code> yes string Description of your plugin. <code>version</code> yes string Version of your plugin. <code>stream</code> yes string Information about stream support : <code>no</code>, <code>yes</code> or <code>partial</code>. <code>settings</code> yes dict List of the settings of your plugin. <code>jobs</code> no list List of the jobs of your plugin. <p>Each setting has the following fields (the key is the ID of the settings used in a configuration) :</p> Field Mandatory Type Description <code>context</code> yes string Context of the setting : <code>multisite</code> or <code>global</code>. <code>default</code> yes string The default value of the setting. <code>help</code> yes string Help text about the plugin (shown in web UI). <code>id</code> yes string Internal ID used by the web UI for HTML elements. <code>label</code> yes string Label shown by the web UI. <code>regex</code> yes string The regex used to validate the value provided by the user. <code>type</code> yes string The type of the field : <code>text</code>, <code>check</code>, <code>select</code> or <code>password</code>. <code>multiple</code> no string Unique ID to group multiple settings with numbers as suffix. <code>select</code> no list List of possible string values when <code>type</code> is <code>select</code>. <p>Each job has the following fields :</p> Field Mandatory Type Description <code>name</code> yes string Name of the job. <code>file</code> yes string Name of the file inside the jobs folder. <code>every</code> yes string Job scheduling frequency : <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code> or <code>once</code> (no frequency, only once before (re)generating the configuration)."},{"location":"plugins/#configurations","title":"Configurations","text":"<p>You can add custom NGINX configurations by adding a folder named confs with content similar to the custom configurations. Each subfolder inside the confs will contain jinja2 templates that will be generated and loaded at the corresponding context (<code>http</code>, <code>server-http</code>, <code>default-server-http</code>, <code>stream</code>, <code>server-stream</code>, <code>modsec</code>, <code>modsec-crs</code>, <code>crs-plugins-before</code> and <code>crs-plugins-after</code>).</p> <p>Here is an example for a configuration template file inside the confs/server-http folder named example.conf :</p> <pre><code>location /setting {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('{{ DUMMY_SETTING }}')\n    }\n}\n</code></pre> <p><code>{{ DUMMY_SETTING }}</code> will be replaced by the value of the <code>DUMMY_SETTING</code> chosen by the user of the plugin.</p>"},{"location":"plugins/#templates","title":"Templates","text":"<p>Check the templates documentation for more information.</p>"},{"location":"plugins/#lua","title":"LUA","text":""},{"location":"plugins/#main-script","title":"Main script","text":"<p>Under the hood, BunkerWeb is using the NGINX LUA module to execute code within NGINX. Plugins that need to execute code must provide a lua file at the root directory of the plugin folder using the <code>id</code> value of plugin.json as its name. Here is an example named myplugin.lua :</p> <pre><code>local class     = require \"middleclass\"\nlocal plugin    = require \"bunkerweb.plugin\"\nlocal utils     = require \"bunkerweb.utils\"\n\n\nlocal myplugin = class(\"myplugin\", plugin)\n\n\nfunction myplugin:initialize(ctx)\n    plugin.initialize(self, \"myplugin\", ctx)\n    self.dummy = \"dummy\"\nend\n\nfunction myplugin:init()\n    self.logger:log(ngx.NOTICE, \"init called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:set()\n    self.logger:log(ngx.NOTICE, \"set called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:access()\n    self.logger:log(ngx.NOTICE, \"access called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log()\n    self.logger:log(ngx.NOTICE, \"log called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log_default()\n    self.logger:log(ngx.NOTICE, \"log_default called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:preread()\n    self.logger:log(ngx.NOTICE, \"preread called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log_stream()\n    self.logger:log(ngx.NOTICE, \"log_stream called\")\n    return self:ret(true, \"success\")\nend\n\nreturn myplugin\n</code></pre> <p>The declared functions are automatically called during specific contexts. Here are the details of each function :</p> Function Context Description Return value <code>init</code> init_by_lua Called when NGINX just started or received a reload order. the typical use case is to prepare any data that will be used by your plugin. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>set</code> set_by_lua Called before each request received by the server.The typical use case is for computing before access phase. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>access</code> access_by_lua Called on each request received by the server. The typical use case is to do the security checks here and deny the request if needed. <code>ret</code>, <code>msg</code>,<code>status</code>,<code>redirect</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li><li><code>status</code> (number) : interrupt current process and return HTTP status</li><li><code>redirect</code> (URL) : if set will redirect to given URL</li></ul> <code>log</code> log_by_lua Called when a request has finished (and before it gets logged to the access logs). The typical use case is to make stats or compute counters for example. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>log_default</code> log_by_lua Same as <code>log</code> but only called on the default server. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>preread</code> preread_by_lua Similar to the <code>access</code> function but for stream mode. <code>ret</code>, <code>msg</code>,<code>status</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li><li><code>status</code> (number) : interrupt current process and return status</li></ul> <code>log_stream</code> log_by_lua Similar to the <code>log</code> function but for stream mode. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul>"},{"location":"plugins/#libraries","title":"Libraries","text":"<p>All directives from NGINX LUA module and are available and NGINX stream LUA module. On top of that, you can use the LUA libraries included within BunkerWeb : see this script for the complete list.</p> <p>If you need additional libraries, you can put them in the root folder of the plugin and access them by prefixing them with your plugin ID. Here is an example file named mylibrary.lua :</p> <pre><code>local _M = {}\n\n_M.dummy = function ()\n    return \"dummy\"\nend\n\nreturn _M\n</code></pre> <p>And here is how you can use it from the myplugin.lua file :</p> <pre><code>local mylibrary = require \"myplugin.mylibrary\"\n\n...\n\nmylibrary.dummy()\n\n...\n</code></pre>"},{"location":"plugins/#helpers","title":"Helpers","text":"<p>Some helpers modules provide common helpful helpers :</p> <ul> <li><code>self.variables</code> : allows to access and store plugins' attributes</li> <li><code>self.logger</code> : print logs</li> <li><code>bunkerweb.utils</code> : various useful functions</li> <li><code>bunkerweb.datastore</code> : access the global shared data on one instance (key/value store)</li> <li><code>bunkerweb.clusterstore</code> : access a Redis data store shared between BunkerWeb instances (key/value store)</li> </ul> <p>To access the functions, you first need to require the modules :</p> <pre><code>local utils       = require \"bunkerweb.utils\"\nlocal datastore   = require \"bunkerweb.datastore\"\nlocal clustestore = require \"bunkerweb.clustertore\"\n</code></pre> <p>Retrieve a setting value :</p> <pre><code>local myvar = self.variables[\"DUMMY_SETTING\"]\nif not myvar then\n    self.logger:log(ngx.ERR, \"can't retrieve setting DUMMY_SETTING\")\nelse\n    self.logger:log(ngx.NOTICE, \"DUMMY_SETTING = \" .. value)\nend\n</code></pre> <p>Store something in the local cache :</p> <pre><code>local ok, err = self.datastore:set(\"plugin_myplugin_something\", \"somevalue\")\nif not ok then\n    self.logger:log(ngx.ERR, \"can't save plugin_myplugin_something into datastore : \" .. err)\nelse\n    self.logger:log(ngx.NOTICE, \"successfully saved plugin_myplugin_something into datastore\")\nend\n</code></pre> <p>Check if an IP address is global :</p> <pre><code>local ret, err = utils.ip_is_global(ngx.ctx.bw.remote_addr)\nif ret == nil then\n    self.logger:log(ngx.ERR, \"error while checking if IP \" .. ngx.ctx.bw.remote_addr .. \" is global or not : \" .. err)\nelseif not ret then\n    self.logger:log(ngx.NOTICE, \"IP \" .. ngx.ctx.bw.remote_addr .. \" is not global\")\nelse\n    self.logger:log(ngx.NOTICE, \"IP \" .. ngx.ctx.bw.remote_addr .. \" is global\")\nend\n</code></pre> <p>More examples</p> <p>If you want to see the full list of available functions, you can have a look at the files present in the lua directory of the repository.</p>"},{"location":"plugins/#jobs","title":"Jobs","text":"<p>BunkerWeb uses an internal job scheduler for periodic tasks like renewing certificates with certbot, downloading blacklists, downloading MMDB files, ... You can add tasks of your choice by putting them inside a subfolder named jobs and listing them in the plugin.json metadata file. Don't forget to add the execution permissions for everyone to avoid any problems when a user is cloning and installing your plugin.</p>"},{"location":"plugins/#plugin-page","title":"Plugin page","text":"<p>Everything related to the web UI is located inside the subfolder ui as we seen in the previous structure section..</p>"},{"location":"plugins/#prerequisites","title":"Prerequisites","text":"<p>When you want to create a plugin page, you need two files :</p> <ul> <li> <p>template.html that will be accessible with a GET /plugins/&lt;plugin_id&gt;.</p> </li> <li> <p>actions.py where you can add some scripting and logic with a POST /plugins/&lt;plugin_id&gt;. Notice that this file need a function with the same name as the plugin to work. This file is needed even if the function is empty.</p> </li> </ul>"},{"location":"plugins/#basic-example","title":"Basic example","text":"<p>Jinja 2 template</p> <p>The template.html file is a Jinja2 template, please refer to the Jinja2 documentation if needed.</p> <p>We can put aside the actions.py file and start only using the template on a GET situation. The template can access app context and libs, so you can use Jinja, request or flask utils.</p> <p>For example, you can get the request arguments in your template like this :</p> <pre><code>&lt;p&gt;request args : {{ request.args.get() }}.&lt;/p&gt;\n</code></pre>"},{"location":"plugins/#actionspy","title":"Actions.py","text":"<p>CSRF Token</p> <p>Please note that every form submission is protected via a CSRF token, you will need to include the following snippet into your forms : <pre><code>&lt;input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\" /&gt;\n</code></pre></p> <p>You can power-up your plugin page with additional scripting with the actions.py file when sending a POST /plugins/&lt;plugin_id&gt;.</p> <p>You have two functions by default in actions.py :</p> <p>pre_render function</p> <p>This allows you to retrieve data when you GET the template, and to use the data with the pre_render variable available in Jinja to display content more dynamically.</p> <pre><code>def pre_render(**kwargs)\n  return &lt;pre_render_data&gt;\n</code></pre> <p>BunkerWeb will send you this type of response :</p> <pre><code>return jsonify({\"status\": \"ok|ko\", \"code\" : XXX, \"data\": &lt;pre_render_data&gt;}), 200\n</code></pre> <p>&lt;plugin_id&gt; function</p> <p>This allows you to retrieve data when you make a POST from the template endpoint, which must be used in AJAX.</p> <pre><code>def myplugin(**kwargs)\n  return &lt;plugin_id_data&gt;\n</code></pre> <p>BunkerWeb will send you this type of response :</p> <pre><code>return jsonify({\"message\": \"ok\", \"data\": &lt;plugin_id_data&gt;}), 200\n</code></pre> <p>What you can access from action.py</p> <p>Here are the arguments that are passed and access on action.py functions:</p> <pre><code>function(app=app, args=request.args.to_dict() or request.json or None)\n</code></pre> <p>Python libraries</p> <p>In addition, you can use Python libraries that are already available like : <code>Flask</code>, <code>Flask-Login</code>, <code>Flask-WTF</code>, <code>beautifulsoup4</code>, <code>docker</code>, <code>Jinja2</code>, <code>python-magic</code> and <code>requests</code>. To see the full list, you can have a look at the Web UI requirements.txt. If you need external libraries, you can install them inside the ui folder of your plugin and then use the classical import directive.</p> <p>Some examples</p> <ul> <li>Retrieve form submitted data</li> </ul> <pre><code>from flask import request\n\ndef myplugin(**kwargs) :\n    my_form_value = request.form[\"my_form_input\"]\n  return my_form_value\n</code></pre> <ul> <li>Access app config</li> </ul> <p>action.py <pre><code>from flask import request\n\ndef pre_render(**kwargs) :\n    config = kwargs['app'].config[\"CONFIG\"].get_config(methods=False)\n  return config\n</code></pre></p> <p>template <pre><code>&lt;!-- metadata + config --&gt;\n&lt;div&gt;{{ pre_render }}&lt;/div&gt;\n</code></pre></p>"},{"location":"plugins/#hookspy","title":"Hooks.py","text":"<p>This documentation outlines the lifecycle hooks used for managing different stages of a request within the application. Each hook is associated with a specific phase.</p> before_requestafter_requestteardown_requestcontext_processor <p>These hooks are executed before processing an incoming request. They are typically used for pre-processing tasks such as authentication, validation, or logging.</p> <p>If the hook returns a response object, Flask will skip the request handling and return the response directly. This can be useful for short-circuiting the request processing pipeline.</p> <p>Example:</p> <pre><code>from flask import request, Response\n\ndef before_request():\n    print(\"Before-request: Validating request...\", flush=True)\n    # Perform authentication, validation, or logging here\n    if not is_valid_request(request): # We are in the app context\n        return Response(\"Invalid request!\", status=400)\n\ndef is_valid_request(request):\n    # Dummy validation logic\n    return \"user\" in request\n</code></pre> <p>These hooks that run after the request has been processed. They are ideal for post-processing tasks such as cleanup, additional logging, or modifying the response before it is sent back.</p> <p>They receive the response object as an argument and can modify it before returning it. The first after_request hook to return a response will be used as the final response.</p> <p>Example:</p> <pre><code>from flask import request\n\ndef after_request(response):\n    print(\"After-request: Logging response...\", flush=True)\n    # Perform logging, cleanup, or response modifications here\n    log_response(response)\n    return response\n\ndef log_response(response):\n    # Dummy logging logic\n    print(\"Response logged:\", response, flush=True)\n</code></pre> <p>These hooks are invoked when the request context is being torn down. These hooks are used for releasing resources or handling errors that occurred during the request lifecycle.</p> <p>Example:</p> <pre><code>def teardown_request(error=None):\n    print(\"Teardown-request: Cleaning up resources...\", flush=True)\n    # Perform cleanup, release resources, or handle errors here\n    if error:\n        handle_error(error)\n    cleanup_resources()\n\ndef handle_error(error):\n    # Dummy error handling logic\n    print(\"Error encountered:\", error, flush=True)\n\ndef cleanup_resources():\n    # Dummy resource cleanup logic\n    print(\"Resources have been cleaned up.\", flush=True)\n</code></pre> <p>These hooks are used to inject additional context into templates or views. They enrich the runtime context by passing common data (like user information or configuration settings) to the templates.</p> <p>If a context processor returns a dictionary, the keys and values will be added to the context for all templates. This allows you to share data across multiple views or templates.</p> <p>Example:</p> <pre><code>def context_processor() -&gt; dict:\n    print(\"Context-processor: Injecting context data...\", flush=True)\n    # Return a dictionary containing context data for templates/views\n    return {\n        \"current_user\": \"John Doe\",\n        \"app_version\": \"1.0.0\",\n        \"feature_flags\": {\"new_ui\": True}\n    }\n</code></pre> <p>This lifecycle hook design provides a modular and systematic approach to managing various aspects of a request's lifecycle:</p> <ul> <li>Modularity: Each hook is responsible for a distinct phase, ensuring that concerns are separated.</li> <li>Maintainability: Developers can easily add, modify, or remove hook implementations without impacting other parts of the request lifecycle.</li> <li>Extensibility: The framework is flexible, allowing for additional hooks or enhancements as application requirements evolve.</li> </ul> <p>By clearly defining the responsibilities of each hook and their associated logging prefixes, the system ensures that each stage of request processing is transparent and manageable.</p>"},{"location":"plugins/#blueprints","title":"Blueprints","text":"<p>In Flask, blueprints serve as a modular way to organize related components\u2014such as views, templates, and static files\u2014within your application. They allow you to group functionality logically and can be used to create new sections of your app or override existing ones.</p>"},{"location":"plugins/#creating-a-blueprint","title":"Creating a Blueprint","text":"<p>To define a blueprint, you create an instance of the <code>Blueprint</code> class, specifying its name and import path. You then define routes and views associated with this blueprint.</p> <p>Example: Defining a New Blueprint</p> <pre><code>from os.path import dirname\nfrom flask import Blueprint, render_template\n\n# Define the blueprint\nmy_blueprint = Blueprint('my_blueprint', __name__, template_folder=dirname(__file__) + '/templates') # The template_folder is set to avoid conflicts with the original blueprint\n\n# Define a route within the blueprint\n@my_blueprint.route('/my_blueprint')\ndef my_blueprint_page():\n    return render_template('my_blueprint.html')\n</code></pre> <p>In this example, a blueprint named <code>my_blueprint</code> is created, and a route <code>/my_blueprint</code> is defined within it.</p>"},{"location":"plugins/#overriding-an-existing-blueprint","title":"Overriding an Existing Blueprint","text":"<p>Blueprints can also override existing ones to modify or extend functionality. To do this, ensure that the new blueprint has the same name as the one you're overriding and register it after the original.</p> <p>Example: Overriding an Existing Blueprint</p> <pre><code>from os.path import dirname\nfrom flask import Flask, Blueprint\n\n# Original blueprint\ninstances = Blueprint('instances', __name__, template_folder=dirname(__file__) + '/templates') # The template_folder is set to avoid conflicts with the original blueprint\n\n@instances.route('/instances')\ndef override_instances():\n    return \"My new instances page\"\n</code></pre> <p>In this scenario, accessing the URL <code>/instances</code> will display \"My new instances page\" because the <code>instances</code> blueprint, registered last, overrides the original <code>instances</code> blueprint.</p> <p>About overriding</p> <p>Be cautious when overriding existing blueprints, as it can impact the behavior of the application. Ensure that the changes align with the application's requirements and do not introduce unexpected side effects.</p> <p>All existing routes will be removed from he original blueprint, so you will need to re-implement them if needed.</p>"},{"location":"plugins/#naming-conventions","title":"Naming Conventions","text":"<p>Important</p> <p>Ensure the blueprint\u2019s name matches the blueprint variable name, else it will not be considered as a valid blueprint and will not be registered.</p> <p>For consistency and clarity, it's advisable to follow these naming conventions:</p> <ul> <li> <p>Blueprint Names: Use short, all-lowercase names. Underscores can be used for readability, e.g., <code>user_auth</code>.</p> </li> <li> <p>File Names: Match the filename to the blueprint name, ensuring it's all lowercase with underscores as needed, e.g., <code>user_auth.py</code>.</p> </li> </ul> <p>This practice aligns with Python's module naming conventions and helps maintain a clear project structure.</p> <p>Example: Blueprint and File Naming</p> <pre><code>plugin /\n    ui / blueprints / user_auth.py\n                      templates / user_auth.html\n</code></pre> <p>In this structure, <code>user_auth.py</code> contains the <code>user_auth</code> blueprint, and <code>user_auth.html</code> is the associated template, adhering to the recommended naming conventions.</p>"},{"location":"professional-services/","title":"Professional services","text":""},{"location":"professional-services/#why-should-i-get-professional-services","title":"Why should I get professional services ?","text":"<p>Since BunkerWeb is a free (as in freedom) software, you've the right to use it freely as long as you respect the AGPLv3 license.</p> <p>You can also upgrade BunkerWeb to the PRO version at any time. By doing so, you will get an enhanced experience to assist you in the security of your web services. Our goal is to help you focus on your business needs. The PRO version is updated regularly and we try our best to gather feedbacks from enterprises to include the needed features.</p> <p>But dedicating time to a specific technology may not be easy depending on your business priorities. Not mentioning that cybersecurity is complex domain where being both judge and jury is not recommended.</p> <p>Getting professional services in addition to the open-source or PRO version is the ideal solution to cover your business needs. You can focus on your top priorities and rely on a trusted partner when it comes to web security.</p> <p>Please note that professional services are directly offered by Bunkerity, the company maintaining the BunkerWeb project, through our BunkerWeb Panel online platform.</p>"},{"location":"professional-services/#which-professional-services-do-you-offer","title":"Which professional services do you offer ?","text":"<p>We offer technical support around the BunkerWeb solution. By using this service, we will assist you on the technical issues (installation, configuration, false positive, ...).</p> <p>According to your needs you have the choice between \"one time\" and subscriptions offers.</p> <p>One important thing to note is that the support service is based on \"credit\" system where you pay for a number of support hours dedicated for you. Time passed on your requests will be deducted to your credit. In other words, you only pay for real time dedicated to your needs.</p> <p>In addition to the support service, we also offer custom services around the BunkerWeb solution to meet your specific needs :</p> <ul> <li>Consulting : a dedicated expert will give you advice on your project</li> <li>Development : if you need specific features in BunkerWeb, we can do it for you</li> </ul>"},{"location":"professional-services/#how-can-i-get-more-information","title":"How can I get more information ?","text":"<p>You will find more information by visiting the BunkerWeb Panel, our dedicated platform for professional services.</p> <p>Don't hesitate to contact us if you have any question, we will be more than happy to respond to your needs.</p>"},{"location":"quickstart-guide/","title":"Quickstart guide","text":"<p>Prerequisites</p> <p>We expect that you're already familiar with the core concepts and you have followed the integrations instructions for your environment.</p> <p>This quickstart guide assumes that BunkerWeb is accessible from the Internet and you have configured at least two domains : one for the web UI and another one for your web service.</p> <p>System requirements</p> <p>The minimum recommended specifications for BunkerWeb are a machine with 2 (v)CPUs and 4 GB of RAM. Please note that this should be sufficient for testing environments or setups with very few services.</p> <p>For production environments with many services to protect, we recommend at least 4 (v)CPUs and 16 GB of RAM. Resources should be adjusted based on your use case, network traffic, and potential DDoS attacks you may face.</p> <p>It is highly recommended to enable global loading of CRS rules (by setting the <code>USE_MODSECURITY_GLOBAL_CRS</code> parameter to <code>yes</code>) if you are in environments with limited RAM or in production with many services. More details can be found in the advanced usages section of the documentation.</p> <p>This quickstart guide will help you to quickly install BunkerWeb and secure a web service using the web User Interface.</p> <p>Protecting existing web applications already accessible with the HTTP(S) protocol is the main goal of BunkerWeb : it will act as a classical reverse proxy with extra security features.</p> <p>See the examples folder of the repository to get real-world examples.</p>"},{"location":"quickstart-guide/#basic-setup","title":"Basic setup","text":"LinuxDockerDocker autoconfKubernetesSwarm <p>Please ensure that you have NGINX 1.26.3 installed before installing BunkerWeb. For all distributions, except Fedora, it is mandatory to use prebuilt packages from the official NGINX repository. Compiling NGINX from source or using packages from different repositories will not work with the official prebuilt packages of BunkerWeb. However, you have the option to build BunkerWeb from source.</p> DebianUbuntuFedoraRedHat <p>The first step is to add NGINX official repository :</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/debian `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.26.3-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you will need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>The first step is to add NGINX official repository :</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release ubuntu-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.26.3-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you will need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>Fedora Update Testing</p> <p>If you can't find the NGINX version listed in the stable repository, you can enable the <code>updates-testing</code> repository :</p> Fedora 41Fedora 40 <pre><code>sudo dnf config-manager setopt updates-testing.enabled=1\n</code></pre> <pre><code>sudo dnf config-manager --set-enabled updates-testing\n</code></pre> <p>Fedora already provides NGINX 1.26.3 that we support :</p> <pre><code>sudo dnf install -y nginx-1.26.3\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf makecache &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre> <p>The first step is to add NGINX official repository. Create the following file at <code>/etc/yum.repos.d/nginx.repo</code> :</p> <pre><code>[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n</code></pre> <p>You should now be able to install NGINX 1.26.3 :</p> <pre><code>sudo dnf install nginx-1.26.3\n</code></pre> <p>And finally install BunkerWeb 1.6.1 :</p> <pre><code>sudo dnf install -y epel-release &amp;&amp; \\\ncurl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf check-update &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre> <p>Here is the full docker compose file that you can use, please note that we will later connect the web service to the <code>bw-services</code> network :</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    # This is the name that will be used to identify the instance in the Scheduler\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      &lt;&lt;: *bw-env # We use the anchor to avoid repeating the same settings for all services\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"\"\n      MULTISITE: \"yes\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>Here is the full docker compose file that you can use, please note that we will later connect the web service to the <code>bw-services</code> network :</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # We set the instance label to allow the autoconf to detect the instance\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    depends_on:\n      - bw-docker\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>The recommended way to install Kubernetes is to use the Helm chart available at <code>https://repo.bunkerweb.io/charts</code> :</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\n</code></pre> <p>You can then use the <code>bunkerweb</code> helm chart from that repository :</p> <pre><code>helm install mybw bunkerweb/bunkerweb --namespace bunkerweb --create-namespace\n</code></pre> <p>Once installed, you can get the IP address of the <code>LoadBalancer</code> to setup your domains :</p> <pre><code>kubectl -n bunkerweb get svc mybw-external -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Here is the full docker compose stack file that you can use, please note that we will later connect the web service to the <code>bw-services</code> network :</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  SWARM_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # For QUIC / HTTP3 support\n    environment:\n      SWARM_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-redis:\n    image: redis:7-alpine\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre>"},{"location":"quickstart-guide/#complete-the-setup-wizard","title":"Complete the setup wizard","text":"<p>Accessing the setup wizard</p> <p>You can access the setup wizard by browsing the <code>https://your-fqdn-or-ip-addresss/setup</code> URI of your server.</p>"},{"location":"quickstart-guide/#create-an-administrator-account","title":"Create an Administrator account","text":"<p>You should see a setup page just like this one :</p> <p> </p> Setup Wizard landing page <p>Once you're on the setup page, you can enter the administrator username, email, and password and click on the \"Next\" button.</p>"},{"location":"quickstart-guide/#configure-the-reverse-proxy-and-https","title":"Configure the Reverse Proxy and HTTPS","text":"<p>The next step will ask you to enter the server name (domain / fqdn) that the web UI will use. You can also choose to enable Let's Encrypt or use a custom certificate.</p> <p> </p> Setup Wizard step 2"},{"location":"quickstart-guide/#overview-of-your-settings","title":"Overview of your settings","text":"<p>The last step will give you an overview of the settings you've entered. You can click on the \"Setup\" button to complete the setup.</p> <p> </p> Setup Wizard final step"},{"location":"quickstart-guide/#accessing-the-web-interface","title":"Accessing the web interface","text":"<p>You can now access the web interface by browsing to the domain you configured in the previous step and the URI if you changed it (default is <code>https://your-domain/</code>).</p> <p> </p> Web interface login page <p>You can now log in with the administrator account you created during the setup wizard.</p> <p> </p> Web interface home"},{"location":"quickstart-guide/#creating-a-new-service","title":"Creating a new service","text":"Web UILinux variables.env fileDockerDocker autoconf labelsKubernetes annotationsSwarm labels <p>You can create a new service by navigating to the <code>Services</code> section of the web interface and clicking on the <code>\u2795 Create new service</code> button.</p> <p>Their are multiple ways of creating a service using the web interface :</p> <ul> <li>The Easy mode will guide you through the process of creating a new service.</li> <li>The Advanced mode will allow you to configure the service with more options.</li> <li>The Raw mode will allow you to enter the configuration directly like editing the <code>variables.env</code> file.</li> </ul> <p>Draft service</p> <p>You can create a draft service to save your progress and come back to it later. Just click on the <code>\ud83c\udf10 Online</code> button to toggle the service to draft mode.</p> Easy modeAdvanced modeRaw mode <p>In this mode, you can choose among the available templates and fill in the required fields.</p> <p> Web interface create service easy </p> <ul> <li>To navigate between the different plugins, you can use the dropdown menu on the top left corner of the page.</li> <li>Once you've selected the template, you can fill in the required fields and follow the instructions to create the service.</li> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>In this mode, you can configure the service with more options while seeing all the available settings from all the different plugins.</p> <p> Web interface create service advanced </p> <ul> <li>To navigate between the different plugins, you can use the dropdown menu on the top left corner of the page.</li> <li>Each setting has a small piece of information that will help you understand what it does.</li> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>In this mode, you can enter the configuration directly like editing the <code>variables.env</code> file.</p> <p> Web interface create service RAW </p> <ul> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>\ud83d\ude80 Once you've saved the configuration, you should see your new service in the list of services.</p> <p> Web interface services page </p> <p>If you wish to edit the service, you can click on the service name or the <code>\ud83d\udcdd Edit</code> button.</p> <p>We will assume that you followed the Basic setup and you have the Linux integration running on your machine.</p> <p>You can create a new service by editing the <code>variables.env</code> file located in the <code>/etc/bunkerweb/</code> directory.</p> <pre><code>nano /etc/bunkerweb/variables.env\n</code></pre> <p>You can then add the following configuration :</p> <pre><code>SERVER_NAME=www.example.com\nMULTISITE=yes\nwww.example.com_USE_REVERSE_PROXY=yes\nwww.example.com_REVERSE_PROXY_URL=/\nwww.example.com_REVERSE_PROXY_HOST=http://myapp:8080\n</code></pre> <p>You can then reload the <code>bunkerweb-scheduler</code> service to apply the changes.</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>We will assume that you followed the Basic setup and you have the Docker integration running on your machine.</p> <p>You must then have a network called <code>bw-services</code> so you can connect your existing application and configure BunkerWeb:</p> <pre><code>services:\n  myapp:\n      image: nginxdemos/nginx-hello\n      networks:\n        - bw-services\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>After that, you can create manually add the service in the docker compose file that you created in the previous step.</p> <pre><code>...\n\nservices:\n  ...\n  bw-scheduler:\n    ...\n    environment:\n      ...\n      SERVER_NAME: \"www.example.com\" # When using the Docker integration, you can set the configuration directly in the scheduler, make sure to set the correct domain name\n      MULTISITE: \"yes\" # Enable multisite mode so you can add multiple services\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/\"\n      www.example.com_REVERSE_PROXY_HOST: \"http://myapp:8080\"\n      ...\n</code></pre> <p>You can then restart the <code>bw-scheduler</code> service to apply the changes.</p> <pre><code>docker compose down bw-scheduler &amp;&amp; docker compose up -d bw-scheduler\n</code></pre> <p>We will assume that you followed the Basic setup and you have the Docker autoconf integration running on your machine.</p> <p>You must then have a network called <code>bw-services</code> so you can connect your existing application and configure BunkerWeb with labels :</p> <pre><code>services:\n  myapp:\n      image: nginxdemos/nginx-hello\n      networks:\n        - bw-services\n      labels:\n        - \"bunkerweb.SERVER_NAME=www.example.com\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_URL=/\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=http://myapp:8080\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Doing so will automatically create a new service with the provided labels as configuration.</p> <p>We will assume that you followed the Basic setup and you have the Kubernetes stack running on your cluster.</p> <p>Let's assume that you have a typical Deployment with a Service to access the web application from within the cluster :</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app\n  template:\n    metadata:\n      labels:\n        app: app\n    spec:\n      containers:\n      - name: app\n        image: nginxdemos/nginx-hello\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app\nspec:\n  selector:\n    app: app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n</code></pre> <p>Here is the corresponding Ingress definition to serve and protect the web application :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  annotations:\n    bunkerweb.io/DUMMY_SETTING: \"value\"\nspec:\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n              name: svc-app\n              port:\n                number: 80\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>We will assume that you followed the Basic setup and you have the Swarm stack running on your cluster and connected to a network called <code>bw-services</code> so you can connect your existing application and configure BunkerWeb with labels :</p> <pre><code>services:\n  myapp:\n    image: nginxdemos/nginx-hello\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://myapp:8080\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"quickstart-guide/#going-further","title":"Going further","text":"<p>Congratulations! You've just installed BunkerWeb and secured your first web service. Please note that BunkerWeb is capable of much more, whether it comes to security or integrations with other systems and solutions. Here's a list of resources and actions that may help you continue to deepen your knowledge of the solution:</p> <ul> <li>Join the Bunker community: Discord, LinkedIn, GitHub, X</li> <li>Check out the official blog</li> <li>Explore advanced use cases in the documentation</li> <li>Get in touch with us to discuss your organization's needs</li> </ul>"},{"location":"settings/","title":"Settings","text":"<p>Settings generator tool</p> <p>To help you tune BunkerWeb, we have made an easy-to-use settings generator tool available at config.bunkerweb.io.</p> <p>This section contains the full list of settings supported by BunkerWeb. If you are not yet familiar with BunkerWeb, you should first read the concepts section of the documentation. Please follow the instructions for your own integration on how to apply the settings.</p> <p>As a general rule when multisite mode is enabled, if you want to apply settings with multisite context to a specific server, you will need to add the primary (first) server name as a prefix like <code>www.example.com_USE_ANTIBOT=captcha</code> or <code>myapp.example.com_USE_GZIP=yes</code> for example.</p> <p>When settings are considered as \"multiple\", it means that you can have multiple groups of settings for the same feature by adding numbers as suffix like <code>REVERSE_PROXY_URL_1=/subdir</code>, <code>REVERSE_PROXY_HOST_1=http://myhost1</code>, <code>REVERSE_PROXY_URL_2=/anotherdir</code>, <code>REVERSE_PROXY_HOST_2=http://myhost2</code>, ... for example.</p>"},{"location":"settings/#global-settings","title":"Global settings","text":"<p>STREAM support </p> Setting Default Context Multiple Description <code>IS_LOADING</code> <code>no</code> global no Internal use : set to yes when BW is loading. <code>NGINX_PREFIX</code> <code>/etc/nginx/</code> global no Where nginx will search for configurations. <code>HTTP_PORT</code> <code>8080</code> global yes HTTP port number which bunkerweb binds to. <code>HTTPS_PORT</code> <code>8443</code> global yes HTTPS port number which bunkerweb binds to. <code>MULTISITE</code> <code>no</code> global no Multi site activation. <code>SERVER_NAME</code> <code>www.example.com</code> multisite no List of the virtual hosts served by bunkerweb. <code>WORKER_PROCESSES</code> <code>auto</code> global no Number of worker processes. <code>WORKER_RLIMIT_NOFILE</code> <code>2048</code> global no Maximum number of open files for worker processes. <code>WORKER_CONNECTIONS</code> <code>1024</code> global no Maximum number of connections per worker. <code>LOG_FORMAT</code> <code>$host $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"</code> global no The format to use for access logs. <code>LOG_LEVEL</code> <code>notice</code> global no The level to use for error logs. <code>DNS_RESOLVERS</code> <code>127.0.0.11</code> global no DNS addresses of resolvers to use. <code>WORKERLOCK_MEMORY_SIZE</code> <code>48k</code> global no Size of lua_shared_dict for initialization workers <code>DATASTORE_MEMORY_SIZE</code> <code>64m</code> global no Size of the internal datastore. <code>CACHESTORE_MEMORY_SIZE</code> <code>64m</code> global no Size of the internal cachestore. <code>CACHESTORE_IPC_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (ipc). <code>CACHESTORE_MISS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (miss). <code>CACHESTORE_LOCKS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (locks). <code>USE_API</code> <code>yes</code> global no Activate the API to control BunkerWeb. <code>API_HTTP_PORT</code> <code>5000</code> global no Listen port number for the API. <code>API_LISTEN_IP</code> <code>0.0.0.0</code> global no Listen IP address for the API. <code>API_SERVER_NAME</code> <code>bwapi</code> global no Server name (virtual host) for the API. <code>API_WHITELIST_IP</code> <code>127.0.0.0/8</code> global no List of IP/network allowed to contact the API. <code>AUTOCONF_MODE</code> <code>no</code> global no Enable Autoconf Docker integration. <code>SWARM_MODE</code> <code>no</code> global no Enable Docker Swarm integration. <code>KUBERNETES_MODE</code> <code>no</code> global no Enable Kubernetes integration. <code>SERVER_TYPE</code> <code>http</code> multisite no Server type : http or stream. <code>LISTEN_STREAM</code> <code>yes</code> multisite no Enable listening for non-ssl (passthrough). <code>LISTEN_STREAM_PORT</code> <code>1337</code> multisite yes Listening port for non-ssl (passthrough). <code>LISTEN_STREAM_PORT_SSL</code> <code>4242</code> multisite yes Listening port for ssl (passthrough). <code>USE_TCP</code> <code>yes</code> multisite no TCP listen (stream). <code>USE_UDP</code> <code>no</code> multisite no UDP listen (stream). <code>USE_IPV6</code> <code>no</code> global no Enable IPv6 connectivity. <code>IS_DRAFT</code> <code>no</code> multisite no Internal use : set to yes when the service is in draft mode. <code>TIMERS_LOG_LEVEL</code> <code>debug</code> global no Log level for timers. <code>BUNKERWEB_INSTANCES</code> <code>127.0.0.1</code> global no List of BunkerWeb instances separated with spaces (format : fqdn-or-ip:5000 http://fqdn-or-ip:5000) <code>USE_TEMPLATE</code> multisite no Config template to use that will override the default values of specific settings. <code>SECURITY_MODE</code> <code>block</code> multisite no Defines the response to threats: \"detect\" to monitor and log, or \"block\" to prevent access and log incidents. <code>PROXY_BUFFER_SIZE</code> <code>auto</code> multisite no Size of the buffer used for reading the first part of the response received from the proxied server. (auto or size) <code>PROXY_BUFFERS</code> <code>auto</code> multisite no Number and size of the buffers used for reading a response from the proxied server. (auto or number size)"},{"location":"settings/#anti-ddos-pro","title":"Anti DDoS  (PRO)","text":"<p>STREAM support </p> <p>Provides enhanced protection against DDoS attacks by analyzing and filtering suspicious traffic.</p> Setting Default Context Multiple Description <code>USE_ANTIDDOS</code> <code>no</code> global no Enable or disable anti DDoS protection to mitigate high traffic spikes. <code>ANTIDDOS_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of in-memory storage for DDoS metrics (e.g., 10M, 500k). <code>ANTIDDOS_THRESHOLD</code> <code>100</code> global no Maximum suspicious requests allowed from a single IP before blocking. <code>ANTIDDOS_WINDOW_TIME</code> <code>10</code> global no Time window (seconds) to detect abnormal request patterns. <code>ANTIDDOS_STATUS_CODES</code> <code>429 403 444</code> global no HTTP status codes treated as suspicious for DDoS analysis. <code>ANTIDDOS_DISTINCT_IP</code> <code>5</code> global no Minimum distinct IP count before enabling anti DDoS measures."},{"location":"settings/#antibot","title":"Antibot","text":"<p>STREAM support </p> <p>Bot detection by using a challenge.</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Activate antibot feature. <code>ANTIBOT_URI</code> <code>/challenge</code> multisite no Unused URI that clients will be redirected to to solve the challenge. <code>ANTIBOT_TIME_RESOLVE</code> <code>60</code> multisite no Maximum time (in seconds) clients have to resolve the challenge. Once this time has passed, a new challenge will be generated. <code>ANTIBOT_TIME_VALID</code> <code>86400</code> multisite no Maximum validity time of solved challenges. Once this time has passed, clients will need to resolve a new one. <code>ANTIBOT_RECAPTCHA_SCORE</code> <code>0.7</code> multisite no Minimum score required for reCAPTCHA challenge (Only compatible with reCAPTCHA v3). <code>ANTIBOT_RECAPTCHA_SITEKEY</code> multisite no Sitekey for reCAPTCHA challenge. <code>ANTIBOT_RECAPTCHA_SECRET</code> multisite no Secret for reCAPTCHA challenge. <code>ANTIBOT_HCAPTCHA_SITEKEY</code> multisite no Sitekey for hCaptcha challenge. <code>ANTIBOT_HCAPTCHA_SECRET</code> multisite no Secret for hCaptcha challenge. <code>ANTIBOT_TURNSTILE_SITEKEY</code> multisite no Sitekey for Turnstile challenge. <code>ANTIBOT_TURNSTILE_SECRET</code> multisite no Secret for Turnstile challenge. <code>ANTIBOT_MCAPTCHA_SITEKEY</code> multisite no Sitekey for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_SECRET</code> multisite no Secret for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_URL</code> <code>https://demo.mcaptcha.org</code> multisite no Domain to use for mCaptcha challenge."},{"location":"settings/#auth-basic","title":"Auth basic","text":"<p>STREAM support </p> <p>Enforce login before accessing a resource or the whole site using HTTP basic auth method.</p> Setting Default Context Multiple Description <code>USE_AUTH_BASIC</code> <code>no</code> multisite no Use HTTP basic auth <code>AUTH_BASIC_LOCATION</code> <code>sitewide</code> multisite no URL of the protected resource or sitewide value. <code>AUTH_BASIC_USER</code> <code>changeme</code> multisite yes Username <code>AUTH_BASIC_PASSWORD</code> <code>changeme</code> multisite yes Password <code>AUTH_BASIC_TEXT</code> <code>Restricted area</code> multisite no Text to display"},{"location":"settings/#backup","title":"Backup","text":"<p>STREAM support </p> <p>Backup your data to a custom location. Ensure the safety and availability of your important files by creating regular backups.</p> Setting Default Context Multiple Description <code>USE_BACKUP</code> <code>yes</code> global no Enable or disable the backup feature <code>BACKUP_SCHEDULE</code> <code>daily</code> global no The frequency of the backup (daily, weekly or monthly) <code>BACKUP_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_DIRECTORY</code> <code>/var/lib/bunkerweb/backups</code> global no The directory where the backup will be stored"},{"location":"settings/#backup-s3-pro","title":"Backup S3  (PRO)","text":"<p>STREAM support </p> <p>Automatically backup your data to an S3 bucket</p> Setting Default Context Multiple Description <code>USE_BACKUP_S3</code> <code>no</code> global no Enable or disable the S3 backup feature <code>BACKUP_S3_SCHEDULE</code> <code>daily</code> global no The frequency of the backup <code>BACKUP_S3_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_S3_ENDPOINT</code> global no The S3 endpoint <code>BACKUP_S3_BUCKET</code> global no The S3 bucket <code>BACKUP_S3_DIR</code> global no The S3 directory <code>BACKUP_S3_REGION</code> global no The S3 region <code>BACKUP_S3_ACCESS_KEY_ID</code> global no The S3 access key ID <code>BACKUP_S3_ACCESS_KEY_SECRET</code> global no The S3 access key secret <code>BACKUP_S3_COMP_LEVEL</code> <code>6</code> global no The compression level of the backup zip file"},{"location":"settings/#bad-behavior","title":"Bad behavior","text":"<p>STREAM support </p> <p>Ban IP generating too much 'bad' HTTP status code in a period of time.</p> Setting Default Context Multiple Description <code>USE_BAD_BEHAVIOR</code> <code>yes</code> multisite no Activate Bad behavior feature. <code>BAD_BEHAVIOR_STATUS_CODES</code> <code>400 401 403 404 405 429 444</code> multisite no List of HTTP status codes considered as 'bad'. <code>BAD_BEHAVIOR_THRESHOLD</code> <code>10</code> multisite no Maximum number of 'bad' HTTP status codes within the period of time before IP is banned. <code>BAD_BEHAVIOR_COUNT_TIME</code> <code>60</code> multisite no Period of time (in seconds) during which we count 'bad' HTTP status codes. <code>BAD_BEHAVIOR_BAN_TIME</code> <code>86400</code> multisite no The duration time (in seconds) of a ban when the corresponding IP has reached the threshold. <code>BAD_BEHAVIOR_BAN_SCOPE</code> <code>service</code> multisite no Determines the level of the ban. 'service' will ban the IP for the service only, 'global' will ban the IP for the whole system."},{"location":"settings/#blacklist","title":"Blacklist","text":"<p>STREAM support </p> <p>Deny access based on internal and external IP/network/rDNS/ASN blacklists.</p> Setting Default Context Multiple Description <code>USE_BLACKLIST</code> <code>yes</code> multisite no Activate blacklist feature. <code>BLACKLIST_IP</code> multisite no List of IP/network, separated with spaces, to block. <code>BLACKLIST_RDNS</code> <code>.shodan.io .censys.io</code> multisite no List of reverse DNS suffixes, separated with spaces, to block. <code>BLACKLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS blacklist checks on global IP addresses. <code>BLACKLIST_ASN</code> multisite no List of ASN numbers, separated with spaces, to block. <code>BLACKLIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to block. <code>BLACKLIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to block. <code>BLACKLIST_IGNORE_IP</code> multisite no List of IP/network, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_RDNS</code> multisite no List of reverse DNS suffixes, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_ASN</code> multisite no List of ASN numbers, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IP_URLS</code> <code>https://www.dan.me.uk/torlist/?exit</code> multisite no List of URLs, separated with spaces, containing bad IP/network to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_USER_AGENT_URLS</code> <code>https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list</code> multisite no List of URLs, separated with spaces, containing bad User-Agent to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_IP_URLS</code> multisite no List of URLs, separated with spaces, containing IP/network to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing User-Agent to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_URI_URLS</code> multisite no List of URLs, separated with spaces, containing URI to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#brotli","title":"Brotli","text":"<p>STREAM support </p> <p>Compress HTTP requests with the brotli algorithm.</p> Setting Default Context Multiple Description <code>USE_BROTLI</code> <code>no</code> multisite no Enable or disable Brotli compression. <code>BROTLI_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with brotli. <code>BROTLI_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Brotli compression to apply. <code>BROTLI_COMP_LEVEL</code> <code>6</code> multisite no Compression level for Brotli (0 = no compression, 11 = maximum compression)."},{"location":"settings/#bunkernet","title":"BunkerNet","text":"<p>STREAM support </p> <p>Share threat data with other BunkerWeb instances via BunkerNet.</p> Setting Default Context Multiple Description <code>USE_BUNKERNET</code> <code>yes</code> multisite no Activate BunkerNet feature. <code>BUNKERNET_SERVER</code> <code>https://api.bunkerweb.io</code> global no Address of the BunkerNet API."},{"location":"settings/#cors","title":"CORS","text":"<p>STREAM support </p> <p>Cross-Origin Resource Sharing.</p> Setting Default Context Multiple Description <code>USE_CORS</code> <code>no</code> multisite no Use CORS <code>CORS_ALLOW_ORIGIN</code> <code>self</code> multisite no Allowed origins to make CORS requests : PCRE regex or * or self (for the same origin). <code>CORS_ALLOW_METHODS</code> <code>GET, POST, OPTIONS</code> multisite no Value of the Access-Control-Allow-Methods header. <code>CORS_ALLOW_HEADERS</code> <code>DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range</code> multisite no Value of the Access-Control-Allow-Headers header. <code>CORS_ALLOW_CREDENTIALS</code> <code>no</code> multisite no Send the Access-Control-Allow-Credentials header. <code>CORS_EXPOSE_HEADERS</code> <code>Content-Length,Content-Range</code> multisite no Value of the Access-Control-Expose-Headers header. <code>CROSS_ORIGIN_OPENER_POLICY</code> <code>same-origin</code> multisite no Value for the Cross-Origin-Opener-Policy header. <code>CROSS_ORIGIN_EMBEDDER_POLICY</code> <code>require-corp</code> multisite no Value for the Cross-Origin-Embedder-Policy header. <code>CROSS_ORIGIN_RESOURCE_POLICY</code> <code>same-site</code> multisite no Value for the Cross-Origin-Resource-Policy header. <code>CORS_MAX_AGE</code> <code>86400</code> multisite no Value of the Access-Control-Max-Age header. <code>CORS_DENY_REQUEST</code> <code>yes</code> multisite no Deny request and don't send it to backend if Origin is not allowed."},{"location":"settings/#client-cache","title":"Client cache","text":"<p>STREAM support </p> <p>Manage caching for clients.</p> Setting Default Context Multiple Description <code>USE_CLIENT_CACHE</code> <code>no</code> multisite no Tell client to store locally static files. <code>CLIENT_CACHE_EXTENSIONS</code> <code>jpg                       | jpeg      | png      | bmp                                             | ico | svg | tif | css | js | otf | ttf | eot | woff | woff2</code> global no List of file extensions, separated with pipes that should be cached. <code>CLIENT_CACHE_ETAG</code> <code>yes</code> multisite no Send the HTTP ETag header for static resources. <code>CLIENT_CACHE_CONTROL</code> <code>public, max-age=15552000</code> multisite no Value of the Cache-Control HTTP header."},{"location":"settings/#country","title":"Country","text":"<p>STREAM support </p> <p>Deny access based on the country of the client IP.</p> Setting Default Context Multiple Description <code>BLACKLIST_COUNTRY</code> multisite no Deny access if the country of the client is in the list (ISO 3166-1 alpha-2 format separated with spaces). <code>WHITELIST_COUNTRY</code> multisite no Deny access if the country of the client is not in the list (ISO 3166-1 alpha-2 format separated with spaces)."},{"location":"settings/#crowdsec","title":"CrowdSec","text":"<p>STREAM support </p> <p>CrowdSec bouncer for BunkerWeb.</p> Setting Default Context Multiple Description <code>USE_CROWDSEC</code> <code>no</code> multisite no Activate CrowdSec bouncer. <code>CROWDSEC_API</code> <code>http://crowdsec:8080</code> global no Address of the CrowdSec API. <code>CROWDSEC_API_KEY</code> global no Key for the CrowdSec API given by cscli bouncer add. <code>CROWDSEC_MODE</code> <code>live</code> global no Mode of the CrowdSec API (live or stream). <code>CROWDSEC_ENABLE_INTERNAL</code> <code>no</code> global no Enable the analysis of the internal traffic. <code>CROWDSEC_REQUEST_TIMEOUT</code> <code>1000</code> global no Timeout in milliseconds for the HTTP requests done by the bouncer to query CrowdSec local API. <code>CROWDSEC_EXCLUDE_LOCATION</code> global no The locations to exclude while bouncing. It is a list of location, separated by commas. <code>CROWDSEC_CACHE_EXPIRATION</code> <code>1</code> global no The cache expiration, in second, for IPs that the bouncer store in cache in live mode. <code>CROWDSEC_UPDATE_FREQUENCY</code> <code>10</code> global no The frequency of update, in second, to pull new/old IPs from the CrowdSec local API. <code>CROWDSEC_APPSEC_URL</code> global no URL of the Application Security Component. <code>CROWDSEC_APPSEC_FAILURE_ACTION</code> <code>passthrough</code> global no Behavior when the AppSec Component return a 500. Can let the request passthrough or deny it. <code>CROWDSEC_APPSEC_CONNECT_TIMEOUT</code> <code>100</code> global no The timeout in milliseconds of the connection between the remediation component and AppSec Component. <code>CROWDSEC_APPSEC_SEND_TIMEOUT</code> <code>100</code> global no The timeout in milliseconds to send data from the remediation component to the AppSec Component. <code>CROWDSEC_APPSEC_PROCESS_TIMEOUT</code> <code>500</code> global no The timeout in milliseconds to process the request from the remediation component to the AppSec Component. <code>CROWDSEC_ALWAYS_SEND_TO_APPSEC</code> <code>no</code> global no Send the request to the AppSec Component even if there is a decision for the IP. <code>CROWDSEC_APPSEC_SSL_VERIFY</code> <code>no</code> global no Verify the AppSec Component SSL certificate validity."},{"location":"settings/#custom-ssl-certificate","title":"Custom SSL certificate","text":"<p>STREAM support </p> <p>Choose custom certificate for SSL.</p> Setting Default Context Multiple Description <code>USE_CUSTOM_SSL</code> <code>no</code> multisite no Use custom SSL certificate. <code>CUSTOM_SSL_CERT_PRIORITY</code> <code>file</code> multisite no Choose whether to prioritize the certificate from file path or from base64 data. (file <code>CUSTOM_SSL_CERT</code> multisite no Full path of the certificate or bundle file (must be readable by the scheduler). <code>CUSTOM_SSL_KEY</code> multisite no Full path of the key file (must be readable by the scheduler). <code>CUSTOM_SSL_CERT_DATA</code> multisite no Certificate data encoded in base64. <code>CUSTOM_SSL_KEY_DATA</code> multisite no Key data encoded in base64."},{"location":"settings/#db","title":"DB","text":"<p>STREAM support </p> <p>Integrate easily the Database.</p> Setting Default Context Multiple Description <code>DATABASE_URI</code> <code>sqlite:////var/lib/bunkerweb/db.sqlite3</code> global no The database URI, following the sqlalchemy format. <code>DATABASE_URI_READONLY</code> global no The database URI for read-only operations, it can also serve as a fallback if the main database is down. Following the sqlalchemy format. <code>DATABASE_LOG_LEVEL</code> <code>warning</code> global no The level to use for database logs. <code>DATABASE_MAX_JOBS_RUNS</code> <code>10000</code> global no The maximum number of jobs runs to keep in the database."},{"location":"settings/#dnsbl","title":"DNSBL","text":"<p>STREAM support </p> <p>Deny access based on external DNSBL servers.</p> Setting Default Context Multiple Description <code>USE_DNSBL</code> <code>yes</code> multisite no Activate DNSBL feature. <code>DNSBL_LIST</code> <code>bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org</code> global no List of DNSBL servers."},{"location":"settings/#errors","title":"Errors","text":"<p>STREAM support </p> <p>Manage default error pages</p> Setting Default Context Multiple Description <code>ERRORS</code> multisite no List of HTTP error code and corresponding error pages, separated with spaces (404=/my404.html 403=/errors/403.html ...). <code>INTERCEPTED_ERROR_CODES</code> <code>400 401 403 404 405 413 429 500 501 502 503 504</code> multisite no List of HTTP error code intercepted by BunkerWeb"},{"location":"settings/#greylist","title":"Greylist","text":"<p>STREAM support </p> <p>Allow access while keeping security features based on internal and external IP/network/rDNS/ASN greylists.</p> Setting Default Context Multiple Description <code>USE_GREYLIST</code> <code>no</code> multisite no Activate greylist feature. <code>GREYLIST_IP</code> multisite no List of IP/network, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS</code> multisite no List of reverse DNS suffixes, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS greylist checks on global IP addresses. <code>GREYLIST_ASN</code> multisite no List of ASN numbers, separated with spaces, to put into the greylist. <code>GREYLIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_IP_URLS</code> multisite no List of URLs, separated with spaces, containing good IP/network to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing good User-Agent to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#gzip","title":"Gzip","text":"<p>STREAM support </p> <p>Compress HTTP requests with the gzip algorithm.</p> Setting Default Context Multiple Description <code>USE_GZIP</code> <code>no</code> multisite no Enable or disable Gzip compression. <code>GZIP_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with gzip. <code>GZIP_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Gzip compression to apply. <code>GZIP_COMP_LEVEL</code> <code>5</code> multisite no Compression level for Gzip (1 = least compression, 9 = maximum compression). <code>GZIP_PROXIED</code> <code>no-cache no-store private expired auth</code> multisite no Specifies which proxied requests should be compressed."},{"location":"settings/#html-injection","title":"HTML injection","text":"<p>STREAM support </p> <p>Inject custom HTML code before either the  or  tag.</p> Setting Default Context Multiple Description <code>INJECT_BODY</code> multisite no The HTML code to inject before the  tag. <code>INJECT_HEAD</code> multisite no The HTML code to inject before the  tag."},{"location":"settings/#headers","title":"Headers","text":"<p>STREAM support </p> <p>Manage HTTP headers sent to clients.</p> Setting Default Context Multiple Description <code>CUSTOM_HEADER</code> multisite yes Custom header to add (HeaderName: HeaderValue). <code>REMOVE_HEADERS</code> <code>Server Expect-CT X-Powered-By X-AspNet-Version X-AspNetMvc-Version Public-Key-Pins</code> multisite no Headers to remove (Header1 Header2 Header3 ...) <code>KEEP_UPSTREAM_HEADERS</code> <code>Content-Security-Policy Permissions-Policy X-Frame-Options</code> multisite no Headers to keep from upstream (Header1 Header2 Header3 ... or * for all). <code>STRICT_TRANSPORT_SECURITY</code> <code>max-age=63072000; includeSubDomains; preload</code> multisite no Value for the Strict-Transport-Security (HSTS) header. <code>COOKIE_FLAGS</code> <code>* HttpOnly SameSite=Lax</code> multisite yes Cookie flags automatically added to all cookies (value accepted for nginx_cookie_flag_module). <code>COOKIE_AUTO_SECURE_FLAG</code> <code>yes</code> multisite no Automatically add the Secure flag to all cookies. <code>CONTENT_SECURITY_POLICY</code> <code>object-src 'none'; form-action 'self'; frame-ancestors 'self';</code> multisite no Value for the Content-Security-Policy header. <code>CONTENT_SECURITY_POLICY_REPORT_ONLY</code> <code>no</code> multisite no Send reports for violations of the Content-Security-Policy header instead of blocking them. <code>REFERRER_POLICY</code> <code>strict-origin-when-cross-origin</code> multisite no Value for the Referrer-Policy header. <code>PERMISSIONS_POLICY</code> <code>accelerometer=(), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(), compute-pressure=(), display-capture=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), identity-credentials-get=(), idle-detection=(), local-fonts=(), magnetometer=(), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=(), interest-cohort=()</code> multisite no Value for the Permissions-Policy header. <code>X_FRAME_OPTIONS</code> <code>SAMEORIGIN</code> multisite no Value for the X-Frame-Options header. <code>X_CONTENT_TYPE_OPTIONS</code> <code>nosniff</code> multisite no Value for the X-Content-Type-Options header. <code>X_DNS_PREFETCH_CONTROL</code> <code>off</code> multisite no Value for the X-DNS-Prefetch-Control header."},{"location":"settings/#lets-encrypt","title":"Let's Encrypt","text":"<p>STREAM support </p> <p>Automatic creation, renewal and configuration of Let's Encrypt certificates.</p> Setting Default Context Multiple Description <code>AUTO_LETS_ENCRYPT</code> <code>no</code> multisite no Activate automatic Let's Encrypt mode. <code>EMAIL_LETS_ENCRYPT</code> multisite no Email used for Let's Encrypt notification and in certificate. <code>LETS_ENCRYPT_CHALLENGE</code> <code>http</code> multisite no The challenge type to use for Let's Encrypt (http or dns). <code>LETS_ENCRYPT_DNS_PROVIDER</code> multisite no The DNS provider to use for DNS challenges. <code>LETS_ENCRYPT_DNS_PROPAGATION</code> <code>default</code> multisite no The time to wait for DNS propagation in seconds for DNS challenges. <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> multisite yes Configuration item that will be added to the credentials.ini file for the DNS provider (e.g. 'cloudflare_api_token 123456') for DNS challenges. (Values can also be base64 encoded or it can be a base64 encoded json object) <code>USE_LETS_ENCRYPT_WILDCARD</code> <code>no</code> multisite no Create wildcard certificates for all domains. This allows a single certificate to secure multiple subdomains. (Only available with DNS challenges) <code>USE_LETS_ENCRYPT_STAGING</code> <code>no</code> multisite no Use the staging environment for Let\u2019s Encrypt certificate generation. Useful when you are testing your deployments to avoid being rate limited in the production environment. <code>LETS_ENCRYPT_CLEAR_OLD_CERTS</code> <code>no</code> global no Clear old certificates when renewing."},{"location":"settings/#limit","title":"Limit","text":"<p>STREAM support </p> <p>Limit maximum number of requests and connections.</p> Setting Default Context Multiple Description <code>USE_LIMIT_REQ</code> <code>yes</code> multisite no Activate limit requests feature. <code>LIMIT_REQ_URL</code> <code>/</code> multisite yes URL (PCRE regex) where the limit request will be applied or special value / for all requests. <code>LIMIT_REQ_RATE</code> <code>2r/s</code> multisite yes Rate to apply to the URL (s for second, m for minute, h for hour and d for day). <code>USE_LIMIT_CONN</code> <code>yes</code> multisite no Activate limit connections feature. <code>LIMIT_CONN_MAX_HTTP1</code> <code>10</code> multisite no Maximum number of connections per IP when using HTTP/1.X protocol. <code>LIMIT_CONN_MAX_HTTP2</code> <code>100</code> multisite no Maximum number of streams per IP when using HTTP/2 protocol. <code>LIMIT_CONN_MAX_HTTP3</code> <code>100</code> multisite no Maximum number of streams per IP when using HTTP/3 protocol. <code>LIMIT_CONN_MAX_STREAM</code> <code>10</code> multisite no Maximum number of connections per IP when using stream."},{"location":"settings/#metrics","title":"Metrics","text":"<p>STREAM support </p> <p>Metrics collection and retrieve.</p> Setting Default Context Multiple Description <code>USE_METRICS</code> <code>yes</code> multisite no Enable collection and retrieval of internal metrics. <code>METRICS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal storage for metrics. <code>METRICS_MAX_BLOCKED_REQUESTS</code> <code>1000</code> global no Maximum number of blocked requests to store (per worker). <code>METRICS_MAX_BLOCKED_REQUESTS_REDIS</code> <code>100000</code> global no Maximum number of blocked requests to store in Redis."},{"location":"settings/#migration-pro","title":"Migration  (PRO)","text":"<p>STREAM support </p> <p>Migration of BunkerWeb configuration between instances made easy via the web UI</p>"},{"location":"settings/#miscellaneous","title":"Miscellaneous","text":"<p>STREAM support </p> <p>Miscellaneous settings.</p> Setting Default Context Multiple Description <code>DISABLE_DEFAULT_SERVER</code> <code>no</code> global no Deny HTTP request if the request vhost is unknown. <code>DISABLE_DEFAULT_SERVER_STRICT_SNI</code> <code>no</code> global no Close SSL/TLS connection if the SNI is unknown. <code>ALLOWED_METHODS</code> <code>GET                    | POST      | HEAD</code> multisite no Allowed HTTP and WebDAV methods, separated with pipes to be sent by clients. <code>MAX_CLIENT_SIZE</code> <code>10m</code> multisite no Maximum body size (0 for infinite). <code>SERVE_FILES</code> <code>yes</code> multisite no Serve files from the local folder. <code>ROOT_FOLDER</code> multisite no Root folder containing files to serve (/var/www/html/{server_name} if unset). <code>HTTP2</code> <code>yes</code> multisite no Support HTTP2 protocol when HTTPS is enabled. <code>HTTP3</code> <code>yes</code> multisite no Support HTTP3 protocol when HTTPS is enabled. <code>HTTP3_ALT_SVC_PORT</code> <code>443</code> multisite no HTTP3 alternate service port. This value will be used as part of the Alt-Svc header. <code>LISTEN_HTTP</code> <code>yes</code> multisite no Respond to (insecure) HTTP requests. <code>USE_OPEN_FILE_CACHE</code> <code>no</code> multisite no Enable open file cache feature <code>OPEN_FILE_CACHE</code> <code>max=1000 inactive=20s</code> multisite no Open file cache directive <code>OPEN_FILE_CACHE_ERRORS</code> <code>yes</code> multisite no Enable open file cache for errors <code>OPEN_FILE_CACHE_MIN_USES</code> <code>2</code> multisite no Enable open file cache minimum uses <code>OPEN_FILE_CACHE_VALID</code> <code>30s</code> multisite no Open file cache valid time <code>EXTERNAL_PLUGIN_URLS</code> global no List of external plugins URLs (direct download to .zip or .tar file) to download and install (URLs are separated with space). <code>DENY_HTTP_STATUS</code> <code>403</code> global no HTTP status code to send when the request is denied (403 or 444). When using 444, BunkerWeb will close the connection. <code>SEND_ANONYMOUS_REPORT</code> <code>yes</code> global no Send anonymous report to BunkerWeb maintainers."},{"location":"settings/#modsecurity","title":"ModSecurity","text":"<p>STREAM support </p> <p>Management of the ModSecurity WAF.</p> Setting Default Context Multiple Description <code>USE_MODSECURITY</code> <code>yes</code> multisite no Enable ModSecurity WAF. <code>USE_MODSECURITY_CRS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set. <code>USE_MODSECURITY_CRS_PLUGINS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set plugins. <code>MODSECURITY_CRS_VERSION</code> <code>4</code> multisite no Version of the OWASP Core Rule Set to use with ModSecurity (3, 4 or nightly). <code>MODSECURITY_CRS_PLUGINS</code> multisite no List of OWASP CRS plugins (plugin-name[/tag] or URL) to download and install (separated with spaces). (Not compatible with CRS version 3) <code>USE_MODSECURITY_GLOBAL_CRS</code> <code>no</code> global no Use ModSecurity CRS in global mode to improve rules loading when you have many services. <code>MODSECURITY_SEC_AUDIT_ENGINE</code> <code>RelevantOnly</code> multisite no SecAuditEngine directive of ModSecurity. <code>MODSECURITY_SEC_RULE_ENGINE</code> <code>On</code> multisite no SecRuleEngine directive of ModSecurity. <code>MODSECURITY_SEC_AUDIT_LOG_PARTS</code> <code>ABCFHZ</code> multisite no SecAuditLogParts directive of ModSecurity. <code>MODSECURITY_REQ_BODY_NO_FILES_LIMIT</code> <code>131072</code> multisite no SecRequestBodyNoFilesLimit directive of ModSecurity."},{"location":"settings/#monitoring-pro","title":"Monitoring  (PRO)","text":"<p>STREAM support </p> <p>BunkerWeb monitoring pro system. This plugin is a prerequisite for some other plugins.</p> Setting Default Context Multiple Description <code>USE_MONITORING</code> <code>yes</code> global no Enable monitoring of BunkerWeb. <code>MONITORING_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the dict to store monitoring metrics. <code>MONITORING_IGNORE_URLS</code> global no List of URLs to ignore when monitoring separated with spaces (e.g. /health)"},{"location":"settings/#php","title":"PHP","text":"<p>STREAM support </p> <p>Manage local or remote PHP-FPM.</p> Setting Default Context Multiple Description <code>REMOTE_PHP</code> multisite no Hostname of the remote PHP-FPM instance. <code>REMOTE_PHP_PATH</code> multisite no Root folder containing files in the remote PHP-FPM instance. <code>REMOTE_PHP_PORT</code> <code>9000</code> multisite no Port of the remote PHP-FPM instance. <code>LOCAL_PHP</code> multisite no Path to the PHP-FPM socket file. <code>LOCAL_PHP_PATH</code> multisite no Root folder containing files in the local PHP-FPM instance."},{"location":"settings/#pro","title":"Pro","text":"<p>STREAM support </p> <p>Pro settings for the Pro version of BunkerWeb.</p> Setting Default Context Multiple Description <code>PRO_LICENSE_KEY</code> global no The License Key for the Pro version of BunkerWeb."},{"location":"settings/#prometheus-exporter-pro","title":"Prometheus exporter  (PRO)","text":"<p>STREAM support </p> <p>Prometheus exporter for BunkerWeb internal metrics.</p> Setting Default Context Multiple Description <code>USE_PROMETHEUS_EXPORTER</code> <code>no</code> global no Enable the Prometheus export. <code>PROMETHEUS_EXPORTER_IP</code> <code>0.0.0.0</code> global no Listening IP of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_PORT</code> <code>9113</code> global no Listening port of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_URL</code> <code>/metrics</code> global no HTTP URL of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_ALLOW_IP</code> <code>127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16</code> global no List of IP/networks allowed to contact the Prometheus exporter endpoint."},{"location":"settings/#real-ip","title":"Real IP","text":"<p>STREAM support </p> <p>Get real IP of clients when BunkerWeb is behind a reverse proxy / load balancer.</p> Setting Default Context Multiple Description <code>USE_REAL_IP</code> <code>no</code> multisite no Retrieve the real IP of client. <code>USE_PROXY_PROTOCOL</code> <code>no</code> global no Enable PROXY protocol communication. <code>REAL_IP_FROM</code> <code>192.168.0.0/16 172.16.0.0/12 10.0.0.0/8</code> multisite no List of trusted IPs / networks, separated with spaces, where proxied requests come from. <code>REAL_IP_HEADER</code> <code>X-Forwarded-For</code> multisite no HTTP header containing the real IP or special value proxy_protocol for PROXY protocol. <code>REAL_IP_RECURSIVE</code> <code>yes</code> multisite no Perform a recursive search in the header container IP address. <code>REAL_IP_FROM_URLS</code> multisite no List of URLs containing trusted IPs / networks, separated with spaces, where proxied requests come from. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#redirect","title":"Redirect","text":"<p>STREAM support </p> <p>Manage HTTP redirects.</p> Setting Default Context Multiple Description <code>REDIRECT_TO</code> multisite no Redirect a whole site to another one. <code>REDIRECT_TO_REQUEST_URI</code> <code>no</code> multisite no Append the requested URI to the redirect address. <code>REDIRECT_TO_STATUS_CODE</code> <code>301</code> multisite no Status code to send to client when redirecting."},{"location":"settings/#redis","title":"Redis","text":"<p>STREAM support </p> <p>Redis server configuration when using BunkerWeb in cluster mode.</p> Setting Default Context Multiple Description <code>USE_REDIS</code> <code>no</code> global no Activate Redis. <code>REDIS_HOST</code> global no Redis server IP or hostname. <code>REDIS_PORT</code> <code>6379</code> global no Redis server port. <code>REDIS_DATABASE</code> <code>0</code> global no Redis database number. <code>REDIS_SSL</code> <code>no</code> global no Use SSL/TLS connection with Redis server. <code>REDIS_SSL_VERIFY</code> <code>no</code> global no Verify the certificate of Redis server. <code>REDIS_TIMEOUT</code> <code>1000</code> global no Redis server timeout (in ms) for connect, read and write. <code>REDIS_USERNAME</code> global no Redis username used in AUTH command. <code>REDIS_PASSWORD</code> global no Redis password used in AUTH command. <code>REDIS_SENTINEL_HOSTS</code> global no Redis sentinel hosts with format host:[port] separated with spaces. <code>REDIS_SENTINEL_USERNAME</code> global no Redis sentinel username. <code>REDIS_SENTINEL_PASSWORD</code> global no Redis sentinel password. <code>REDIS_SENTINEL_MASTER</code> global no Redis sentinel master name. <code>REDIS_KEEPALIVE_IDLE</code> <code>30000</code> global no Max idle time (in ms) before closing redis connection in the pool. <code>REDIS_KEEPALIVE_POOL</code> <code>10</code> global no Max number of redis connection(s) kept in the pool."},{"location":"settings/#reporting-pro","title":"Reporting  (PRO)","text":"<p>STREAM support </p> <p>Regular reporting of important data from BunkerWeb (global, attacks, bans, requests, reasons, AS...). Monitoring pro plugin needed to work.</p> Setting Default Context Multiple Description <code>USE_REPORTING_SMTP</code> <code>no</code> global no Enable sending the report via email. <code>USE_REPORTING_WEBHOOK</code> <code>no</code> global no Enable sending the report via webhook. <code>REPORTING_SCHEDULE</code> <code>weekly</code> global no The frequency at which reports are sent. <code>REPORTING_WEBHOOK_URLS</code> global no List of webhook URLs to receive the report in Markdown (separated by spaces). <code>REPORTING_SMTP_EMAILS</code> global no List of email addresses to receive the report in HTML format (separated by spaces). <code>REPORTING_SMTP_HOST</code> global no The host server used for SMTP sending. <code>REPORTING_SMTP_PORT</code> <code>465</code> global no The port used for SMTP. Please note that there are different standards depending on the type of connection (SSL = 465, TLS = 587). <code>REPORTING_SMTP_FROM_EMAIL</code> global no The email address used as the sender. Note that 2FA must be disabled for this email address. <code>REPORTING_SMTP_FROM_USER</code> global no The user authentication value for sending via the from email address. <code>REPORTING_SMTP_FROM_PASSWORD</code> global no The password authentication value for sending via the from email address. <code>REPORTING_SMTP_SSL</code> <code>SSL</code> global no Determine whether or not to use a secure connection for SMTP. <code>REPORTING_SMTP_SUBJECT</code> <code>BunkerWeb Report</code> global no The subject line of the email."},{"location":"settings/#reverse-proxy","title":"Reverse proxy","text":"<p>STREAM support </p> <p>Manage reverse proxy configurations.</p> Setting Default Context Multiple Description <code>USE_REVERSE_PROXY</code> <code>no</code> multisite no Activate reverse proxy mode. <code>REVERSE_PROXY_INTERCEPT_ERRORS</code> <code>yes</code> multisite no Intercept and rewrite errors. <code>REVERSE_PROXY_CUSTOM_HOST</code> multisite no Override Host header sent to upstream server. <code>REVERSE_PROXY_SSL_SNI</code> <code>no</code> multisite no Enable or disable sending SNI to upstream server. <code>REVERSE_PROXY_SSL_SNI_NAME</code> multisite no Sets the SNI host to send to upstream server. <code>REVERSE_PROXY_HOST</code> multisite yes Full URL of the proxied resource (proxy_pass). <code>REVERSE_PROXY_URL</code> <code>/</code> multisite yes Location URL that will be proxied. <code>REVERSE_PROXY_WS</code> <code>no</code> multisite yes Enable websocket on the proxied resource. <code>REVERSE_PROXY_HEADERS</code> multisite yes List of HTTP headers to send to proxied resource separated with semicolons (values for proxy_set_header directive). <code>REVERSE_PROXY_HEADERS_CLIENT</code> multisite yes List of HTTP headers to send to client separated with semicolons (values for add_header directive). <code>REVERSE_PROXY_BUFFERING</code> <code>yes</code> multisite yes Enable or disable buffering of responses from proxied resource. <code>REVERSE_PROXY_KEEPALIVE</code> <code>no</code> multisite yes Enable or disable keepalive connections with the proxied resource. <code>REVERSE_PROXY_AUTH_REQUEST</code> multisite yes Enable authentication using an external provider (value of auth_request directive). <code>REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL</code> multisite yes Redirect clients to sign-in URL when using REVERSE_PROXY_AUTH_REQUEST (used when auth_request call returned 401). <code>REVERSE_PROXY_AUTH_REQUEST_SET</code> multisite yes List of variables to set from the authentication provider, separated with semicolons (values of auth_request_set directives). <code>REVERSE_PROXY_CONNECT_TIMEOUT</code> <code>60s</code> multisite yes Timeout when connecting to the proxied resource. <code>REVERSE_PROXY_READ_TIMEOUT</code> <code>60s</code> multisite yes Timeout when reading from the proxied resource. <code>REVERSE_PROXY_SEND_TIMEOUT</code> <code>60s</code> multisite yes Timeout when sending to the proxied resource. <code>REVERSE_PROXY_INCLUDES</code> multisite yes Additional configuration to include in the location block, separated with spaces. <code>REVERSE_PROXY_PASS_REQUEST_BODY</code> <code>yes</code> multisite yes Enable or disable passing the request body to the proxied resource. <code>USE_PROXY_CACHE</code> <code>no</code> multisite no Enable or disable caching of the proxied resources. <code>PROXY_CACHE_PATH_LEVELS</code> <code>1:2</code> global no Hierarchy levels of the cache. <code>PROXY_CACHE_PATH_ZONE_SIZE</code> <code>10m</code> global no Maximum size of cached metadata when caching proxied resources. <code>PROXY_CACHE_PATH_PARAMS</code> <code>max_size=100m</code> global no Additional parameters to add to the proxy_cache directive. <code>PROXY_CACHE_METHODS</code> <code>GET HEAD</code> multisite no HTTP methods that should trigger a cache operation. <code>PROXY_CACHE_MIN_USES</code> <code>2</code> multisite no The minimum number of requests before a response is cached. <code>PROXY_CACHE_KEY</code> <code>$scheme$host$request_uri</code> multisite no The key used to uniquely identify a cached response. <code>PROXY_CACHE_VALID</code> <code>200=24h 301=1h 302=24h</code> multisite no Define the caching time depending on the HTTP status code (list of status=time), separated with spaces. <code>PROXY_NO_CACHE</code> <code>$http_pragma $http_authorization</code> multisite no Conditions to disable caching of responses. <code>PROXY_CACHE_BYPASS</code> <code>0</code> multisite no Conditions to bypass caching of responses."},{"location":"settings/#reverse-scan","title":"Reverse scan","text":"<p>STREAM support </p> <p>Scan clients ports to detect proxies or servers.</p> Setting Default Context Multiple Description <code>USE_REVERSE_SCAN</code> <code>no</code> multisite no Enable scanning of clients ports and deny access if one is opened. <code>REVERSE_SCAN_PORTS</code> <code>22 80 443 3128 8000 8080</code> multisite no List of port to scan when using reverse scan feature. <code>REVERSE_SCAN_TIMEOUT</code> <code>500</code> multisite no Specify the maximum timeout (in ms) when scanning a port."},{"location":"settings/#ssl","title":"SSL","text":"<p>STREAM support </p> <p>Handle SSL/TLS related settings.</p> Setting Default Context Multiple Description <code>REDIRECT_HTTP_TO_HTTPS</code> <code>no</code> multisite no Redirect all HTTP request to HTTPS. <code>AUTO_REDIRECT_HTTP_TO_HTTPS</code> <code>yes</code> multisite no Try to detect if HTTPS is used and activate HTTP to HTTPS redirection if that's the case. <code>SSL_PROTOCOLS</code> <code>TLSv1.2 TLSv1.3</code> multisite no The supported version of TLS. We recommend the default value TLSv1.2 TLSv1.3 for compatibility reasons."},{"location":"settings/#securitytxt","title":"Security.txt","text":"<p>STREAM support </p> <p>Manage the security.txt file. A proposed standard which allows websites to define security policies.</p> Setting Default Context Multiple Description <code>USE_SECURITYTXT</code> <code>no</code> multisite no Enable security.txt file. <code>SECURITYTXT_URI</code> <code>/.well-known/security.txt</code> multisite no Indicates the URI where the \"security.txt\" file will be accessible from. <code>SECURITYTXT_CONTACT</code> multisite yes Indicates a method that researchers should use for reporting security vulnerabilities such as an email address, a phone number, and/or a web page with contact information. (If the value is empty, the security.txt file will not be created as it is a required field) <code>SECURITYTXT_EXPIRES</code> multisite no Indicates the date and time after which the data contained in the \"security.txt\" file is considered stale and should not be used (If the value is empty, the value will always be the current date and time + 1 year). <code>SECURITYTXT_ENCRYPTION</code> multisite yes Indicates an encryption key that security researchers should use for encrypted communication. <code>SECURITYTXT_ACKNOWLEDGEMENTS</code> multisite yes Indicates a link to a page where security researchers are recognized for their reports. <code>SECURITYTXT_PREFERRED_LANG</code> <code>en</code> multisite no Can be used to indicate a set of natural languages that are preferred when submitting security reports. <code>SECURITYTXT_CANONICAL</code> multisite yes Indicates the canonical URIs where the \"security.txt\" file is located, which is usually something like \"https://example.com/.well-known/security.txt\". (If the value is empty, the default value will be automatically generated from the site URL + SECURITYTXT_URI) <code>SECURITYTXT_POLICY</code> multisite yes Indicates a link to where the vulnerability disclosure policy is located. <code>SECURITYTXT_HIRING</code> multisite yes Used for linking to the vendor's security-related job positions. <code>SECURITYTXT_CSAF</code> multisite yes A link to the provider-metadata.json of your CSAF (Common Security Advisory Framework) provider."},{"location":"settings/#self-signed-certificate","title":"Self-signed certificate","text":"<p>STREAM support </p> <p>Generate self-signed certificate.</p> Setting Default Context Multiple Description <code>GENERATE_SELF_SIGNED_SSL</code> <code>no</code> multisite no Generate and use self-signed certificate. <code>SELF_SIGNED_SSL_EXPIRY</code> <code>365</code> multisite no Self-signed certificate expiry in days. <code>SELF_SIGNED_SSL_SUBJ</code> <code>/CN=www.example.com/</code> multisite no Self-signed certificate subject."},{"location":"settings/#sessions","title":"Sessions","text":"<p>STREAM support </p> <p>Management of session used by other plugins.</p> Setting Default Context Multiple Description <code>SESSIONS_SECRET</code> <code>random</code> global no Secret used to encrypt sessions variables for storing data related to challenges. <code>SESSIONS_NAME</code> <code>random</code> global no Name of the cookie given to clients. <code>SESSIONS_IDLING_TIMEOUT</code> <code>1800</code> global no Maximum time (in seconds) of inactivity before the session is invalidated. <code>SESSIONS_ROLLING_TIMEOUT</code> <code>3600</code> global no Maximum time (in seconds) before a session must be renewed. <code>SESSIONS_ABSOLUTE_TIMEOUT</code> <code>86400</code> global no Maximum time (in seconds) before a session is destroyed. <code>SESSIONS_CHECK_IP</code> <code>yes</code> global no Destroy session if IP address is different than original one. <code>SESSIONS_CHECK_USER_AGENT</code> <code>yes</code> global no Destroy session if User-Agent is different than original one."},{"location":"settings/#ui","title":"UI","text":"<p>STREAM support </p> <p>Integrate easily the BunkerWeb UI.</p> Setting Default Context Multiple Description <code>USE_UI</code> <code>no</code> multisite no Use UI <code>UI_HOST</code> global no Address of the web UI used for initial setup"},{"location":"settings/#user-manager-pro","title":"User Manager  (PRO)","text":"<p>STREAM support </p> <p>Add the possibility to manage users on the web interface</p> Setting Default Context Multiple Description <code>USERS_REQUIRE_2FA</code> <code>no</code> global no Require two-factor authentication for all users"},{"location":"settings/#whitelist","title":"Whitelist","text":"<p>STREAM support </p> <p>Allow access based on internal and external IP/network/rDNS/ASN whitelists.</p> Setting Default Context Multiple Description <code>USE_WHITELIST</code> <code>yes</code> multisite no Activate whitelist feature. <code>WHITELIST_IP</code> multisite no List of IP/network, separated with spaces, to put into the whitelist. <code>WHITELIST_RDNS</code> <code>.google.com .googlebot.com .yandex.ru .yandex.net .yandex.com .search.msn.com .baidu.com .baidu.jp .crawl.yahoo.net .fwd.linkedin.com .twitter.com .twttr.com .discord.com</code> multisite no List of reverse DNS suffixes, separated with spaces, to whitelist. <code>WHITELIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS whitelist checks on global IP addresses. <code>WHITELIST_ASN</code> <code>32934</code> multisite no List of ASN numbers, separated with spaces, to whitelist. <code>WHITELIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_IP_URLS</code> multisite no List of URLs, separated with spaces, containing good IP/network to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing good User-Agent to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>BunkerWeb Panel</p> <p>If you are unable to resolve your problems, you can contact us directly via our panel. This centralises all requests relating to the BunkerWeb solution.</p>"},{"location":"troubleshooting/#logs","title":"Logs","text":"<p>When troubleshooting, logs are your best friends. We try our best to provide user-friendly logs to help you understand what's happening.</p> <p>Please note that you can set <code>LOG_LEVEL</code> setting to <code>info</code> (default : <code>notice</code>) to increase the verbosity of BunkerWeb.</p> <p>Here is how you can access the logs, depending on your integration :</p> DockerDocker autoconfSwarmKubernetesLinux <p>List containers</p> <p>To list the running containers, you can use the following command : <pre><code>docker ps\n</code></pre></p> <p>You can use the <code>docker logs</code> command (replace <code>mybunker</code> with the name of your container) : <pre><code>docker logs mybunker\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose logs mybunker\n</code></pre></p> <p>List containers</p> <p>To list the running containers, you can use the following command : <pre><code>docker ps\n</code></pre></p> <p>You can use the <code>docker logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your containers) : <pre><code>docker logs mybunker\ndocker logs myautoconf\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> and <code>myautoconf</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose logs mybunker\ndocker-compose logs myautoconf\n</code></pre></p> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>List services</p> <p>To list the services, you can use the following command : <pre><code>docker service ls\n</code></pre></p> <p>You can use the <code>docker service logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your services) : <pre><code>docker service logs mybunker\ndocker service logs myautoconf\n</code></pre></p> <p>List pods</p> <p>To list the pods, you can use the following command : <pre><code>kubectl get pods\n</code></pre></p> <p>You can use the <code>kubectl logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your pods) : <pre><code>kubectl logs mybunker\nkubectl logs myautoconf\n</code></pre></p> <p>For errors related to BunkerWeb services (e.g. not starting), you can use <code>journalctl</code> : <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre></p> <p>Common logs are located inside the <code>/var/log/bunkerweb</code> directory : <pre><code>cat /var/log/bunkerweb/error.log\ncat /var/log/bunkerweb/access.log\n</code></pre></p>"},{"location":"troubleshooting/#permissions","title":"Permissions","text":"<p>Don't forget that BunkerWeb runs as an unprivileged user for obvious security reasons. Double-check the permissions of files and folders used by BunkerWeb, especially if you use custom configurations (more info here). You will need to set at least RW rights on files and RWX on folders.</p>"},{"location":"troubleshooting/#ip-unban","title":"IP unban","text":"<p>You can manually unban an IP which can be useful when doing some tests so you can contact the internal API of BunkerWeb (replace <code>1.2.3.4</code> with the IP address to unban) :</p> DockerDocker autoconfSwarmKubernetesLinux <p>You can use the <code>docker exec</code> command (replace <code>mybunker</code> with the name of your container) : <pre><code>docker exec mybunker bwcli unban 1.2.3.4\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose exec mybunker bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>docker exec</code> command (replace <code>myautoconf</code> with the name of your container) : <pre><code>docker exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>myautoconf</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You can use the <code>docker exec</code> command (replace <code>myautoconf</code> with the name of your service) : <pre><code>docker exec $(docker ps -q -f name=myautoconf) bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>kubectl exec</code> command (replace <code>myautoconf</code> with the name of your pod) : <pre><code>kubectl exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>bwcli</code> command (as root) : <pre><code>sudo bwcli unban 1.2.3.4\n</code></pre></p>"},{"location":"troubleshooting/#false-positives","title":"False positives","text":""},{"location":"troubleshooting/#detect-only-mode","title":"Detect only mode","text":"<p>For debugging/test purposes, you can set BunkerWeb in detect only mode so it won't block request and will act as a classical reverse proxy.</p>"},{"location":"troubleshooting/#modsecurity","title":"ModSecurity","text":"<p>The default BunkerWeb configuration of ModSecurity is to load the Core Rule Set in anomaly scoring mode with a paranoia level (PL) of 1 :</p> <ul> <li>Each matched rule will increase an anomaly score (so many rules can match a single request)</li> <li>PL1 includes rules with fewer chances of false positives (but less security than PL4)</li> <li>the default threshold for anomaly score is 5 for requests and 4 for responses</li> </ul> <p>Let's take the following logs as an example of ModSecurity detection using default configuration (formatted for better readability) :</p> <pre><code>2022/04/26 12:01:10 [warn] 85#85: *11 ModSecurity: Warning. Matched \"Operator `PmFromFile' with parameter `lfi-os-files.data' against variable `ARGS:id' (Value: `/etc/passwd' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf\"]\n    [line \"78\"]\n    [id \"930120\"]\n    [rev \"\"]\n    [msg \"OS File Access Attempt\"]\n    [data \"Matched Data: etc/passwd found within ARGS:id: /etc/passwd\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-multi\"]\n    [tag \"platform-multi\"]\n    [tag \"attack-lfi\"]\n    [tag \"paranoia-level/1\"]\n    [tag \"OWASP_CRS\"]\n    [tag \"capec/1000/255/153/126\"]\n    [tag \"PCI/6.5.4\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"o1,10v9,11t:utf8toUnicode,t:urlDecodeUni,t:normalizePathWin,t:lowercase\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n2022/04/26 12:01:10 [warn] 85#85: *11 ModSecurity: Warning. Matched \"Operator `PmFromFile' with parameter `unix-shell.data' against variable `ARGS:id' (Value: `/etc/passwd' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf\"]\n    [line \"480\"]\n    [id \"932160\"]\n    [rev \"\"]\n    [msg \"Remote Command Execution: Unix Shell Code Found\"]\n    [data \"Matched Data: etc/passwd found within ARGS:id: /etc/passwd\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-shell\"]\n    [tag \"platform-unix\"]\n    [tag \"attack-rce\"]\n    [tag \"paranoia-level/1\"]\n    [tag \"OWASP_CRS\"]\n    [tag \"capec/1000/152/248/88\"]\n    [tag \"PCI/6.5.2\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"o1,10v9,11t:urlDecodeUni,t:cmdLine,t:normalizePath,t:lowercase\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n2022/04/26 12:01:10 [error] 85#85: *11 [client 172.17.0.1] ModSecurity: Access denied with code 403 (phase 2). Matched \"Operator `Ge' with parameter `5' against variable `TX:ANOMALY_SCORE' (Value: `10' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-949-BLOCKING-EVALUATION.conf\"]\n    [line \"80\"]\n    [id \"949110\"]\n    [rev \"\"]\n    [msg \"Inbound Anomaly Score Exceeded (Total Score: 10)\"]\n    [data \"\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-multi\"]\n    [tag \"platform-multi\"]\n    [tag \"attack-generic\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n</code></pre> <p>As we can see, there are 3 different logs :</p> <ol> <li>Rule 930120 matched</li> <li>Rule 932160 matched</li> <li>Access denied (rule 949110)</li> </ol> <p>One important thing to understand is that rule 949110 is not a \"real\" one : it's the one that will deny the request because the anomaly threshold is reached (which is 10 in this example). You should never remove the 949110 rule !</p> <p>If it's a false-positive, you should then focus on both 930120 and 932160 rules. ModSecurity and/or CRS tuning is out of the scope of this documentation but don't forget that you can apply custom configurations before and after the CRS is loaded (more info here).</p>"},{"location":"troubleshooting/#bad-behavior","title":"Bad Behavior","text":"<p>A common false-positive case is when the client is banned because of the \"bad behavior\" feature which means that too many suspicious HTTP status codes were generated within a time period (more info here). You should start by reviewing the settings and then edit them according to your web application(s) like removing a suspicious HTTP code, decreasing the count time, increasing the threshold, ...</p>"},{"location":"troubleshooting/#whitelisting","title":"Whitelisting","text":"<p>If you have bots (or admins) that need to access your website, the recommended way to avoid any false positive is to whitelist them using the whitelisting feature. We don't recommend using the <code>WHITELIST_URI*</code> or <code>WHITELIST_USER_AGENT*</code> settings unless they are set to secret and unpredictable values. Common use cases are :</p> <ul> <li>Healthcheck / status bot</li> <li>Callback like IPN or webhook</li> <li>Social media crawler</li> </ul>"},{"location":"troubleshooting/#common-errors","title":"Common errors","text":""},{"location":"troubleshooting/#upstream-sent-too-big-header","title":"Upstream sent too big header","text":"<p>If you see the following error <code>upstream sent too big header while reading response header from upstream</code> in the logs, you will need to tweak the various proxy buffers size using the following settings : - <code>PROXY_BUFFERS</code> - <code>PROXY_BUFFER_SIZE</code> - <code>PROXY_BUSY_BUFFERS_SIZE</code></p>"},{"location":"troubleshooting/#could-not-build-server_names_hash","title":"Could not build server_names_hash","text":"<p>If you see the following error <code>could not build server_names_hash, you should increase server_names_hash_bucket_size</code> in the logs, you will need to tweak the <code>SERVER_NAMES_HASH_BUCKET_SIZE</code> setting.</p>"},{"location":"troubleshooting/#timezone","title":"Timezone","text":"<p>When using container-based integrations, the timezone of the container may not match the one of the host machine. To resolve that, you can set the <code>TZ</code> environment variable to the timezone of your choice on your containers (e.g. <code>TZ=Europe/Paris</code>). You will find the list of timezone identifiers here.</p>"},{"location":"troubleshooting/#web-ui","title":"Web UI","text":"<p>In case you lost your UI credentials or have 2FA issues, you can connect to the database to retrieve access.</p> <p>Access database</p> SQLiteMariaDB / MySQL LinuxDocker <p>Install SQLite (Debian/Ubuntu) :</p> <pre><code>sudo apt install sqlite3\n</code></pre> <p>Install SQLite (Fedora/RedHat) :</p> <pre><code>sudo dnf install sqlite\n</code></pre> <p>Get a shell into your scheduler container :</p> <p>Docker arguments</p> <ul> <li>the <code>-u 0</code> option is to run the command as root (mandatory)</li> <li>the <code>-it</code> options are to run the command interactively (mandatory)</li> <li><code>&lt;bunkerweb_scheduler_container&gt;</code> : the name or ID of your scheduler container</li> </ul> <pre><code>docker exec -u 0 -it &lt;bunkerweb_scheduler_container&gt; bash\n</code></pre> <p>Install SQLite :</p> <pre><code>apk add sqlite\n</code></pre> <p>Access your database :</p> <p>Database path</p> <p>We assume that you are using the default database path. If you are using a custom path, you will need to adapt the command.</p> <pre><code>sqlite3 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <p>You should see something like this :</p> <pre><code>SQLite version &lt;VER&gt; &lt;DATE&gt;\nEnter \".help\" for usage hints.\nsqlite&gt;\n</code></pre> <p>MariaDB / MySQL only</p> <p>The following steps are only valid for MariaDB / MySQL databases. If you are using another database, please refer to the documentation of your database.</p> <p>Credentials and database name</p> <p>You will need to use the same credentials and database named used in the <code>DATABASE_URI</code> setting.</p> LinuxDocker <p>Access your local database :</p> <pre><code>mysql -u &lt;user&gt; -p &lt;database&gt;\n</code></pre> <p>Then enter your password of the database user and you should be able to access your database.</p> <p>Access your database container :</p> <p>Docker arguments</p> <ul> <li>the <code>-u 0</code> option is to run the command as root (mandatory)</li> <li>the <code>-it</code> options are to run the command interactively (mandatory)</li> <li><code>&lt;bunkerweb_db_container&gt;</code> : the name or ID of your database container</li> <li><code>&lt;user&gt;</code> : the database user</li> <li><code>&lt;database&gt;</code> : the database name</li> </ul> <pre><code>docker exec -u 0 -it &lt;bunkerweb_db_container&gt; mysql -u &lt;user&gt; -p &lt;database&gt;\n</code></pre> <p>Then enter your password of the database user and you should be able to access your database.</p> <p>Troubleshooting actions</p> <p>Tables schema</p> <p>The schema of the <code>bw_ui_users</code> table is the following :</p> <pre><code>username VARCHAR(256) PRIMARY KEY NOT NULL\nemail VARCHAR(256) UNIQUE DEFAULT NULL\npassword VARCHAR(60) NOT NULL\nmethod ENUM('ui', 'scheduler', 'autoconf', 'manual', 'wizard') NOT NULL\nadmin BOOLEAN NOT NULL DEFAULT 0\ntheme ENUM('light', 'dark') NOT NULL DEFAULT 'light'\ntotp_secret VARCHAR(256) DEFAULT NULL\ncreation_date DATETIME NOT NULL\nupdate_date DATETIME NOT NULL\n</code></pre> Retrieve usernameUpdate admin user passwordDisable 2FA authentication for admin userRefresh 2FA recovery codes <p>Execute the following command to extract data from the <code>bw_ui_users</code> table :</p> <pre><code>SELECT * FROM bw_ui_users;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light *** *** *** <p>You first need to hash the new password using the bcrypt algorithm.</p> <p>Install the Python bcrypt library :</p> <pre><code>pip install bcrypt\n</code></pre> <p>Generate your hash (replace <code>mypassword</code> with your own password) :</p> <pre><code>python3 -c 'from bcrypt import hashpw, gensalt ; print(hashpw(b\"\"\"mypassword\"\"\", gensalt(rounds=10)).decode(\"utf-8\"))'\n</code></pre> <p>You can update your username / password executing this command :</p> <pre><code>UPDATE bw_ui_users SET password = '&lt;password_hash&gt;' WHERE admin = 1;\n</code></pre> <p>If you check again your <code>bw_ui_users</code> table following this command :</p> <pre><code>SELECT * FROM bw_ui_users WHERE admin = 1;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light *** *** *** <p>You should now be able to use the new credentials to log into the web UI.</p> <p>You can deactivate 2FA by executing this command :</p> <pre><code>UPDATE bw_ui_users SET totp_secret = NULL WHERE admin = 1;\n</code></pre> <p>If you check again your <code>bw_ui_users</code> table by following this command :</p> <pre><code>SELECT * FROM bw_ui_users WHERE admin = 1;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light NULL *** *** <p>You should now be able to log into the web UI only using your username and password without 2FA.</p> <p>The recovery codes can be refreshed in your profile page of the web UI under the <code>Security</code> tab.</p> <p>Upload plugin</p> <p>It may not be possible to upload a plugin from the UI in certain situations:</p> <ul> <li>Missing package to manage compressed files on your integration, in which case you will need to add the necessary packages</li> <li>Safari browser : the 'safe mode' may prevent you from being able to add a plugin. You will need to make the necessary changes on your machine</li> </ul>"},{"location":"upgrading/","title":"Upgrading","text":""},{"location":"upgrading/#upgrade-from-16x","title":"Upgrade from 1.6.X","text":"<p>Read me first</p> <p>We often add new features and settings to BunkerWeb. We recommend you read the settings sections of the documentation or the GitHub releases to see what's new.</p>"},{"location":"upgrading/#procedure","title":"Procedure","text":"<ol> <li> <p>Backup the database:</p> <ul> <li>Before proceeding with the database upgrade, ensure to perform a complete backup of the current state of the database.</li> <li>Use appropriate tools to backup the entire database, including data, schemas, and configurations.</li> </ul> DockerLinux <pre><code>docker exec -it -e BACKUP_DIRECTORY=/path/to/backup/directory &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/backup/directory /path/to/backup/directory\n</code></pre> <p>Information for Red Hat Enterprise Linux (RHEL) 8.9 users</p> <p>If you are using RHEL 8.9 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <pre><code>BACKUP_DIRECTORY=/path/to/backup/directory bwcli plugin backup save\n</code></pre> </li> <li> <p>Upgrade BunkerWeb:</p> <ul> <li> <p>Upgrade BunkerWeb to the latest version.</p> DockerLinux <ol> <li> <p>Update the Docker Compose file: Update the Docker Compose file to use the new version of the BunkerWeb image.     <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:1.6.1\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:1.6.1\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:1.6.1\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:1.6.1\n        ...\n</code></pre></p> </li> <li> <p>Restart the containers: Restart the containers to apply the changes.     <pre><code>docker compose down\ndocker compose up -d\n</code></pre></p> </li> </ol> <ol> <li> <p>Stop the services:     <pre><code>sudo systemctl stop bunkerweb\nsudo systemctl stop bunkerweb-ui\nsudo systemctl stop bunkerweb-scheduler\n</code></pre></p> </li> <li> <p>Update BunkerWeb:</p> Debian/UbuntuFedora/RedHat <p>First, if you have previously hold the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>apt-mark showhold</code></p> <pre><code>sudo apt-mark unhold bunkerweb nginx\n</code></pre> <p>Them, you can update BunkerWeb package :</p> <pre><code>sudo apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading BunkerWeb package when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold bunkerweb nginx\n</code></pre> <p>More details in the integration Linux page.</p> <p>First, if you have previously hold the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>dnf versionlock list</code></p> <pre><code>sudo dnf versionlock delete package bunkerweb &amp;&amp; \\\nsudo dnf versionlock delete package nginx\n</code></pre> <p>Them, you can update BunkerWeb package :</p> <pre><code>sudo dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading BunkerWeb package when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add bunkerweb &amp;&amp; \\\nsudo dnf versionlock add nginx\n</code></pre> <p>More details in the integration Linux page.</p> </li> <li> <p>Start the services:         <pre><code>sudo systemctl start bunkerweb\nsudo systemctl start bunkerweb-ui\nsudo systemctl start bunkerweb-scheduler\n</code></pre>         Or reboot the system:         <pre><code>sudo reboot\n</code></pre></p> </li> </ol> </li> </ul> </li> <li> <p>Check the logs: Check the logs of the scheduler service to ensure that the migration was successful.</p> DockerLinux <pre><code>docker compose logs &lt;scheduler_container&gt;\n</code></pre> <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre> </li> <li> <p>Verify the database: Verify that the database upgrade was successful by checking the data and configurations in the new database container.</p> </li> </ol>"},{"location":"upgrading/#rollback","title":"Rollback","text":"<p>In case of issues</p> <p>If you encounter any issues during the upgrade, you can rollback to the previous version of the database by restoring the backup taken in step 1.</p> <p>Get support and more information :</p> <ul> <li>Order professional support</li> <li>Create an issue on GitHub</li> <li>Join the BunkerWeb Discord server</li> </ul> DockerLinux <ol> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <ol> <li> <p>Remove the existing database file.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; rm -f /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Fix permissions.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; chown root:nginx /var/lib/bunkerweb/db.sqlite3\ndocker exec -u 0 -i &lt;scheduler_container&gt; chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Stop the Stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Restore the backup.</p> <pre><code>docker exec -e MYSQL_PWD=&lt;your_password&gt; -i &lt;database_container&gt; mysql -u &lt;username&gt; &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the Stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Remove the existing database.</p> <pre><code>docker exec -i &lt;database_container&gt; dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>docker exec -i &lt;database_container&gt; createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;database_container&gt; psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the Stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> </li> <li> <p>Downgrade BunkerWeb.</p> <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:&lt;old_version&gt;\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:&lt;old_version&gt;\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:&lt;old_version&gt;\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:&lt;old_version&gt;\n        ...\n</code></pre> </li> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol> <ol> <li> <p>Stop the services.</p> <pre><code>sudo systemctl stop bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <pre><code>sudo rm -f /var/lib/bunkerweb/db.sqlite3\nsudo sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\nsudo chown root:nginx /var/lib/bunkerweb/db.sqlite3\nsudo chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <pre><code>mysql -u &lt;username&gt; -p &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> <ol> <li> <p>Remove the existing database.</p> <pre><code>dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> </ol> </li> <li> <p>Start the services.</p> <pre><code>sudo systemctl start bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Downgrade BunkerWeb.</p> <ul> <li>Downgrade BunkerWeb to the previous version by following the same steps as when upgrading BunkerWeb in the integration Linux page</li> </ul> </li> </ol>"},{"location":"upgrading/#upgrade-from-15x","title":"Upgrade from 1.5.X","text":""},{"location":"upgrading/#what-changed","title":"What changed?","text":""},{"location":"upgrading/#scheduler","title":"Scheduler","text":"<p>Unlike the 1.5.X releases, the Scheduler service no longer uses the docker socket proxy to fetch BunkerWeb's instances. Instead, it uses the new <code>BUNKERWEB_INSTANCES</code> environment variable.</p> <p>About the <code>BUNKERWEB_INSTANCES</code> environment variable</p> <p>This new variable is a list of BunkerWeb instances separated by spaces in this format: <code>http://bunkerweb:5000 bunkerweb1:5000 bunkerweb2:5000 ...</code>. The scheduler will then use this list to fetch the instances' configuration and to send the configuration to them.</p> <ul> <li>The <code>http://</code> prefix is optional.</li> <li>The port is optional and defaults to the value of the <code>API_HTTP_PORT</code> environment variable.</li> <li>The default value of the <code>BUNKERWEB_INSTANCES</code> environment variable is <code>127.0.0.1</code>.</li> </ul> <p>In other words, the new system is fully agnostic and generic: the scheduler is in charge of managing a list of BunkerWeb instances and doesn't need to care about the environment.</p> <p>Autoconf/Kubernetes/Swarm integrations</p> <p>If you are using the <code>Autoconf</code>, <code>Kubernetes</code>, or <code>Swarm</code> integrations, you can set the <code>BUNKERWEB_INSTANCES</code> environment variable to an empty string (so that it doesn't try to send the configuration to the default one which is <code>127.0.0.1</code>).</p> <p>The instances will be automatically fetched by the controller. You can also add custom instances to the list that may not be picked up by the controller.</p> <p>Since the <code>1.6</code>, the Scheduler also have a new built-in healthcheck system, that will check the health of the instances. If an instance becomes unhealthy, the scheduler will stop sending the configuration to it. If the instance becomes healthy again, the scheduler will start sending the configuration to it again.</p>"},{"location":"upgrading/#bunkerweb-container","title":"BunkerWeb container","text":"<p>Another important change is that the settings that were previously declared on the BunkerWeb container are now declared on the scheduler. This means that you'll have to move your settings from the BunkerWeb container to the Scheduler container.</p> <p>While the settings are now declared on the Scheduler container, you'll still need to declare api related mandatory settings on the BunkerWeb container like the <code>API_WHITELIST_IP</code> setting which is used to whitelist the Scheduler's IP address, so that it can send the configuration to the instance.</p> <p>BunkerWeb's container settings</p> <p>Every API related setting that you declare on the BunkerWeb container have to be mirrored on the Scheduler container so that it keeps working, as the configuration will be overwritten by the Scheduler's generated configuration.</p>"},{"location":"upgrading/#default-values-and-new-settings","title":"Default values and new settings","text":"<p>We tried our best not to change default value but we have added many other settings. It's highly recommended to read the security tuning and settings sections of the documentation.</p>"},{"location":"upgrading/#templates","title":"Templates","text":"<p>We added a new feature called templates. Templates provide a structured and standardized approach to defining settings and custom configurations, check the concepts/templates section for more information.</p>"},{"location":"upgrading/#autoconf-namespaces","title":"Autoconf namespaces","text":"<p>We added a namespace feature to the autoconf integrations. Namespaces allow you to group your instances and apply settings only to them. Check the following sections according to your Integration for more information:</p> <ul> <li>Autoconf/namespaces</li> <li>Kubernetes/namespaces</li> <li>Swarm/namespaces</li> </ul>"},{"location":"upgrading/#procedure_1","title":"Procedure","text":"<ol> <li> <p>Backup the database:</p> <ul> <li>Before proceeding with the database upgrade, ensure to perform a complete backup of the current state of the database.</li> <li>Use appropriate tools to backup the entire database, including data, schemas, and configurations.</li> </ul> 1.5.7 and later1.5.6 and earlier DockerLinux <pre><code>docker exec -it -e BACKUP_DIRECTORY=/path/to/backup/directory &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/backup/directory /path/to/backup/directory\n</code></pre> <p>Information for Red Hat Enterprise Linux (RHEL) 8.9 users</p> <p>If you are using RHEL 8.9 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <pre><code>BACKUP_DIRECTORY=/path/to/backup/directory bwcli plugin backup save\n</code></pre> SQLiteMariaDBMySQLPostgreSQL DockerLinux <p>We first need to install the <code>sqlite</code> package in the container.</p> <pre><code>docker exec -u 0 -it &lt;scheduler_container&gt; apk add sqlite\n</code></pre> <p>Then, backup the database.</p> <pre><code>docker exec -it &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 \".dump\" &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>sqlite3 /var/lib/bunkerweb/db.sqlite3 \".dump\" &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e MYSQL_PWD=&lt;database_password&gt; &lt;database_container&gt; mariadb-dump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>MYSQL_PWD=&lt;database_password&gt; mariadb-dump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e MYSQL_PWD=&lt;database_password&gt; &lt;database_container&gt; mysqldump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>MYSQL_PWD=&lt;database_password&gt; mysqldump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e PGPASSWORD=&lt;database_password&gt; &lt;database_container&gt; pg_dump -U &lt;username&gt; -d &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>PGPASSWORD=&lt;database_password&gt; pg_dump -U &lt;username&gt; -d &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Upgrade BunkerWeb:</p> <ul> <li> <p>Upgrade BunkerWeb to the latest version.</p> DockerLinux <ol> <li> <p>Update the Docker Compose file: Update the Docker Compose file to use the new version of the BunkerWeb image.     <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:1.6.1\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:1.6.1\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:1.6.1\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:1.6.1\n        ...\n</code></pre></p> </li> <li> <p>Restart the containers: Restart the containers to apply the changes.     <pre><code>docker compose down\ndocker compose up -d\n</code></pre></p> </li> </ol> <ol> <li> <p>Stop the services:     <pre><code>sudo systemctl stop bunkerweb\nsudo systemctl stop bunkerweb-ui\n</code></pre></p> </li> <li> <p>Update BunkerWeb:</p> Debian/UbuntuFedora/RedHat <p>First, if you have previously hold the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>apt-mark showhold</code></p> <pre><code>sudo apt-mark unhold bunkerweb nginx\n</code></pre> <p>Them, you can update BunkerWeb package :</p> <pre><code>sudo apt install -y bunkerweb=1.6.1\n</code></pre> <p>To prevent upgrading BunkerWeb package when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold bunkerweb nginx\n</code></pre> <p>More details in the integration Linux page.</p> <p>First, if you have previously hold the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>dnf versionlock list</code></p> <pre><code>sudo dnf versionlock delete package bunkerweb &amp;&amp; \\\nsudo dnf versionlock delete package nginx\n</code></pre> <p>Them, you can update BunkerWeb package :</p> <pre><code>sudo dnf install -y bunkerweb-1.6.1\n</code></pre> <p>To prevent upgrading BunkerWeb package when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add bunkerweb &amp;&amp; \\\nsudo dnf versionlock add nginx\n</code></pre> <p>More details in the integration Linux page.</p> </li> <li> <p>Start the services:         <pre><code>sudo systemctl start bunkerweb\nsudo systemctl start bunkerweb-ui\n</code></pre>         Or reboot the system:         <pre><code>sudo reboot\n</code></pre></p> </li> </ol> </li> </ul> </li> <li> <p>Check the logs: Check the logs of the scheduler service to ensure that the migration was successful.</p> DockerLinux <pre><code>docker compose logs &lt;scheduler_container&gt;\n</code></pre> <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre> </li> <li> <p>Verify the database: Verify that the database upgrade was successful by checking the data and configurations in the new database container.</p> </li> </ol>"},{"location":"upgrading/#rollback_1","title":"Rollback","text":"<p>In case of issues</p> <p>If you encounter any issues during the upgrade, you can rollback to the previous version of the database by restoring the backup taken in step 1.</p> <p>Get support and more information :</p> <ul> <li>Order professional support</li> <li>Create an issue on GitHub</li> <li>Join the BunkerWeb Discord server</li> </ul> DockerLinux <ol> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <ol> <li> <p>Remove the existing database file.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; rm -f /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Fix permissions.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; chown root:nginx /var/lib/bunkerweb/db.sqlite3\ndocker exec -u 0 -i &lt;scheduler_container&gt; chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> </ol> <p>''. Stop the Stack.</p> <pre><code>```bash\ndocker compose down\n```\n</code></pre> <ol> <li> <p>Restore the backup.</p> <pre><code>docker exec -e MYSQL_PWD=&lt;your_password&gt; -i &lt;database_container&gt; mysql -u &lt;username&gt; &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the Stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Remove the existing database.</p> <pre><code>docker exec -i &lt;database_container&gt; dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>docker exec -i &lt;database_container&gt; createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;database_container&gt; psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the Stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> </li> <li> <p>Downgrade BunkerWeb.</p> <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:&lt;old_version&gt;\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:&lt;old_version&gt;\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:&lt;old_version&gt;\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:&lt;old_version&gt;\n        ...\n</code></pre> </li> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol> <ol> <li> <p>Stop the services.</p> <pre><code>systemctl stop bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <pre><code>sudo rm -f /var/lib/bunkerweb/db.sqlite3\nsudo sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\nsudo chown root:nginx /var/lib/bunkerweb/db.sqlite3\nsudo chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <pre><code>mysql -u &lt;username&gt; -p &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> <ol> <li> <p>Remove the existing database.</p> <pre><code>dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> </ol> </li> <li> <p>Start the services.</p> <pre><code>sudo systemctl start bunkerweb bunkerweb-ui\n</code></pre> </li> <li> <p>Downgrade BunkerWeb.</p> <ul> <li>Downgrade BunkerWeb to the previous version by following the same steps as when upgrading BunkerWeb in the integration Linux page</li> </ul> </li> </ol>"},{"location":"web-ui/","title":"Web UI","text":""},{"location":"web-ui/#overview","title":"Overview","text":"<p>The \"Web UI\" is a web application that helps you manage your BunkerWeb instance using a user-friendly interface instead of the command-line one.</p> <p>Here is the list of features offered by the web UI :</p> <ul> <li>Get a comprehensive view of the blocked attacks</li> <li>Start, stop, restart and reload your BunkerWeb instance</li> <li>Add, edit and delete settings for your web applications</li> <li>Add, edit and delete custom configurations for NGINX and ModSecurity</li> <li>Install and uninstall external plugins</li> <li>Explore the cached files</li> <li>Monitor jobs execution and restart them when needed</li> <li>View the logs and search pattern</li> </ul>"},{"location":"web-ui/#prerequisites","title":"Prerequisites","text":"<p>Because the web UI is a web application, the recommended architecture is to use BunkerWeb in front of it as a reverse proxy. The recommended installation procedure is to use the setup wizard, which will guide you step by step as described in the quickstart guide section of the documentation.</p> <p>Security considerations</p> <p>The security of the web UI is really important. If someone manages to gain access to the application, not only he will be able to edit your configurations but he could execute some code in the context of BunkerWeb (with a custom configuration containing LUA code for example). We highly recommend you to follow minimal security best practices like :</p> <ul> <li>Choose a strong password for the login (at least 8 chars with 1 lower case letter, 1 upper case letter, 1 digit and 1 special char is required)</li> <li>Put the web UI under a \"hard to guess\" URI</li> <li>Enable two-factor authentication (2FA)</li> <li>Do not open the web UI on the Internet without any further restrictions</li> <li>Apply best practices listed in the advanced usages section of the documentation depending on your use case</li> </ul>"},{"location":"web-ui/#upgrade-to-pro","title":"Upgrade to PRO","text":"<p>What is BunkerWeb PRO ?</p> <p>BunkerWeb PRO is an enhanced version of BunkerWeb open-source. Whether it's enhanced security, an enriched user experience, or technical monitoring, the BunkerWeb PRO version will allow you to fully benefit from BunkerWeb and respond to your professional needs. Do not hesitate to visit the BunkerWeb panel or contact us if you have any question regarding the PRO version.</p> <p>Once you have your PRO license key from the BunkerWeb panel, you can paste it into the PRO page of the web UI.</p> <p> </p> Upgrade to PRO from the web UI <p>Upgrade time</p> <p>The PRO version is downloaded in the background by the scheduler, it may take some time to upgrade.</p> <p>When your BunkerWeb instance has upgraded to the PRO version, you will see your license expiration date and the maximum number of services you can protect.</p> <p> </p> PRO license information"},{"location":"web-ui/#accessing-logs","title":"Accessing logs","text":"<p>Beginning with version <code>1.6</code>, the method of accessing logs has changed. This update specifically impacts container based integrations: the web UI will read the logs files from the <code>/var/log/bunkerweb</code> directory.</p> <p>To keep the logs accessible from the web UI, we recommend you to use a syslog server such as <code>syslog-ng</code> to read the logs and creates the corresponding files in the <code>/var/log/bunkerweb</code> directory.</p> <p>Using local folder for logs</p> <p>The web UI runs as an unprivileged user with UID 101 and GID 101 inside the container. The reason behind this is security : in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges.</p> <p>But there is a downside : if you use a local folder for the logs, you will need to set the correct permissions so the unprivileged user can read the log files. Something like that should do the trick :</p> <pre><code>mkdir bw-logs &amp;&amp; \\\nchown root:101 bw-logs &amp;&amp; \\\nchmod 770 bw-logs\n</code></pre> <p>Alternatively, if the folder already exists :</p> <pre><code>chown -R root:101 bw-logs &amp;&amp; \\\nchmod -R 770 bw-logs\n</code></pre> <p>If you are using Docker in rootless mode or podman, UIDs and GIDs in the container will be mapped to different ones in the host. You will first need to check your initial subuid and subgid :</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100) :</p> <pre><code>mkdir bw-logs &amp;&amp; \\\nsudo chgrp 100100 bw-logs &amp;&amp; \\\nchmod 770 bw-logs\n</code></pre> <p>Or if the folder already exists :</p> <pre><code>sudo chgrp -R 100100 bw-logs &amp;&amp; \\\nsudo chmod -R 770 bw-logs\n</code></pre>"},{"location":"web-ui/#compose-boilerplates","title":"Compose boilerplates","text":"DockerDocker Autoconf <p>To forward the logs correctly to the <code>/var/log/bunkerweb</code> directory on the Docker integration, you will need to stream the logs to a file using <code>syslog-ng</code>. Here is an example of how to do this :</p> <pre><code>x-bw-env: &amp;bw-env\n  # We anchor the environment variables to avoid duplication\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    logging:\n      driver: syslog\n      options:\n        tag: \"bunkerweb\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"www.example.com\"\n      MULTISITE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      SERVE_FILES: \"no\"\n      DISABLE_DEFAULT_SERVER: \"yes\"\n      USE_CLIENT_CACHE: \"yes\"\n      USE_GZIP: \"yes\"\n      www.example.com_USE_TEMPLATE: \"ui\"\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/changeme\" # Change it to a hard to guess URI\n      www.example.com_REVERSE_PROXY_HOST: \"http://bw-ui:7000\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-scheduler\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the admin user\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-ui\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n      bw-universe:\n        ipv4_address: 10.20.30.254 # Make sure to set the correct IP address\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>To forward the logs correctly to the <code>/var/log/bunkerweb</code> directory on the Autoconf integration, you will need to stream the logs to a file using <code>syslog-ng</code>. Here is an example of how to do this :</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    logging:\n      driver: syslog\n      options:\n        tag: \"bunkerweb\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf / ui\n      API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-scheduler\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # This is the Docker socket address\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-autoconf\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *bw-ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the admin user\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    volumes:\n      - bw-logs:/var/log/bunkerweb\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_TEMPLATE=ui\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/changeme\" # Change it to a hard to guess URI\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-ui\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n\n  bw-syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n      bw-universe:\n        ipv4_address: 10.20.30.254 # Make sure to set the correct IP address\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n  bw-docker:\n    name: bw-docker\n</code></pre>"},{"location":"web-ui/#syslog-ng-configuration","title":"Syslog-ng configuration","text":"<p>Here is an example of a <code>syslog-ng.conf</code> file that you can use to forward the logs to a file :</p> <pre><code>@version: 4.8\n\n# Source configuration to receive logs from Docker containers\nsource s_net {\n  udp(\n    ip(\"0.0.0.0\")\n  );\n};\n\n# Template to format log messages\ntemplate t_imp {\n  template(\"$MSG\\n\");\n  template_escape(no);\n};\n\n# Destination configuration to write logs to dynamically named files\ndestination d_dyna_file {\n  file(\n    \"/var/log/bunkerweb/${PROGRAM}.log\"\n    template(t_imp)\n    owner(\"101\")\n    group(\"101\")\n    dir_owner(\"root\")\n    dir_group(\"101\")\n    perm(0440)\n    dir_perm(0770)\n    create_dirs(yes)\n  );\n};\n\n# Log path to direct logs to dynamically named files\nlog {\n  source(s_net);\n  destination(d_dyna_file);\n};\n</code></pre>"},{"location":"web-ui/#account-management","title":"Account management","text":"<p>You can access the account management page by clicking on the profile image in the top right corner:</p> <p> </p> Account page access from top right corner"},{"location":"web-ui/#username-password","title":"Username / Password","text":"<p>Lost password/username</p> <p>In case you forgot your UI credentials, you can reset them from the CLI following the steps described in the troubleshooting section.</p> <p>You can update your username or password by filling the dedicated forms in the Security tab. For security reason, you need to enter your current password even if you are connected.</p> <p>Please note that when your username or password is updated, you will be logout from the web UI to log in again.</p> <p> </p> Username / Password form"},{"location":"web-ui/#two-factor-authentication","title":"Two-Factor authentication","text":"<p>Lost secret key</p> <p>In case you lost your secret key, two options are available :</p> <ul> <li>You can recover your account using one of the provided recovery codes when you enabled 2FA (a recovery code can only be used once).</li> <li>You can disable 2FA from the CLI following the steps described in the troubleshooting section.</li> </ul> <p>You can power-up your login security by adding Two-Factor Authentication (2FA) to your account. By doing so, an extra code will be needed in addition to your password.</p> <p>The web UI uses Time based One Time Password (TOTP) as 2FA implementation : using a secret key, the algorithm will generate one time passwords only valid for a short period of time.</p> <p>Any TOTP client such as Google Authenticator, Authy, FreeOTP, ... can be used to store the secret key and generate the codes. Please note that once TOTP is enabled, you won't be able to retrieve it from the web UI.</p> <p>The following steps are needed to enable the TOTP feature from the web UI :</p> <ul> <li>Copy the secret key or use the QR code on your authenticator app</li> <li>Enter the current TOTP code in the 2FA input</li> <li>Enter your current password</li> </ul> <p>Secret key refresh</p> <p>A new secret key is generated each time you visit the page or submit the form. In case something went wrong (e.g. : expired TOTP code), you will need to copy the new secret key to your authenticator app until 2FA is successfully enabled.</p> <p>Recovery codes</p> <p>When you enable 2FA, you will be provided with 5 recovery codes. These codes can be used to recover your account in case you have lost your TOTP secret key. Each code can only be used once. These codes will only be shown once so make sure to store them in a safe place.</p> <p>If you ever lose your recovery codes, you can refresh them via the TOTP section of the account management page. Please note that the old recovery codes will be invalidated.</p> <p>You can enable or disable 2FA and also refresh recovery codes in the Security tab:</p> <p> </p> TOTP enable / disable / refresh recovery codes forms <p>After a successful login/password combination, you will be prompted to enter your TOTP code:</p> <p> </p> 2FA on login page"},{"location":"web-ui/#current-sessions","title":"Current sessions","text":"<p>In the Session tab, you will be able to list and revoke current sessions:</p> <p> </p> Manage sessions"},{"location":"web-ui/#advanced-installation","title":"Advanced installation","text":"<p>The web UI can be deployed and configured without going through the setup wizard process: configuration is done through environment variables, which can be added directly to the containers or in the <code>/etc/bunkerweb/ui.env</code> file in the case of a Linux integration.</p> <p>Web UI specific environment variables</p> <p>The web UI uses the following environment variables :</p> <ul> <li><code>OVERRIDE_ADMIN_CREDS</code> : set it to <code>yes</code> to enable the override even if the admin credentials are already set (default is <code>no</code>).</li> <li><code>ADMIN_USERNAME</code> : username to access the web UI.</li> <li><code>ADMIN_PASSWORD</code> : password to access the web UI.</li> <li><code>FLASK_SECRET</code> : a secret key used to encrypt the session cookie (if not set, a random key will be generated).</li> <li><code>TOTP_SECRETS</code> : a list of TOTP secrets separated by spaces or a dictionary (e.g. : <code>{\"1\": \"mysecretkey\"}</code> or <code>mysecretkey</code> or <code>mysecretkey mysecretkey1</code>). We strongly recommend you to set this variable if you want to use 2FA, as it will be used to encrypt the TOTP secret keys (if not set, a random number of secret keys will be generated). Check out the passlib documentation for more information.</li> <li><code>LISTEN_ADDR</code> : the address where the web UI will listen (default is <code>0.0.0.0</code> in Docker images and <code>127.0.0.1</code> on Linux installations).</li> <li><code>LISTEN_PORT</code> : the port where the web UI will listen (default is <code>7000</code>).</li> <li><code>MAX_WORKERS</code> : the number of workers used by the web UI (default is the number of CPUs).</li> <li><code>MAX_THREADS</code> : the number of threads used by the web UI (default is <code>MAX_WORKERS</code> * 2).</li> <li><code>FORWARDED_ALLOW_IPS</code> : a list of IP addresses or networks that are allowed to be used in the <code>X-Forwarded-For</code> header (default is <code>*</code> in Docker images and <code>127.0.0.1</code> on Linux installations).</li> <li><code>CHECK_PRIVATE_IP</code> : set it to <code>yes</code> to not disconnect users that have their IP address changed during a session if they are in a private network (default is <code>yes</code>). (Non-private IP addresses are always checked).</li> </ul> <p>The web UI will use these variables to authenticate you and handle the 2FA feature.</p> <p>Generating recommended secrets</p> <p>To generate a valid ADMIN_PASSWORD, we recommend you to use a password manager or a password generator.</p> <p>You can generate a valid FLASK_SECRET using the following command :</p> <pre><code>python3 -c \"import secrets; print(secrets.token_hex(64))\"\n</code></pre> <p>You can generate valid space-separated TOTP_SECRETS using the following command (you will need the <code>passlib</code> package) :</p> <pre><code>python3 -c \"from passlib import totp; print(' '.join(totp.generate_secret() for i in range(1, 6)))\"\n</code></pre> LinuxDockerDocker autoconfKubernetesSwarm <p>The installation of the web UI using the Linux integration is pretty straightforward because it is installed with BunkerWeb.</p> <p>The web UI comes as systemd service named <code>bunkerweb-ui</code>, please ensure that it's enabled:</p> <pre><code>sudo systemctl enable bunkerweb-ui &amp;&amp; \\\nsudo systemctl status bunkerweb-ui\n</code></pre> <p>A dedicated environment file located at <code>/etc/bunkerweb/ui.env</code> is used to configure the web UI:</p> <pre><code>ADMIN_USERNAME=changeme\nADMIN_PASSWORD=changeme\nTOTP_SECRETS=mysecret\n</code></pre> <p>Replace the <code>changeme</code> data with your own values.</p> <p>Remember to set a stronger secret key for the <code>TOTP_SECRETS</code>.</p> <p>Each time you edit the <code>/etc/bunkerweb/ui.env</code> file, you will need to restart the service :</p> <pre><code>systemctl restart bunkerweb-ui\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. Please note that the web UI is listening on the <code>7000</code> port and only on the loopback interface.</p> <p>Here is the <code>/etc/bunkerweb/variables.env</code> boilerplate you can use:</p> <pre><code>HTTP_PORT=80\nHTTPS_PORT=443\nDNS_RESOLVERS=9.9.9.9 8.8.8.8 8.8.4.4\nAPI_LISTEN_IP=127.0.0.1\nSERVER_NAME=www.example.com\nMULTISITE=yes\nwww.example.com_USE_TEMPLATE=ui\nwww.example.com_USE_REVERSE_PROXY=yes\nwww.example.com_REVERSE_PROXY_URL=/changeme\nwww.example.com_REVERSE_PROXY_HOST=http://127.0.0.1:7000\n</code></pre> <p>Don't forget to reload the <code>bunkerweb</code> service:</p> <pre><code>systemctl reload bunkerweb\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the docker-compose files in the misc/integrations folder of the repository.</p> <p>Here is the docker-compose boilerplate that you can use (don't forget to edit the <code>changeme</code> data):</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"www.example.com\"\n      MULTISITE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # We mirror the API_WHITELIST_IP from the bunkerweb service\n      SERVE_FILES: \"no\"\n      DISABLE_DEFAULT_SERVER: \"yes\"\n      USE_CLIENT_CACHE: \"yes\"\n      USE_GZIP: \"yes\"\n      www.example.com_USE_TEMPLATE: \"ui\"\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/changeme\" # Remember to set a stronger URI\n      www.example.com_REVERSE_PROXY_HOST: \"http://bw-ui:7000\" # The web UI container is listening on the 7000 port by default\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself:</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Environment variables</p> <p>Please read the Prerequisites section to check out all the environment variables you can set to customize the web UI.</p> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler and autoconf) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the docker-compose files in the misc/integrations folder of the repository.</p> <p>Here is the docker-compose boilerplate that you can use (don't forget to edit the <code>changeme</code> data):</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # We set the instance label to allow the autoconf to detect the instance\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    depends_on:\n      - bw-docker\n    environment:\n      &lt;&lt;: *ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_TEMPLATE=ui\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/changeme\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n    networks:\n      - bw-universe\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub and you can deploy as a standard Deployment.</p> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. Network segmentation between web UI and web services is not covered in this documentation. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the yaml files in the misc/integrations folder of the repository.</p> <p>Here is the corresponding part of your values.yaml file that you can use:</p> <pre><code>settings:\n  # Use an existing secret named bunkerweb and containing the following values :\n  # - admin-username\n  # - admin-password\n  # - flask-secret\n  # - totp-secrets\n  existingSecret: \"secret-bunkerweb\"\nui:\n  wizard: false\n  ingress:\n    enabled: true\n    serverName: \"www.example.com\"\n    serverPath: \"/admin\"\n  overrideAdminCreds: \"yes\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler and autoconf) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the stack files in the misc/integrations folder of the repository.</p> <p>Here is the stack boilerplate that you can use (don't forget to edit the <code>changeme</code> data) :</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  SWARM_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.1\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # For QUIC / HTTP3 support\n    environment:\n      SWARM_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\n  bw-redis:\n    image: redis:7-alpine\n    networks:\n      - bw-universe\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.1\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_SECRETS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    networks:\n      - bw-universe\n      - bw-db\n    deploy:\n      labels:\n        - \"bunkerweb.SERVER_NAME=www.example.com\"\n        - \"bunkerweb.USE_TEMPLATE=ui\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_URL=/changeme\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre>"}]}