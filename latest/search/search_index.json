{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#overview","title":"Overview","text":"Make your web services secure by default! <p>BunkerWeb is a next-generation, open-source Web Application Firewall (WAF).</p> <p>As a full-featured web server (based on NGINX under the hood), it protects your web services to make them \"secure by default.\" BunkerWeb integrates seamlessly into your existing environments (Linux, Docker, Swarm, Kubernetes, \u2026) as a reverse proxy and is fully configurable (don't panic, there is an awesome web UI if you don't like the CLI) to meet your specific use cases. In other words, cybersecurity is no longer a hassle.</p> <p>BunkerWeb includes primary security features as part of the core but can be easily extended with additional ones thanks to a plugin system.</p>"},{"location":"#why-bunkerweb","title":"Why BunkerWeb?","text":"<ul> <li> <p>Easy integration into existing environments: Seamlessly integrate BunkerWeb into various environments such as Linux, Docker, Swarm, Kubernetes, and more. Enjoy a smooth transition and hassle-free implementation.</p> </li> <li> <p>Highly customizable: Tailor BunkerWeb to your specific requirements with ease. Enable, disable, and configure features effortlessly, allowing you to customize the security settings according to your unique use case.</p> </li> <li> <p>Secure by default: BunkerWeb provides out-of-the-box, hassle-free minimal security for your web services. Experience peace of mind and enhanced protection right from the start.</p> </li> <li> <p>Awesome web UI: Take control of BunkerWeb more efficiently with the exceptional web user interface (UI). Navigate settings and configurations effortlessly through a user-friendly graphical interface, eliminating the need for the command-line interface (CLI).</p> </li> <li> <p>Plugin system: Extend the capabilities of BunkerWeb to meet your own use cases. Seamlessly integrate additional security measures and customize the functionality of BunkerWeb according to your specific requirements.</p> </li> <li> <p>Free as in \"freedom\": BunkerWeb is licensed under the free AGPLv3 license, embracing the principles of freedom and openness. Enjoy the freedom to use, modify, and distribute the software, backed by a supportive community.</p> </li> <li> <p>Professional services: Get technical support, tailored consulting, and custom development directly from the maintainers of BunkerWeb. Visit the BunkerWeb Panel for more information.</p> </li> </ul>"},{"location":"#security-features","title":"Security features","text":"<p>Explore the impressive array of security features offered by BunkerWeb. While not exhaustive, here are some notable highlights:</p> <ul> <li> <p>HTTPS support with transparent Let's Encrypt automation: Easily secure your web services with automated Let's Encrypt integration, ensuring encrypted communication between clients and your server.</p> </li> <li> <p>State-of-the-art web security: Benefit from cutting-edge web security measures, including comprehensive HTTP security headers, prevention of data leaks, and TLS hardening techniques.</p> </li> <li> <p>Integrated ModSecurity WAF with the OWASP Core Rule Set: Enjoy enhanced protection against web application attacks with the integration of ModSecurity, fortified by the renowned OWASP Core Rule Set.</p> </li> <li> <p>Automatic ban of strange behaviors based on HTTP status codes: BunkerWeb intelligently identifies and blocks suspicious activities by automatically banning behaviors that trigger abnormal HTTP status codes.</p> </li> <li> <p>Apply connection and request limits for clients: Set limits on the number of connections and requests from clients, preventing resource exhaustion and ensuring fair usage of server resources.</p> </li> <li> <p>Block bots with challenge-based verification: Keep malicious bots at bay by challenging them to solve puzzles such as cookies, JavaScript tests, captchas, hCaptcha, reCAPTCHA, or Turnstile, effectively blocking unauthorized access.</p> </li> <li> <p>Block known bad IPs with external blacklists and DNSBL: Utilize external blacklists and DNS-based blackhole lists (DNSBL) to proactively block known malicious IP addresses, bolstering your defense against potential threats.</p> </li> <li> <p>And much more...: BunkerWeb is packed with a plethora of additional security features that go beyond this list, providing you with comprehensive protection and peace of mind.</p> </li> </ul> <p>To delve deeper into the core security features, we invite you to explore the security tuning section of the documentation. Discover how BunkerWeb empowers you to fine-tune and optimize security measures according to your specific needs.</p>"},{"location":"#demo","title":"Demo","text":"<p>A demo website protected with BunkerWeb is available at demo.bunkerweb.io. Feel free to visit it and perform some security tests.</p>"},{"location":"#web-ui","title":"Web UI","text":"<p>BunkerWeb offers an optional user interface to manage your instances and their configurations. An online read-only demo is available at demo-ui.bunkerweb.io. Feel free to test it yourself.</p>"},{"location":"#bunkerweb-cloud","title":"BunkerWeb Cloud","text":"BunkerWeb Cloud <p>Don't want to self-host and manage your own BunkerWeb instance(s)? You might be interested in BunkerWeb Cloud, our fully managed SaaS offering for BunkerWeb.</p> <p>Try our BunkerWeb Cloud offer and get access to:</p> <ul> <li>A fully managed BunkerWeb instance hosted in our cloud</li> <li>All BunkerWeb features, including PRO ones</li> <li>A monitoring platform with dashboards and alerts</li> <li>Technical support to assist you with configuration</li> </ul> <p>If you are interested in the BunkerWeb Cloud offering, don't hesitate to contact us so we can discuss your needs.</p>"},{"location":"#pro-version","title":"PRO version","text":"<p>BunkerWeb PRO free trial</p> <p>Want to quickly test BunkerWeb PRO for one month? Use the code <code>freetrial</code> when placing your order on the BunkerWeb panel or by clicking here to directly to apply the promo code (will be effective at checkout).</p> <p>When using BunkerWeb, you have the choice of the version you want to use: open-source or PRO.</p> <p>Whether it's enhanced security, an enriched user experience, or technical monitoring, the BunkerWeb PRO version allows you to fully benefit from BunkerWeb and meet your professional needs.</p> <p>In the documentation or the user interface, PRO features are annotated with a crown  to distinguish them from those integrated into the open-source version.</p> <p>You can upgrade from the open-source version to the PRO one easily and at any time. The process is straightforward:</p> <ul> <li>Claim your free trial on the BunkerWeb panel by using the <code>freetrial</code> promo code at checkout</li> <li>Once connected to the client area, copy your PRO license key</li> <li>Paste your private key into BunkerWeb using the web UI or specific setting</li> </ul> <p>Do not hesitate to visit the BunkerWeb panel or contact us if you have any questions regarding the PRO version.</p>"},{"location":"#professional-services","title":"Professional services","text":"<p>Get the most out of BunkerWeb by accessing professional services directly from the maintainers of the project. From technical support to tailored consulting and development, we are here to assist you in securing your web services.</p> <p>You will find more information by visiting the BunkerWeb Panel, our dedicated platform for professional services.</p> <p>Don't hesitate to contact us if you have any questions. We will be more than happy to respond to your needs.</p>"},{"location":"#ecosystem-community-and-resources","title":"Ecosystem, community, and resources","text":"<p>Official websites, tools, and resources about BunkerWeb:</p> <ul> <li>Website: Get more information, news, and articles about BunkerWeb.</li> <li>Panel: A dedicated platform to order and manage professional services (e.g., technical support) around BunkerWeb.</li> <li>Documentation: Technical documentation of the BunkerWeb solution.</li> <li>Demo: Demonstration website of BunkerWeb. Don't hesitate to attempt attacks to test the robustness of the solution.</li> <li>Web UI: Online read-only demo of the web UI of BunkerWeb.</li> <li>Threatmap: Live cyberattacks blocked by BunkerWeb instances all around the world.</li> </ul> <p>Community and social networks:</p> <ul> <li>Discord</li> <li>LinkedIn</li> <li>Twitter</li> <li>Reddit</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#who-maintains-bunkerweb","title":"Who maintains BunkerWeb?","text":"<p>BunkerWeb is maintained by Bunkerity, a French \ud83c\uddeb\ud83c\uddf7 company specialized in Cybersecurity \ud83d\udee1\ufe0f.</p>"},{"location":"about/#do-you-have-a-professional-version","title":"Do you have a professional version?","text":"<p>BunkerWeb PRO free trial</p> <p>Want to quickly test BunkerWeb PRO for one month? Use the code <code>freetrial</code> when placing your order on the BunkerWeb panel or by clicking here to directly to apply the promo code (will be effective at checkout).</p> <p>Yes, we do offer a professional version of BunkerWeb called \"BunkerWeb PRO\" with additional features and (optional) technical support.</p> <p>Don't hesitate to contact us if you have any questions, we will be more than happy to respond to your needs.</p>"},{"location":"about/#do-you-offer-professional-services","title":"Do you offer professional services?","text":"<p>Yes, we offer professional services related to BunkerWeb.</p> <p>You can get in touch with us about any of the following:</p> <ul> <li>Consulting</li> <li>Support</li> <li>Custom development</li> <li>Partnerships</li> </ul> <p>We have a dedicated panel to centralize all professional requests.</p> <p>You can also contact us if you are interested.</p>"},{"location":"about/#where-to-get-community-support","title":"Where to get community support?","text":"<p>To get free community support, you can use the following media:</p> <ul> <li>The #help channel of BunkerWeb in the Discord server</li> <li>The help category of GitHub discussions</li> <li>The /r/BunkerWeb subreddit</li> <li>The Server Fault and Super User forums</li> </ul> <p>Please don't use GitHub issues to ask for help, use it only for bug reports and feature requests.</p>"},{"location":"about/#how-can-i-contribute","title":"How can I contribute?","text":"<p>Here is a non-exhaustive list of what you can do:</p> <ul> <li>Join the Discord server, /r/BunkerWeb subreddit and GitHub discussions to talk about the project and help others</li> <li>Follow us on LinkedIn, Twitter and GitHub</li> <li>Report bugs and propose new features using issues</li> <li>Contribute to the code using pull requests</li> <li>Write an awesome plugin</li> <li>Talk about BunkerWeb to your friends/colleagues, on social media, on your blog, ...</li> </ul>"},{"location":"about/#how-to-report-security-issues","title":"How to report security issues?","text":"<p>Please contact us at security@bunkerity.com.</p>"},{"location":"advanced/","title":"Advanced usages","text":"<p>Many real-world use case examples are available in the examples folder of the GitHub repository.</p> <p>We also provide numerous boilerplates, such as YAML files for various integrations and database types. These are available in the misc/integrations folder.</p> <p>This section only focuses on advanced usages and security tuning, see the settings section of the documentation to see all the available settings.</p>"},{"location":"advanced/#use-cases","title":"Use cases","text":"<p>Testing</p> <p>To perform quick tests when multisite mode is enabled (and if you don't have the proper DNS entries set up for the domains) you can use curl with the HTTP Host header of your choice : <pre><code>curl -H \"Host: app1.example.com\" http://ip-or-fqdn-of-server\n</code></pre></p> <p>If you are using HTTPS, you will need to play with SNI : <pre><code>curl -H \"Host: app1.example.com\" --resolve example.com:443:ip-of-server https://example.com\n</code></pre></p>"},{"location":"advanced/#behind-load-balancer-or-reverse-proxy","title":"Behind load balancer or reverse proxy","text":"<p>Real IP</p> <p>When BunkerWeb is itself behind a load balancer or a reverse proxy, you need to configure it so it can get the real IP address of the clients. If you don't, the security features will block the IP address of the load balancer or reverse proxy instead of the client's one.</p> <p>BunkerWeb actually supports two methods to retrieve the real IP address of the client :</p> <ul> <li>Using the <code>PROXY protocol</code></li> <li>Using a HTTP header like <code>X-Forwarded-For</code></li> </ul> <p>The following settings can be used :</p> <ul> <li><code>USE_REAL_IP</code> : enable/disable real IP retrieval</li> <li><code>USE_PROXY_PROTOCOL</code> : enable/disable PROXY protocol support.</li> <li><code>REAL_IP_FROM</code> : list of trusted IP/network address allowed to send us the \"real IP\"</li> <li><code>REAL_IP_HEADER</code> : the HTTP header containing the real IP or special value <code>proxy_protocol</code> when using PROXY protocol</li> </ul> <p>You will find more settings about real IP in the settings section of the documentation.</p> HTTP headerProxy protocol <p>We will assume the following regarding the load balancers or reverse proxies (you will need to update the settings depending on your configuration) :</p> <ul> <li>They use the <code>X-Forwarded-For</code> header to set the real IP</li> <li>They have IPs in the <code>1.2.3.0/24</code> and <code>100.64.0.0/10</code> networks</li> </ul> Web UILinuxAll-in-oneDockerDocker autoconfKubernetesSwarm <p>Navigate to the Global config page, select the Real IP plugin and fill out the following settings :</p> <p>Real IP settings (header) using web UI</p> <p>Please note that it's recommended to restart BunkerWeb when you change settings related to real IP.</p> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_REAL_IP=yes\nREAL_IP_FROM=1.2.3.0/24 100.64.0.0/16\nREAL_IP_HEADER=X-Forwarded-For\n...\n</code></pre> <p>Please note that it's recommended to issue a restart instead of reload when configuring settings related to real IP :</p> <pre><code>sudo systemctl restart bunkerweb &amp;&amp; \\\nsudo systemctl restart bunkerweb-scheduler\n</code></pre> <p>You will need to add the settings to the environment variables when running the All-in-one container :</p> <pre><code>docker run -d \\\n    --name bunkerweb-aio \\\n    -v bw-storage:/data \\\n    -e USE_REAL_IP=\"yes\" \\\n    -e REAL_IP_FROM=\"1.2.3.0/24 100.64.0.0/10\" \\\n    -e REAL_IP_HEADER=\"X-Forwarded-For\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler pods.</p> <p>Here is the corresponding part of your <code>values.yaml</code> file that you can use :</p> <pre><code>bunkerweb:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"X-Forwarded-For\"\nscheduler:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"X-Forwarded-For\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler services:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"X-Forwarded-For\"\n  ...\n</code></pre> <p>Please note that if your service is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>Read carefully</p> <p>Only use the PROXY protocol if you are sure that your load balancer or reverse proxy is sending it. If you enable it and it's not used, you will get errors.</p> <p>We will assume the following regarding the load balancers or reverse proxies (you will need to update the settings depending on your configuration) :</p> <ul> <li>They use the <code>PROXY protocol</code> v1 or v2 to set the real IP</li> <li>They have IPs in the <code>1.2.3.0/24</code> and <code>100.64.0.0/10</code> networks</li> </ul> Web UILinuxAll-in-oneDockerDocker autoconfKubernetesSwarm <p>Navigate to the Global config page, select the Real IP plugin and fill out the following settings :</p> <p>Real IP settings (PROXY protocol) using web UI</p> <p>Please note that it's recommended to restart BunkerWeb when you change settings related to real IP.</p> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_REAL_IP=yes\nUSE_PROXY_PROTOCOL=yes\nREAL_IP_FROM=1.2.3.0/24 100.64.0.0/16\nREAL_IP_HEADER=proxy_protocol\n...\n</code></pre> <p>Please note that it's recommended to issue a restart instead of reload when configuring settings related to proxy protocols :</p> <pre><code>sudo systemctl restart bunkerweb &amp;&amp; \\\nsudo systemctl restart bunkerweb-scheduler\n</code></pre> <p>You will need to add the settings to the environment variables when running the All-in-one container :</p> <pre><code>docker run -d \\\n    --name bunkerweb-aio \\\n    -v bw-storage:/data \\\n    -e USE_REAL_IP=\"yes\" \\\n    -e USE_PROXY_PROTOCOL=\"yes\" \\\n    -e REAL_IP_FROM=\"1.2.3.0/24 100.64.0.0/10\" \\\n    -e REAL_IP_HEADER=\"X-Forwarded-For\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler containers:</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler pods.</p> <p>Here is the corresponding part of your <code>values.yaml</code> file that you can use:</p> <pre><code>bunkerweb:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: USE_PROXY_PROTOCOL\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"proxy_protocol\"\nscheduler:\n  extraEnvs:\n    - name: USE_REAL_IP\n      value: \"yes\"\n    - name: USE_PROXY_PROTOCOL\n      value: \"yes\"\n    - name: REAL_IP_FROM\n      value: \"1.2.3.0/24 100.64.0.0/10\"\n    - name: REAL_IP_HEADER\n      value: \"proxy_protocol\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You will need to add the settings to the environment variables of both the BunkerWeb and scheduler services.</p> <pre><code>bunkerweb:\n  image: bunkerity/bunkerweb:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  ...\n  environment:\n    USE_REAL_IP: \"yes\"\n    USE_PROXY_PROTOCOL: \"yes\"\n    REAL_IP_FROM: \"1.2.3.0/24 100.64.0.0/10\"\n    REAL_IP_HEADER: \"proxy_protocol\"\n  ...\n</code></pre> <p>Please note that if your service is already created, you will need to delete it and recreate it so the new environment variables will be updated.</p>"},{"location":"advanced/#using-custom-dns-resolution-mechanisms","title":"Using custom DNS resolution mechanisms","text":"<p>BunkerWeb's NGINX configuration can be customized to use different DNS resolvers depending on your needs. This can be particularly useful in various scenarios:</p> <ol> <li>To respect entries in your local <code>/etc/hosts</code> file</li> <li>When you need to use custom DNS servers for certain domains</li> <li>To integrate with local DNS caching solutions</li> </ol>"},{"location":"advanced/#using-systemd-resolved","title":"Using systemd-resolved","text":"<p>Many modern Linux systems use <code>systemd-resolved</code> for DNS resolution. If you want BunkerWeb to respect the content of your <code>/etc/hosts</code> file and use the system's DNS resolution mechanism, you can configure it to use the local systemd-resolved DNS service.</p> <p>To verify that systemd-resolved is running on your system, you can use:</p> <pre><code>systemctl status systemd-resolved\n</code></pre> <p>To enable systemd-resolved as your DNS resolver in BunkerWeb, set the <code>DNS_RESOLVERS</code> setting to <code>127.0.0.53</code>, which is the default listening address for systemd-resolved:</p> Web UILinux <p>Navigate to the Global config page and set the DNS resolvers to <code>127.0.0.53</code></p> <p>You will need to modify the <code>/etc/bunkerweb/variables.env</code> file:</p> <pre><code>...\nDNS_RESOLVERS=127.0.0.53\n...\n</code></pre> <p>After making this change, reload BunkerWeb to apply the configuration:</p> <pre><code>sudo systemctl reload bunkerweb-scheduler\n</code></pre>"},{"location":"advanced/#using-dnsmasq","title":"Using dnsmasq","text":"<p>dnsmasq is a lightweight DNS, DHCP, and TFTP server that's commonly used for local DNS caching and customization. It's particularly useful when you need more control over your DNS resolution than systemd-resolved provides.</p> LinuxAll-in-oneDocker <p>First, install and configure dnsmasq on your Linux system:</p> Debian/UbuntuRHEL/Fedora <pre><code># Install dnsmasq\nsudo apt-get update &amp;&amp; sudo apt-get install dnsmasq\n\n# Configure dnsmasq to listen only on localhost\necho \"listen-address=127.0.0.1\" | sudo tee -a /etc/dnsmasq.conf\necho \"bind-interfaces\" | sudo tee -a /etc/dnsmasq.conf\n\n# Add custom DNS entries if needed\necho \"address=/custom.example.com/192.168.1.10\" | sudo tee -a /etc/dnsmasq.conf\n\n# Restart dnsmasq\nsudo systemctl restart dnsmasq\nsudo systemctl enable dnsmasq\n</code></pre> <pre><code># Install dnsmasq\nsudo dnf install dnsmasq\n\n# Configure dnsmasq to listen only on localhost\necho \"listen-address=127.0.0.1\" | sudo tee -a /etc/dnsmasq.conf\necho \"bind-interfaces\" | sudo tee -a /etc/dnsmasq.conf\n\n# Add custom DNS entries if needed\necho \"address=/custom.example.com/192.168.1.10\" | sudo tee -a /etc/dnsmasq.conf\n\n# Restart dnsmasq\nsudo systemctl restart dnsmasq\nsudo systemctl enable dnsmasq\n</code></pre> <p>Then configure BunkerWeb to use dnsmasq by setting <code>DNS_RESOLVERS</code> to <code>127.0.0.1</code>:</p> Web UILinux <p>Navigate to the Global config page, select the NGINX plugin and set the DNS resolvers to <code>127.0.0.1</code>.</p> <p>You will need to modify the <code>/etc/bunkerweb/variables.env</code> file:</p> <pre><code>...\nDNS_RESOLVERS=127.0.0.1\n...\n</code></pre> <p>After making this change, reload BunkerWeb:</p> <pre><code>sudo systemctl reload bunkerweb-scheduler\n</code></pre> <p>When using the All-in-one container, run dnsmasq in a separate container and configure BunkerWeb to use it:</p> <pre><code># Create a custom network for DNS communication\ndocker network create bw-dns\n\n# Run dnsmasq container using dockurr/dnsmasq with Quad9 DNS\n# Quad9 provides security-focused DNS resolution with malware blocking\ndocker run -d \\\n    --name dnsmasq \\\n    --network bw-dns \\\n    -e DNS1=\"9.9.9.9\" \\\n    -e DNS2=\"149.112.112.112\" \\\n    -p 53:53/udp \\\n    -p 53:53/tcp \\\n    --cap-add=NET_ADMIN \\\n    --restart=always \\\n    dockurr/dnsmasq\n\n# Run BunkerWeb All-in-one with dnsmasq DNS resolver\ndocker run -d \\\n    --name bunkerweb-aio \\\n    --network bw-dns \\\n    -v bw-storage:/data \\\n    -e DNS_RESOLVERS=\"dnsmasq\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Add a dnsmasq service to your docker-compose file and configure BunkerWeb to use it:</p> <pre><code>services:\n  dnsmasq:\n    image: dockurr/dnsmasq\n    container_name: dnsmasq\n    environment:\n      # Using Quad9 DNS servers for enhanced security and privacy\n      # Primary: 9.9.9.9 (Quad9 with malware blocking)\n      # Secondary: 149.112.112.112 (Quad9 backup server)\n      DNS1: \"9.9.9.9\"\n      DNS2: \"149.112.112.112\"\n    ports:\n      - 53:53/udp\n      - 53:53/tcp\n    cap_add:\n      - NET_ADMIN\n    restart: always\n    networks:\n      - bw-dns\n\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ...\n    environment:\n      DNS_RESOLVERS: \"dnsmasq\"\n    ...\n    networks:\n      - bw-universe\n      - bw-services\n      - bw-dns\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    ...\n    environment:\n      DNS_RESOLVERS: \"dnsmasq\"\n    ...\n    networks:\n      - bw-universe\n      - bw-dns\n\nnetworks:\n  # ...existing networks...\n  bw-dns:\n    name: bw-dns\n</code></pre>"},{"location":"advanced/#custom-configurations","title":"Custom configurations","text":"<p>To customize and add custom configurations to BunkerWeb, you can take advantage of its NGINX foundation. Custom NGINX configurations can be added in different NGINX contexts, including configurations for the ModSecurity Web Application Firewall (WAF), which is a core component of BunkerWeb. More details about ModSecurity configurations can be found here.</p> <p>Here are the available types of custom configurations:</p> <ul> <li>http: Configurations at the HTTP level of NGINX.</li> <li>server-http: Configurations at the HTTP/Server level of NGINX.</li> <li>default-server-http: Configurations at the Server level of NGINX, specifically for the \"default server\" when the supplied client name doesn't match any server name in <code>SERVER_NAME</code>.</li> <li>modsec-crs: Configurations applied before the OWASP Core Rule Set is loaded.</li> <li>modsec: Configurations applied after the OWASP Core Rule Set is loaded, or used when the Core Rule Set is not loaded.</li> <li>crs-plugins-before: Configurations for the CRS plugins, applied before the CRS plugins are loaded.</li> <li>crs-plugins-after: Configurations for the CRS plugins, applied after the CRS plugins are loaded.</li> <li>stream: Configurations at the Stream level of NGINX.</li> <li>server-stream: Configurations at the Stream/Server level of NGINX.</li> </ul> <p>Custom configurations can be applied globally or specifically for a particular server, depending on the applicable context and whether the multisite mode is enabled.</p> <p>The method for applying custom configurations depends on the integration being used. However, the underlying process involves adding files with the <code>.conf</code> suffix to specific folders. To apply a custom configuration for a specific server, the file should be placed in a subfolder named after the primary server name.</p> <p>Some integrations provide more convenient ways to apply configurations, such as using Configs in Docker Swarm or ConfigMap in Kubernetes. These options offer simpler approaches for managing and applying configurations.</p> Web UILinuxAll-in-oneDockerDocker autoconfKubernetesSwarm <p>Navigate to the Configs page, click on Create new custom config, you can then choose if it's a global one or specific to a service, the configuration type and the configuration name :</p> <p>Custom configurations using web UI</p> <p>Don't forget to click on the save button.</p> <p>When using the Linux integration, custom configurations must be written to the /etc/bunkerweb/configs folder.</p> <p>Here is an example for server-http/hello-world.conf :</p> <pre><code>location /hello {\n  default_type 'text/plain';\n  content_by_lua_block {\n    ngx.say('world')\n  }\n}\n</code></pre> <p>Because BunkerWeb runs as an unprivileged user (nginx:nginx), you will need to edit the permissions :</p> <pre><code>chown -R root:nginx /etc/bunkerweb/configs &amp;&amp; \\\nchmod -R 770 /etc/bunkerweb/configs\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre> <p>When using the All-in-one image, you have two choices for adding custom configurations:</p> <ul> <li>Using specific settings <code>*_CUSTOM_CONF_*</code> as environment variables when running the container (recommended).</li> <li>Writing <code>.conf</code> files to the <code>/data/configs/</code> directory within the volume mounted to <code>/data</code>.</li> </ul> <p>Using settings (Environment Variables)</p> <p>The settings to use must follow the pattern <code>&lt;SITE&gt;_CUSTOM_CONF_&lt;TYPE&gt;_&lt;NAME&gt;</code>:</p> <ul> <li><code>&lt;SITE&gt;</code> : Optional primary server name if multisite mode is enabled and the config must be applied to a specific service.</li> <li><code>&lt;TYPE&gt;</code> : The type of config, accepted values are <code>HTTP</code>, <code>DEFAULT_SERVER_HTTP</code>, <code>SERVER_HTTP</code>, <code>MODSEC</code>, <code>MODSEC_CRS</code>, <code>CRS_PLUGINS_BEFORE</code>, <code>CRS_PLUGINS_AFTER</code>, <code>STREAM</code> and <code>SERVER_STREAM</code>.</li> <li><code>&lt;NAME&gt;</code> : The name of config without the <code>.conf</code> suffix.</li> </ul> <p>Here is a dummy example when running the All-in-one container:</p> <pre><code>docker run -d \\\n    --name bunkerweb-aio \\\n    -v bw-storage:/data \\\n    -e \"CUSTOM_CONF_SERVER_HTTP_hello-world=location /hello { \\\n        default_type 'text/plain'; \\\n        content_by_lua_block { \\\n          ngx.say('world'); \\\n        } \\\n      }\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it for the new environment variables to be applied.</p> <p>Using files</p> <p>The first thing to do is to create the folders :</p> <pre><code>mkdir -p ./bw-data/configs/server-http\n</code></pre> <p>You can now write your configurations :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" &gt; ./bw-data/configs/server-http/hello-world.conf\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>When starting the scheduler container, you will need to mount the folder on /data :</p> <pre><code>docker run -d \\\n    --name bunkerweb-aio \\\n    -v ./bw-data:/data \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>When using the Docker integration, you have two choices for the addition of custom configurations :</p> <ul> <li>Using specific settings <code>*_CUSTOM_CONF_*</code> as environment variables (recommended)</li> <li>Writing .conf files to the volume mounted on /data of the scheduler</li> </ul> <p>Using settings</p> <p>The settings to use must follow the pattern <code>&lt;SITE&gt;_CUSTOM_CONF_&lt;TYPE&gt;_&lt;NAME&gt;</code> :</p> <ul> <li><code>&lt;SITE&gt;</code> : optional primary server name if multisite mode is enabled and the config must be applied to a specific service</li> <li><code>&lt;TYPE&gt;</code> : the type of config, accepted values are <code>HTTP</code>, <code>DEFAULT_SERVER_HTTP</code>, <code>SERVER_HTTP</code>, <code>MODSEC</code>, <code>MODSEC_CRS</code>, <code>CRS_PLUGINS_BEFORE</code>, <code>CRS_PLUGINS_AFTER</code>, <code>STREAM</code> and <code>SERVER_STREAM</code></li> <li><code>&lt;NAME&gt;</code> : the name of config without the .conf suffix</li> </ul> <p>Here is a dummy example using a docker-compose file :</p> <pre><code>...\nbw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  environment:\n    - |\n      CUSTOM_CONF_SERVER_HTTP_hello-world=\n      location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n          ngx.say('world')\n          }\n      }\n  ...\n</code></pre> <p>Using files</p> <p>The first thing to do is to create the folders :</p> <pre><code>mkdir -p ./bw-data/configs/server-http\n</code></pre> <p>You can now write your configurations :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" &gt; ./bw-data/configs/server-http/hello-world.conf\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>When starting the scheduler container, you will need to mount the folder on /data :</p> <pre><code>bw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  volumes:\n    - ./bw-data:/data\n  ...\n</code></pre> <p>When using the Docker autoconf integration, you have two choices for adding custom configurations :</p> <ul> <li>Using specific settings <code>*_CUSTOM_CONF_*</code> as labels (easiest)</li> <li>Writing .conf files to the volume mounted on /data of the scheduler</li> </ul> <p>Using labels</p> <p>Limitations using labels</p> <p>When using labels with the Docker autoconf integration, you can only apply custom configurations for the corresponding web service. Applying http, default-server-http, stream or any global configurations (like server-http or server-stream for all services) is not possible : you will need to mount files for that purpose.</p> <p>The labels to use must follow the pattern <code>bunkerweb.CUSTOM_CONF_&lt;TYPE&gt;_&lt;NAME&gt;</code> :</p> <ul> <li><code>&lt;TYPE&gt;</code> : the type of config, accepted values are <code>SERVER_HTTP</code>, <code>MODSEC</code>, <code>MODSEC_CRS</code>, <code>CRS_PLUGINS_BEFORE</code>, <code>CRS_PLUGINS_AFTER</code> and <code>SERVER_STREAM</code></li> <li><code>&lt;NAME&gt;</code> : the name of config without the .conf suffix</li> </ul> <p>Here is a dummy example using a docker-compose file :</p> <pre><code>myapp:\n  image: nginxdemos/nginx-hello\n  labels:\n    - |\n      bunkerweb.CUSTOM_CONF_SERVER_HTTP_hello-world=\n      location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n            ngx.say('world')\n        }\n        }\n  ...\n</code></pre> <p>Using files</p> <p>The first thing to do is to create the folders :</p> <pre><code>mkdir -p ./bw-data/configs/server-http\n</code></pre> <p>You can now write your configurations :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" &gt; ./bw-data/configs/server-http/hello-world.conf\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>When starting the scheduler container, you will need to mount the folder on /data :</p> <pre><code>bw-scheduler:\n  image: bunkerity/bunkerweb-scheduler:1.6.4\n  volumes:\n    - ./bw-data:/data\n  ...\n</code></pre> <p>When using the Kubernetes integration, custom configurations are managed using ConfigMap.</p> <p>To keep it simple, you don't even need to use the ConfigMap with a Pod (e.g. as environment variable or volume) : the autoconf Pod is listening for ConfigMap events and will update the custom configurations when needed.</p> <p>When creating a ConfigMap, you will need to add special labels :</p> <ul> <li>bunkerweb.io/CONFIG_TYPE : must be set to a valid custom configuration type (http, server-http, default-server-http, modsec, modsec-crs, crs-plugins-before, crs-plugins-after, stream or server-stream)</li> <li>bunkerweb.io/CONFIG_SITE : set to a server name to apply configuration to that specific server (optional, will be applied globally if unset)</li> </ul> <p>Here is the example :</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cfg-bunkerweb-all-server-http\n  annotations:\n      bunkerweb.io/CONFIG_TYPE: \"server-http\"\ndata:\n  myconf: |\n    location /hello {\n        default_type 'text/plain';\n        content_by_lua_block {\n            ngx.say('world')\n        }\n    }\n</code></pre> <p>Custom Extra Config</p> <p>Since the <code>1.6.0-rc3</code> version, you can add/override settings using the <code>bunkerweb.io/CONFIG_TYPE=settings</code> annotation. Here is an example :</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cfg-bunkerweb-extra-settings\n  annotations:\n    bunkerweb.io/CONFIG_TYPE: \"settings\"\ndata:\n  USE_ANTIBOT: \"captcha\" # multisite setting that will be applied to all services that do not override it\n  USE_REDIS: \"yes\" # global setting that will be applied globally\n  ...\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>When using the Swarm integration, custom configurations are managed using Docker Configs.</p> <p>To keep it simple, you don't even need to attach the Config to a service : the autoconf service is listening for Config events and will update the custom configurations when needed.</p> <p>When creating a Config, you will need to add special labels :</p> <ul> <li>bunkerweb.CONFIG_TYPE : must be set to a valid custom configuration type (http, server-http, default-server-http, modsec, modsec-crs, crs-plugins-before, crs-plugins-after, stream or server-stream)</li> <li>bunkerweb.CONFIG_SITE : set to a server name to apply configuration to that specific server (optional, will be applied globally if unset)</li> </ul> <p>Here is the example :</p> <pre><code>echo \"location /hello {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('world')\n    }\n}\" | docker config create -l bunkerweb.CONFIG_TYPE=server-http my-config -\n</code></pre> <p>There is no update mechanism : the alternative is to remove an existing config using <code>docker config rm</code> and then recreate it.</p>"},{"location":"advanced/#running-many-services-in-production","title":"Running many services in production","text":""},{"location":"advanced/#global-crs","title":"Global CRS","text":"<p>CRS plugins</p> <p>When the CRS is loaded globally, CRS plugins are not supported. If you need to use them, you will need to load the CRS per service.</p> <p>If you use BunkerWeb in production with a large number of services, and you enable the ModSecurity feature globally with CRS rules, the time required to load BunkerWeb configurations may become too long, potentially resulting in a timeout.</p> <p>The workaround is to load the CRS rules globally rather than per service. This behavior is not enabled by default for backward compatibility reasons and because it has a drawback: if you enable global CRS rule loading, it will no longer be possible to define modsec-crs rules (executed before the CRS rules) on a per-service basis. However, this limitation can be bypassed by writing global <code>modsec-crs</code> exclusion rules like this:</p> <pre><code>SecRule REQUEST_FILENAME \"@rx ^/somewhere$\" \"nolog,phase:4,allow,id:1010,chain\"\nSecRule REQUEST_HEADERS:Host \"@rx ^app1\\.example\\.com$\" \"nolog\"\n</code></pre> <p>You can enable the global CRS loading by setting <code>USE_MODSECURITY_GLOBAL_CRS</code> to <code>yes</code>.</p>"},{"location":"advanced/#adjust-max_allowed_packet-for-mariadbmysql","title":"Adjust max_allowed_packet for MariaDB/MySQL","text":"<p>It appears that the default value for the <code>max_allowed_packet</code> parameter in MariaDB and MySQL database servers is not sufficient when using BunkerWeb with a large number of services.</p> <p>If you encounter errors like this, especially on the scheduler:</p> <pre><code>[Warning] Aborted connection 5 to db: 'db' user: 'bunkerweb' host: '172.20.0.4' (Got a packet bigger than 'max_allowed_packet' bytes)\n</code></pre> <p>You will need to increase the <code>max_allowed_packet</code> on your database server.</p>"},{"location":"advanced/#persistence-of-bans-and-reports","title":"Persistence of bans and reports","text":"<p>By default, BunkerWeb stores bans and reports in a local Lua datastore. While simple and efficient, this setup means that data is lost when the instance is restarted. To ensure that bans and reports persist across restarts, you can configure BunkerWeb to use a remote Redis or Valkey server.</p> <p>Why Use Redis/Valkey?</p> <p>Redis and Valkey are powerful, in-memory data stores commonly used as databases, caches, and message brokers. They are highly scalable and support a variety of data structures, including:</p> <ul> <li>Strings: Basic key-value pairs.</li> <li>Hashes: Field-value pairs within a single key.</li> <li>Lists: Ordered collections of strings.</li> <li>Sets: Unordered collections of unique strings.</li> <li>Sorted Sets: Ordered collections with scores.</li> </ul> <p>By leveraging Redis or Valkey, BunkerWeb can persistently store bans, reports, and cache data, ensuring durability and scalability.</p> <p>Enabling Redis/Valkey Support</p> <p>To enable Redis or Valkey support, configure the following settings in your BunkerWeb configuration file:</p> <pre><code># Enable Redis/Valkey support\nUSE_REDIS=yes\n\n# Redis/Valkey server hostname or IP address\nREDIS_HOST=&lt;hostname&gt;\n\n# Redis/Valkey server port number (default: 6379)\nREDIS_PORT=6379\n\n# Redis/Valkey database number (default: 0)\nREDIS_DATABASE=0\n</code></pre> <ul> <li><code>USE_REDIS</code>: Set to <code>yes</code> to enable Redis/Valkey integration.</li> <li><code>REDIS_HOST</code>: Specify the hostname or IP address of the Redis/Valkey server.</li> <li><code>REDIS_PORT</code>: Specify the port number for the Redis/Valkey server. Defaults to <code>6379</code>.</li> <li><code>REDIS_DATABASE</code>: Specify the Redis/Valkey database number to use. Defaults to <code>0</code>.</li> </ul> <p>If you require more advanced settings, such as authentication, SSL/TLS support, or Sentinel mode, refer to the Redis plugin settings documentation for detailed guidance.</p>"},{"location":"advanced/#protect-udptcp-applications","title":"Protect UDP/TCP applications","text":"<p>Experimental feature</p> <p>This feature is not production-ready. Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>BunkerWeb offers the capability to function as a generic UDP/TCP reverse proxy, allowing you to protect any network-based applications operating at least on layer 4 of the OSI model. Instead of utilizing the \"classical\" HTTP module, BunkerWeb leverages the stream module of NGINX.</p> <p>It's important to note that not all settings and security features are available when using the stream module. Additional information on this can be found in the settings sections of the documentation.</p> <p>Configuring a basic reverse proxy is quite similar to the HTTP setup, as it involves using the same settings: <code>USE_REVERSE_PROXY=yes</code> and <code>REVERSE_PROXY_HOST=myapp:9000</code>. Even when BunkerWeb is positioned behind a Load Balancer, the settings remain the same (with PROXY protocol being the supported option due to evident reasons).</p> <p>On top of that, the following specific settings are used :</p> <ul> <li><code>SERVER_TYPE=stream</code> : activate <code>stream</code> mode (generic UDP/TCP) instead of <code>http</code> one (which is the default)</li> <li><code>LISTEN_STREAM_PORT=4242</code> : the listening \"plain\" (without SSL/TLS) port that BunkerWeb will listen on</li> <li><code>LISTEN_STREAM_PORT_SSL=4343</code> : the listening \"ssl/tls\" port that BunkerWeb will listen on</li> <li><code>USE_UDP=no</code> : listen for and forward UDP packets instead of TCP</li> </ul> <p>For complete list of settings regarding <code>stream</code> mode, please refer to the settings section of the documentation.</p> <p>multiple listening ports</p> <p>Since the <code>1.6.0-rc2</code> version, BunkerWeb supports multiple listening ports for the <code>stream</code> mode. You can specify them using the <code>LISTEN_STREAM_PORT</code> and <code>LISTEN_STREAM_PORT_SSL</code> settings.</p> <p>Here is an example :</p> <pre><code>...\nLISTEN_STREAM_PORT=4242\nLISTEN_STREAM_PORT_SSL=4343\nLISTEN_STREAM_PORT_1=4244\nLISTEN_STREAM_PORT_SSL_1=4344\n...\n</code></pre> All-in-oneDockerDocker autoconfSwarmKubernetesLinux <p>You will need to add the settings to the environment variables when running the All-in-one container. You will also need to expose the stream ports.</p> <p>This example configures BunkerWeb to proxy two stream-based applications, <code>app1.example.com</code> and <code>app2.example.com</code>.</p> <pre><code>docker run -d \\\n    --name bunkerweb-aio \\\n    -v bw-storage:/data \\\n    -e SERVICE_UI=\"no\" \\\n    -e SERVER_NAME=\"app1.example.com app2.example.com\" \\\n    -e MULTISITE=\"yes\" \\\n    -e USE_REVERSE_PROXY=\"yes\" \\\n    -e SERVER_TYPE=\"stream\" \\\n    -e app1.example.com_REVERSE_PROXY_HOST=\"myapp1:9000\" \\\n    -e app1.example.com_LISTEN_STREAM_PORT=\"10000\" \\\n    -e app2.example.com_REVERSE_PROXY_HOST=\"myapp2:9000\" \\\n    -e app2.example.com_LISTEN_STREAM_PORT=\"20000\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    -p 10000:10000/tcp \\\n    -p 20000:20000/tcp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it for the new environment variables to be applied.</p> <p>Your applications (<code>myapp1</code>, <code>myapp2</code>) should be running in separate containers (or be otherwise accessible) and their hostnames/IPs (e.g., <code>myapp1</code>, <code>myapp2</code> used in <code>_REVERSE_PROXY_HOST</code>) must be resolvable and reachable from the <code>bunkerweb-aio</code> container. This typically involves connecting them to a shared Docker network.</p> <p>Deactivate UI Service</p> <p>Deactivating the UI service (e.g., by setting <code>SERVICE_UI=no</code> as an environment variable) is recommended as the Web UI is not compatible with <code>SERVER_TYPE=stream</code>.</p> <p>When using Docker integration, the easiest way of protecting existing network applications is to add the services in the <code>bw-services</code> network :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080\" # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - \"10000:10000\" # app1\n      - \"20000:20000\" # app2\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"app1.example.com app2.example.com\"\n      MULTISITE: \"yes\"\n      USE_REVERSE_PROXY: \"yes\" # Will be applied to all services\n      SERVER_TYPE: \"stream\" # Will be applied to all services\n      app1.example.com_REVERSE_PROXY_HOST: \"myapp1:9000\"\n      app1.example.com_LISTEN_STREAM_PORT: \"10000\"\n      app2.example.com_REVERSE_PROXY_HOST: \"myapp2:9000\"\n      app2.example.com_LISTEN_STREAM_PORT: \"20000\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n</code></pre> <p>Before running the Docker autoconf integration stack on your machine, you will need to edit the ports :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080\" # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - \"10000:10000\" # app1\n      - \"20000:20000\" # app2\n...\n</code></pre> <p>Once the stack is running, you can connect your existing applications to the <code>bw-services</code> network and configure BunkerWeb with labels :</p> <pre><code>services:\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.SERVER_NAME=app1.example.com\"\n      - \"bunkerweb.SERVER_TYPE=stream\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=myapp1:9000\"\n      - \"bunkerweb.LISTEN_STREAM_PORT=10000\"\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.SERVER_NAME=app2.example.com\"\n      - \"bunkerweb.SERVER_TYPE=stream\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=myapp2:9000\"\n      - \"bunkerweb.LISTEN_STREAM_PORT=20000\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Before running the Swarm integration stack on your machine, you will need to edit the ports :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      # app1\n      - published: 10000\n        target: 10000\n        mode: host\n        protocol: tcp\n      # app2\n      - published: 20000\n        target: 20000\n        mode: host\n        protocol: tcp\n...\n</code></pre> <p>Once the stack is running, you can connect your existing applications to the <code>bw-services</code> network and configure BunkerWeb with labels :</p> <pre><code>services:\n\n  myapp1:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app1\" ]\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.SERVER_NAME=app1.example.com\"\n        - \"bunkerweb.SERVER_TYPE=stream\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=myapp1:9000\"\n        - \"bunkerweb.LISTEN_STREAM_PORT=10000\"\n\n  myapp2:\n    image: istio/tcp-echo-server:1.3\n    command: [ \"9000\", \"app2\" ]\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.SERVER_NAME=app2.example.com\"\n        - \"bunkerweb.SERVER_TYPE=stream\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=myapp2:9000\"\n        - \"bunkerweb.LISTEN_STREAM_PORT=20000\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Experimental feature</p> <p>At the moment, Ingresses does not support the <code>stream</code> mode. What we are doing here is a workaround to make it work.</p> <p>Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>Before running the Kubernetes integration stack on your machine, you will need to open the ports on your load balancer :</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: lb\nspec:\n  type: LoadBalancer\n  ports:\n    - name: http # Keep it if you want to use Let's Encrypt automation when using http challenge type\n      port: 80\n      targetPort: 8080\n    - name: app1\n      port: 10000\n      targetPort: 10000\n    - name: app2\n      port: 20000\n      targetPort: 20000\n  selector:\n    app: bunkerweb\n</code></pre> <p>Once the stack is running, you can create your ingress resources :</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  namespace: services\n  annotations:\n    bunkerweb.io/SERVER_TYPE: \"stream\" # Will be applied to all services\n    bunkerweb.io/app1.example.com_LISTEN_STREAM_PORT: \"10000\"\n    bunkerweb.io/app2.example.com_LISTEN_STREAM_PORT: \"20000\"\nspec:\n  rules:\n    - host: app1.example.com\n      http:\n        paths:\n          - path: / # This isn't used in stream mode but is required\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-app1\n                port:\n                  number: 9000\n    - host: app2.example.com\n      http:\n        paths:\n          - path: / # This isn't used in stream mode but is required\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-app2\n                port:\n                  number: 9000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app1\n  namespace: services\n  labels:\n    app: app1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app1\n  template:\n    metadata:\n      labels:\n        app: app1\n    spec:\n      containers:\n        - name: app1\n          image: istio/tcp-echo-server:1.3\n          args: [\"9000\", \"app1\"]\n          ports:\n            - containerPort: 9000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app1\n  namespace: services\nspec:\n  selector:\n    app: app1\n  ports:\n    - protocol: TCP\n      port: 9000\n      targetPort: 9000\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app2\n  namespace: services\n  labels:\n    app: app2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app2\n  template:\n    metadata:\n      labels:\n        app: app2\n    spec:\n      containers:\n        - name: app2\n          image: istio/tcp-echo-server:1.3\n          args: [\"9000\", \"app2\"]\n          ports:\n            - containerPort: 9000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app2\n  namespace: services\nspec:\n  selector:\n    app: app2\n  ports:\n    - protocol: TCP\n      port: 9000\n      targetPort: 9000\n</code></pre> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nSERVER_NAME=app1.example.com app2.example.com\nMULTISITE=yes\nUSE_REVERSE_PROXY=yes\nSERVER_TYPE=stream\napp1.example.com_REVERSE_PROXY_HOST=myapp1.domain.or.ip:9000\napp1.example.com_LISTEN_STREAM_PORT=10000\napp2.example.com_REVERSE_PROXY_HOST=myapp2.domain.or.ip:9000\napp2.example.com_LISTEN_STREAM_PORT=20000\n...\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre>"},{"location":"advanced/#php","title":"PHP","text":"<p>Experimental feature</p> <p>At the moment, PHP support with BunkerWeb is still in beta and we recommend you use a reverse-proxy architecture if you can. By the way, PHP is not supported at all for some integrations like Kubernetes.</p> <p>BunkerWeb supports PHP using external or remote PHP-FPM instances. We will assume that you are already familiar with managing that kind of services.</p> <p>The following settings can be used :</p> <ul> <li><code>REMOTE_PHP</code> : Hostname of the remote PHP-FPM instance.</li> <li><code>REMOTE_PHP_PATH</code> : Root folder containing files in the remote PHP-FPM instance.</li> <li><code>REMOTE_PHP_PORT</code> : Port of the remote PHP-FPM instance (default is 9000).</li> <li><code>LOCAL_PHP</code> : Path to the local socket file of PHP-FPM instance.</li> <li><code>LOCAL_PHP_PATH</code> : Root folder containing files in the local PHP-FPM instance.</li> </ul> All-in-oneDockerDocker autoconfSwarmKubernetesLinux <p>When using the All-in-one image, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb.</li> <li>Set up a PHP-FPM container for your application and mount the folder containing PHP files.</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as environment variables when running BunkerWeb.</li> </ul> <p>If you enable the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app2.example.com\n    \u2514\u2500\u2500 index.php\n\n2 directories, 2 files\n</code></pre> <p>We will assume that your PHP apps are located into a folder named <code>www</code>. Please note that you will need to fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 ./www &amp;&amp; \\\nfind ./www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind ./www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>You can now run BunkerWeb, configure it for your PHP application and also run the PHP apps. You will need to create a custom Docker network to allow BunkerWeb to communicate with your PHP-FPM containers.</p> <pre><code># Create a custom network\ndocker network create php-network\n\n# Run PHP-FPM containers\ndocker run -d --name myapp1-php --network php-network -v ./www/app1.example.com:/app php:fpm\ndocker run -d --name myapp2-php --network php-network -v ./www/app2.example.com:/app php:fpm\n\n# Run BunkerWeb All-in-one\ndocker run -d \\\n    --name bunkerweb-aio \\\n    --network php-network \\\n    -v ./www:/var/www/html \\\n    -v bw-storage:/data \\\n    -e SERVER_NAME=\"app1.example.com app2.example.com\" \\\n    -e MULTISITE=\"yes\" \\\n    -e REMOTE_PHP_PATH=\"/app\" \\\n    -e app1.example.com_REMOTE_PHP=\"myapp1-php\" \\\n    -e app2.example.com_REMOTE_PHP=\"myapp2-php\" \\\n    -p 80:8080/tcp \\\n    -p 443:8443/tcp \\\n    -p 443:8443/udp \\\n    bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Please note that if your container is already created, you will need to delete it and recreate it for the new environment variables to be applied.</p> <p>When using the Docker integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM container for your application and mount the folder containing PHP files</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as environment variables when starting BunkerWeb</li> </ul> <p>If you enable the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>We will assume that your PHP apps are located into a folder named <code>www</code>. Please note that you will need to fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 ./www &amp;&amp; \\\nfind ./www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind ./www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>You can now run BunkerWeb, configure it for your PHP application and also run the PHP apps :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - ./www:/var/www/html\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"app1.example.com app2.example.com\"\n      MULTISITE: \"yes\"\n      REMOTE_PHP_PATH: \"/app\" # Will be applied to all services thanks to the MULTISITE setting\n      app1.example.com_REMOTE_PHP: \"myapp1\"\n      app2.example.com_REMOTE_PHP: \"myapp2\"\n      app3.example.com_REMOTE_PHP: \"myapp3\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  myapp1:\n    image: php:fpm\n    volumes:\n      - ./www/app1.example.com:/app\n    networks:\n      - bw-services\n\n  myapp2:\n    image: php:fpm\n    volumes:\n      - ./www/app2.example.com:/app\n    networks:\n      - bw-services\n\n  myapp3:\n    image: php:fpm\n    volumes:\n      - ./www/app3.example.com:/app\n    networks:\n      - bw-services\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n</code></pre> <p>Multisite mode enabled</p> <p>The Docker autoconf integration integration implies the use of multisite mode : protecting one PHP application is the same as protecting multiple ones.</p> <p>When using the Docker autoconf integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM containers for your applications and mount the folder containing PHP apps</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as labels for your PHP-FPM container</li> </ul> <p>Since the Docker autoconf implies using the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>Once the folders are created, copy your files and fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 ./www &amp;&amp; \\\nfind ./www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind ./www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>When you start the BunkerWeb autoconf stack, mount the <code>www</code> folder into <code>/var/www/html</code> for the Scheduler container :</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for all services\n  AUTOCONF_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n    environment:\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - ./www:/var/www/html\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-docker\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n</code></pre> <p>You can now create your PHP-FPM containers, mount the correct subfolders and use labels to configure BunkerWeb :</p> <pre><code>services:\n  myapp1:\n      image: php:fpm\n      volumes:\n        - ./www/app1.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp1\n      labels:\n        - \"bunkerweb.SERVER_NAME=app1.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp1\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp2:\n      image: php:fpm\n      volumes:\n        - ./www/app2.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp2\n      labels:\n        - \"bunkerweb.SERVER_NAME=app2.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp2\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp3:\n      image: php:fpm\n      volumes:\n        - ./www/app3.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp3\n      labels:\n        - \"bunkerweb.SERVER_NAME=app3.example.com\"\n        - \"bunkerweb.REMOTE_PHP=myapp3\"\n        - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Multisite mode enabled</p> <p>The Swarm integration integration implies the use of multisite mode : protecting one PHP application is the same as protecting multiple ones.</p> <p>Shared volume</p> <p>Using PHP with the Docker Swarm integration needs a shared volume between all BunkerWeb and PHP-FPM instances which is not covered in this documentation.</p> <p>When using the Docker autoconf integration, to support PHP applications, you will need to :</p> <ul> <li>Mount your PHP files into the <code>/var/www/html</code> folder of BunkerWeb</li> <li>Set up a PHP-FPM containers for your applications and mount the folder containing PHP apps</li> <li>Use the specific settings <code>REMOTE_PHP</code> and <code>REMOTE_PHP_PATH</code> as labels for your PHP-FPM container</li> </ul> <p>Since the Swarm integration implies using the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>www\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>As an example, we will consider that you have a shared folder mounted on your worker nodes on the <code>/shared</code> endpoint.</p> <p>Once the folders are created, copy your files and fix the permissions so BunkerWeb (UID/GID 101) can at least read files and list folders and PHP-FPM (UID/GID 33 if you use the <code>php:fpm</code> image) is the owner of the files and folders :</p> <pre><code>chown -R 33:101 /shared/www &amp;&amp; \\\nfind /shared/www -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind /shared/www -type d -exec chmod 0750 {} \\;\n</code></pre> <p>When you start the BunkerWeb stack, mount the <code>/shared/www</code> folder into <code>/var/www/html</code> for the Scheduler container :</p> <pre><code>services:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    volumes:\n      - /shared/www:/var/www/html\n...\n</code></pre> <p>You can now create your PHP-FPM services, mount the correct subfolders and use labels to configure BunkerWeb :</p> <pre><code>services:\n  myapp1:\n      image: php:fpm\n      volumes:\n        - ./www/app1.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp1\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app1.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp1\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp2:\n      image: php:fpm\n      volumes:\n        - ./www/app2.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp2\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app2.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp2\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\n  myapp3:\n      image: php:fpm\n      volumes:\n        - ./www/app3.example.com:/app\n      networks:\n        bw-services:\n            aliases:\n              - myapp3\n      deploy:\n        placement:\n          constraints:\n            - \"node.role==worker\"\n        labels:\n          - \"bunkerweb.SERVER_NAME=app3.example.com\"\n          - \"bunkerweb.REMOTE_PHP=myapp3\"\n          - \"bunkerweb.REMOTE_PHP_PATH=/app\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>PHP is not supported for Kubernetes</p> <p>Kubernetes integration allows configuration through Ingress and the BunkerWeb controller only supports HTTP applications at the moment.</p> <p>We will assume that you already have the Linux integration stack running on your machine.</p> <p>By default, BunkerWeb will search for web files inside the <code>/var/www/html</code> folder. You can use it to store your PHP applications. Please note that you will need to configure your PHP-FPM service to get or set the user/group of the running processes and the UNIX socket file used to communicate with BunkerWeb.</p> <p>First of all, you will need to make sure that your PHP-FPM instance can access the files inside the <code>/var/www/html</code> folder and also that BunkerWeb can access the UNIX socket file in order to communicate with PHP-FPM. We recommend to set a different user like <code>www-data</code> for the PHP-FPM service and to give the nginx group access to the UNIX socket file. Here is corresponding PHP-FPM configuration :</p> <pre><code>...\n[www]\nuser = www-data\ngroup = www-data\nlisten = /run/php/php-fpm.sock\nlisten.owner = www-data\nlisten.group = nginx\nlisten.mode = 0660\n...\n</code></pre> <p>Don't forget to restart your PHP-FPM service :</p> <pre><code>systemctl restart php-fpm\n</code></pre> <p>If you enable the multisite mode, you will need to create separate directories for each of your applications. Each subdirectory should be named using the first value of <code>SERVER_NAME</code>. Here is a dummy example :</p> <pre><code>/var/www/html\n\u251c\u2500\u2500 app1.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u251c\u2500\u2500 app2.example.com\n\u2502   \u2514\u2500\u2500 index.php\n\u2514\u2500\u2500 app3.example.com\n    \u2514\u2500\u2500 index.php\n\n3 directories, 3 files\n</code></pre> <p>Please note that you will need to fix the permissions so BunkerWeb (group <code>nginx</code>) can at least read files and list folders and PHP-FPM (user <code>www-data</code> but it might be different depending on your system) is the owner of the files and folders :</p> <pre><code>chown -R www-data:nginx /var/www/html &amp;&amp; \\\nfind /var/www/html -type f -exec chmod 0640 {} \\; &amp;&amp; \\\nfind /var/www/html -type d -exec chmod 0750 {} \\;\n</code></pre> <p>You can now edit the <code>/etc/bunkerweb/variable.env</code> file :</p> <pre><code>HTTP_PORT=80\nHTTPS_PORT=443\nDNS_RESOLVERS=9.9.9.9 8.8.8.8 8.8.4.4\nAPI_LISTEN_IP=127.0.0.1\nMULTISITE=yes\nSERVER_NAME=app1.example.com app2.example.com app3.example.com\napp1.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp1.example.com_LOCAL_PHP_PATH=/var/www/html/app1.example.com\napp2.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp2.example.com_LOCAL_PHP_PATH=/var/www/html/app2.example.com\napp3.example.com_LOCAL_PHP=/run/php/php-fpm.sock\napp3.example.com_LOCAL_PHP_PATH=/var/www/html/app3.example.com\n</code></pre> <p>Now let's check the status of the Scheduler :</p> <pre><code>systemctl status bunkerweb-scheduler\n</code></pre> <p>If they are already running, we can reload it :</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb-scheduler\n</code></pre>"},{"location":"advanced/#ipv6","title":"IPv6","text":"<p>Experimental feature</p> <p>This feature is not production-ready. Feel free to test it and report us any bug using issues in the GitHub repository.</p> <p>By default, BunkerWeb will only listen on IPv4 addresses and won't use IPv6 for network communications. If you want to enable IPv6 support, you need to set <code>USE_IPV6=yes</code>. Please note that IPv6 configuration of your network and environment is out-of-the-scope of this documentation.</p> Docker / Autoconf / SwarmLinux <p>First of all, you will need to configure your Docker daemon to enable IPv6 support for containers and use ip6tables if needed. Here is sample configuration for your <code>/etc/docker/daemon.json</code> file :</p> <pre><code>{\n  \"experimental\": true,\n  \"ipv6\": true,\n  \"ip6tables\": true,\n  \"fixed-cidr-v6\": \"fd00:dead:beef::/48\"\n}\n</code></pre> <p>You can now restart the Docker service to apply the changes :</p> <pre><code>systemctl restart docker\n</code></pre> <p>Once Docker is setup to support IPv6 you can add the <code>USE_IPV6</code> setting and configure the <code>bw-services</code> for IPv6 :</p> <pre><code>services:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      USE_IPv6: \"yes\"\n\n...\n\nnetworks:\n  bw-services:\n    name: bw-services\n    enable_ipv6: true\n    ipam:\n      config:\n        - subnet: fd00:13:37::/48\n          gateway: fd00:13:37::1\n\n...\n</code></pre> <p>You will need to add the settings to the <code>/etc/bunkerweb/variables.env</code> file :</p> <pre><code>...\nUSE_IPV6=yes\n...\n</code></pre> <p>Let's check the status of BunkerWeb :</p> <pre><code>systemctl status bunkerweb\n</code></pre> <p>If they are already running, we can restart it :</p> <pre><code>systemctl restart bunkerweb\n</code></pre> <p>Otherwise, we will need to start it :</p> <pre><code>systemctl start bunkerweb\n</code></pre>"},{"location":"advanced/#security-tuning","title":"Security tuning","text":"<p>BunkerWeb offers many security features that you can configure with settings. Even if the default values of settings ensure a minimal \"security by default\", we strongly recommend you tune them. By doing so you will be able to ensure the security level of your choice but also manage false positives.</p> <p>Other settings</p> <p>This section only focuses on security tuning, see the settings section of the documentation for other settings.</p> <p> </p> Overview and order of the core security plugins"},{"location":"advanced/#crowdsec-console-integration","title":"CrowdSec Console integration","text":"<p>If you aren\u2019t already familiar with CrowdSec Console integration, CrowdSec leverages crowdsourced intelligence to combat cyber threats. Think of it as the \"Waze of cybersecurity\"\u2014when one server is attacked, other systems worldwide are alerted and protected from the same attackers. You can learn more about it here.</p> <p>Congratulations, your BunkerWeb instance is now enrolled in your CrowdSec Console!</p> <p>Pro tip: When viewing your alerts, click the \"columns\" option and check the \"context\" checkbox to access BunkerWeb-specific data.</p> <p> </p> BunkerWeb data shown in the context column"},{"location":"advanced/#monitoring-and-reporting","title":"Monitoring and reporting","text":""},{"location":"advanced/#monitoring-pro","title":"Monitoring  (PRO)","text":"<p>STREAM support </p> <p>The monitoring plugin lets you collect and retrieve metrics about BunkerWeb. By enabling it, your instance(s) will start collecting various data related to attacks, requests and performance. You can then retrieve them by calling the <code>/monitoring</code> API endpoint on regular basis or by using other plugins like the Prometheus exporter one.</p> <p>List of features</p> <ul> <li>Enable collection of various BunkerWeb metrics</li> <li>Retrieve metrics from the API</li> <li>Use in combination with other plugins (e.g. Prometheus exporter)</li> <li>Dedicate UI page to monitor your instance(s)</li> </ul> <p>List of settings</p> Setting Default Context Multiple Description <code>USE_MONITORING</code> <code>yes</code> global no Enable monitoring of BunkerWeb. <code>MONITORING_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the dict to store monitoring metrics."},{"location":"advanced/#prometheus-exporter-pro","title":"Prometheus exporter  (PRO)","text":"<p>STREAM support </p> <p>The Prometheus exporter plugin adds a Prometheus exporter on your BunkerWeb instance(s). When enabled, you can configure your Prometheus instance(s) to scrape a specific endpoint on Bunkerweb and gather internal metrics.</p> <p>We also provide a Grafana dashboard that you can import into your own instance and connect to your own Prometheus datasource.</p> <p>Please note that the use of Prometheus exporter plugin requires to enable the Monitoring plugin (<code>USE_MONITORING=yes</code>)</p> <p>List of features</p> <ul> <li>Prometheus exporter providing internal BunkerWeb metrics</li> <li>Dedicated and configurable port, listen IP and URL</li> <li>Whitelist IP/network for maximum security</li> </ul> <p>List of settings</p> Setting Default Context Multiple Description <code>USE_PROMETHEUS_EXPORTER</code> <code>no</code> global no Enable the Prometheus export. <code>PROMETHEUS_EXPORTER_IP</code> <code>0.0.0.0</code> global no Listening IP of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_PORT</code> <code>9113</code> global no Listening port of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_URL</code> <code>/metrics</code> global no HTTP URL of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_ALLOW_IP</code> <code>127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16</code> global no List of IP/networks allowed to contact the Prometheus exporter endpoint."},{"location":"advanced/#reporting-pro","title":"Reporting  (PRO)","text":"<p>STREAM support </p> <p>Monitoring plugin needed</p> <p>This plugins requires the Monitoring Pro plugin to be installed and enabled with the <code>USE_MONITORING</code> setting set to <code>yes</code>.</p> <p>The Reporting plugin provides a comprehensive solution for regular reporting of important data from BunkerWeb, including global statistics, attacks, bans, requests, reasons, and AS information. It offers a wide range of features, including automatic report creation, customization options, and seamless integration with monitoring pro plugin. With the Reporting plugin, you can easily generate and manage reports to monitor the performance and security of your application.</p> <p>List of features</p> <ul> <li>Regular reporting of important data from BunkerWeb, including global statistics, attacks, bans, requests, reasons, and AS information.</li> <li>Integration with Monitoring Pro plugin for seamless integration and enhanced reporting capabilities.</li> <li>Support for webhooks (classic, Discord, and Slack) for real-time notifications.</li> <li>Support for SMTP for email notifications.</li> <li>Configuration options for customization and flexibility.</li> </ul> <p>List of settings</p> Setting Default Context Description <code>USE_REPORTING_SMTP</code> <code>no</code> global Enable sending the report via email. <code>USE_REPORTING_WEBHOOK</code> <code>no</code> global Enable sending the report via webhook. <code>REPORTING_SCHEDULE</code> <code>weekly</code> global The frequency at which reports are sent. <code>REPORTING_WEBHOOK_URLS</code> global List of webhook URLs to receive the report in Markdown (separated by spaces). <code>REPORTING_SMTP_EMAILS</code> global List of email addresses to receive the report in HTML format (separated by spaces). <code>REPORTING_SMTP_HOST</code> global The host server used for SMTP sending. <code>REPORTING_SMTP_PORT</code> <code>465</code> global The port used for SMTP. Please note that there are different standards depending on the type of connection (SSL = 465, TLS = 587). <code>REPORTING_SMTP_FROM_EMAIL</code> global The email address used as the sender. Note that 2FA must be disabled for this email address. <code>REPORTING_SMTP_FROM_USER</code> global The user authentication value for sending via the from email address. <code>REPORTING_SMTP_FROM_PASSWORD</code> global The password authentication value for sending via the from email address. <code>REPORTING_SMTP_SSL</code> <code>SSL</code> global Determine whether or not to use a secure connection for SMTP. <code>REPORTING_SMTP_SUBJECT</code> <code>BunkerWeb Report</code> global The subject line of the email. <p>Information and behavior</p> <ul> <li>case <code>USE_REPORTING_SMTP</code> is set to <code>yes</code>, the setting <code>REPORTING_SMTP_EMAILS</code> must be set.</li> <li>case <code>USE_REPORTING_WEBHOOK</code> is set to <code>yes</code>, the setting <code>REPORTING_WEBHOOK_URLS</code> must be set.</li> <li>Accepted values for <code>REPORTING_SCHEDULE</code> are <code>daily</code>, <code>weekly</code>and <code>monthly</code>.</li> <li>case no <code>REPORTING_SMTP_FROM_USER</code> and <code>REPORTING_SMTP_FROM_PASSWORD</code> are set, the plugin will try to send the email without authentication.</li> <li>case <code>REPORTING_SMTP_FROM_USER</code> isn't set but <code>REPORTING_SMTP_FROM_PASSWORD</code> is set, the plugin will use the <code>REPORTING_SMTP_FROM_EMAIL</code> as the username.</li> <li>case the job fails, the plugin will retry sending the report in the next execution.</li> </ul>"},{"location":"advanced/#backup-and-restore","title":"Backup and restore","text":""},{"location":"advanced/#backup-s3-pro","title":"Backup S3  (PRO)","text":"<p>STREAM support </p> <p>The Backup S3 tool seamlessly automates data protection, similar to the community backup plugin. However, it stands out by securely storing backups directly in an S3 bucket.</p> <p>By activating this feature, you're proactively safeguarding your data's integrity. Storing backups remotely shields crucial information from threats like hardware failures, cyberattacks, or natural disasters. This ensures both security and availability, enabling swift recovery during unexpected events, preserving operational continuity, and ensuring peace of mind.</p> <p>Information for Red Hat Enterprise Linux (RHEL) 8.9 users</p> <p>If you are using RHEL 8.9 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <p>List of features</p> <ul> <li>Automatic data backup to an S3 bucket</li> <li>Flexible scheduling options: daily, weekly, or monthly</li> <li>Rotation management for controlling the number of backups to keep</li> <li>Customizable compression level for backup files</li> </ul> <p>List of settings</p> Setting Default Context Description <code>USE_BACKUP_S3</code> <code>no</code> global Enable or disable the S3 backup feature <code>BACKUP_S3_SCHEDULE</code> <code>daily</code> global The frequency of the backup <code>BACKUP_S3_ROTATION</code> <code>7</code> global The number of backups to keep <code>BACKUP_S3_ENDPOINT</code> global The S3 endpoint <code>BACKUP_S3_BUCKET</code> global The S3 bucket <code>BACKUP_S3_DIR</code> global The S3 directory <code>BACKUP_S3_REGION</code> global The S3 region <code>BACKUP_S3_ACCESS_KEY_ID</code> global The S3 access key ID <code>BACKUP_S3_ACCESS_KEY_SECRET</code> global The S3 access key secret <code>BACKUP_S3_COMP_LEVEL</code> <code>6</code> global The compression level of the backup zip file"},{"location":"advanced/#manual-backup","title":"Manual backup","text":"<p>To manually initiate a backup, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 save\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 save\n</code></pre> <p>This command will create a backup of your database and store it in the S3 bucket specified in the <code>BACKUP_S3_BUCKET</code> setting.</p> <p>You can also specify a custom S3 bucket for the backup by providing the <code>BACKUP_S3_BUCKET</code> environment variable when executing the command:</p> LinuxDocker <pre><code>BACKUP_S3_BUCKET=your-bucket-name bwcli plugin backup_s3 save\n</code></pre> <pre><code>docker exec -it -e BACKUP_S3_BUCKET=your-bucket-name &lt;scheduler_container&gt; bwcli plugin backup_s3 save\n</code></pre> <p>Specifications for MariaDB/MySQL</p> <p>In case you are using MariaDB/MySQL, you may encounter the following error when trying to backup your database:</p> <pre><code>caching_sha2_password could not be loaded: Error loading shared library /usr/lib/mariadb/plugin/caching_sha2_password.so\n</code></pre> <p>To resolve this issue, you can execute the following command to change the authentication plugin to <code>mysql_native_password</code>:</p> <pre><code>ALTER USER 'yourusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'youpassword';\n</code></pre> <p>If you're using the Docker integration, you can add the following command to the <code>docker-compose.yml</code> file to automatically change the authentication plugin:</p> MariaDBMySQL <pre><code>bw-db:\n    image: mariadb:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre> <pre><code>bw-db:\n    image: mysql:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre>"},{"location":"advanced/#manual-restore","title":"Manual restore","text":"<p>To manually initiate a restore, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 restore\n</code></pre> <p>This command will create a temporary backup of your database in the S3 bucket specified in the <code>BACKUP_S3_BUCKET</code> setting and restore your database to the latest backup available in the bucket.</p> <p>You can also specify a custom backup file for the restore by providing the path to it as an argument when executing the command:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore s3_backup_file.zip\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup restore s3_backup_file.zip\n</code></pre> <p>In case of failure</p> <p>Don't worry if the restore fails, you can always restore your database to the previous state by executing the command again as a backup is created before the restore:</p> LinuxDocker <pre><code>bwcli plugin backup_s3 restore\n</code></pre> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin backup_s3 restore\n</code></pre>"},{"location":"advanced/#migration-pro","title":"Migration  (PRO)","text":"<p>STREAM support </p> <p>The Migration plugin revolutionizes BunkerWeb configuration transfers between instances with its user-friendly web interface, simplifying the entire migration journey. Whether you're upgrading systems, scaling infrastructure, or transitioning environments, this tool empowers you to effortlessly transfer settings, preferences, and data with unmatched ease and confidence. Say goodbye to cumbersome manual processes and hello to a seamless, hassle-free migration experience.</p> <p>List of features</p> <ul> <li> <p>Effortless Migration: Easily transfer BunkerWeb configurations between instances without the complexities of manual procedures.</p> </li> <li> <p>Intuitive Web Interface: Navigate through the migration process effortlessly with a user-friendly web interface designed for intuitive operation.</p> </li> <li> <p>Cross-Database Compatibility: Enjoy seamless migration across various database platforms, including SQLite, MySQL, MariaDB, and PostgreSQL, ensuring compatibility with your preferred database environment.</p> </li> </ul>"},{"location":"advanced/#create-a-migration-file","title":"Create a migration file","text":"<p>To manually create a migration file, execute the following command:</p> LinuxDocker <pre><code>bwcli plugin migration create /path/to/migration/file\n</code></pre> <ol> <li> <p>Create a migration file:</p> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin migration create /path/to/migration/file\n</code></pre> </li> <li> <p>Copy the migration file to your local machine:</p> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/migration/file /path/to/migration/file\n</code></pre> </li> </ol> <p>This command will create a backup of your database and store it in the backup directory specified in the command.</p> <p>Specifications for MariaDB/MySQL</p> <p>In case you are using MariaDB/MySQL, you may encounter the following error when trying to backup your database:</p> <pre><code>caching_sha2_password could not be loaded: Error loading shared library /usr/lib/mariadb/plugin/caching_sha2_password.so\n</code></pre> <p>To resolve this issue, you can execute the following command to change the authentication plugin to <code>mysql_native_password</code>:</p> <pre><code>ALTER USER 'yourusername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'youpassword';\n</code></pre> <p>If you're using the Docker integration, you can add the following command to the <code>docker-compose.yml</code> file to automatically change the authentication plugin:</p> MariaDBMySQL <pre><code>bw-db:\n    image: mariadb:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre> <pre><code>bw-db:\n    image: mysql:&lt;version&gt;\n    command: --default-authentication-plugin=mysql_native_password\n    ...\n</code></pre>"},{"location":"advanced/#initialize-a-migration","title":"Initialize a migration","text":"<p>To manually initialize a migration, execute the following command:</p> LinuxDockerAll-in-one <pre><code>bwcli plugin migration migrate /path/to/migration/file\n</code></pre> <ol> <li> <p>Copy the migration file to the container:</p> <pre><code>docker cp /path/to/migration/file &lt;scheduler_container&gt;:/path/to/migration/file\n</code></pre> </li> <li> <p>Initialize the migration:</p> <pre><code>docker exec -it &lt;scheduler_container&gt; bwcli plugin migration migrate /path/to/migration/file\n</code></pre> </li> </ol> <ol> <li> <p>Copy the migration file to the container:</p> <pre><code>docker cp /path/to/migration/file bunkerweb-aio:/path/to/migration/file\n</code></pre> </li> <li> <p>Initialize the migration:</p> <pre><code>docker exec -it bunkerweb-aio bwcli plugin migration migrate /path/to/migration/file\n</code></pre> </li> </ol> <p>This command seamlessly migrates your BunkerWeb data to precisely match the configuration outlined in the migration file.</p>"},{"location":"advanced/#anti-ddos-pro","title":"Anti DDoS  (PRO)","text":"<p>STREAM support </p> <p>The Anti DDoS Plugin provides advanced protection against Distributed Denial of Service (DDoS) attacks by monitoring, analyzing, and filtering suspicious traffic in real-time.</p> <p>By employing a sliding window mechanism, the plugin maintains an in-memory dictionary of request timestamps to detect abnormal traffic spikes from individual IP addresses. Based on the configured security mode, it can either block offending connections or log the suspicious activity for further review.</p>"},{"location":"advanced/#features","title":"Features","text":"<ul> <li>Real-Time Traffic Analysis: Continuously monitors incoming requests to detect potential DDoS attacks.</li> <li>Sliding Window Mechanism: Tracks recent request activity within a configurable time window.</li> <li>Configurable Thresholds: Allows you to define the maximum number of suspicious requests per IP.</li> <li>Advanced Blocking Logic: Evaluates both per-IP request counts and the number of distinct IPs exceeding the threshold.</li> <li>Flexible Security Modes: Choose between immediate connection blocking or detection-only (logging) mode.</li> <li>Optimized In-Memory Datastore: Ensures high-speed lookups and efficient metric tracking.</li> <li>Automatic Housekeeping: Periodically clears outdated data to maintain optimal performance.</li> </ul>"},{"location":"advanced/#configuration","title":"Configuration","text":"<p>Customize the plugin behavior using the following settings:</p> Setting Default Context Multiple Description <code>USE_ANTIDDOS</code> <code>no</code> global no Enable or disable the Anti DDoS protection. Set to <code>\"yes\"</code> to activate the plugin. <code>ANTIDDOS_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the in-memory datastore for tracking DDoS metrics (e.g., <code>10M</code>, <code>500k</code>). <code>ANTIDDOS_THRESHOLD</code> <code>100</code> global no Maximum number of suspicious requests allowed per IP within the defined time window. <code>ANTIDDOS_WINDOW_TIME</code> <code>10</code> global no Time window in seconds during which suspicious requests are tallied. <code>ANTIDDOS_STATUS_CODES</code> <code>429 403 444</code> global no HTTP status codes considered suspicious and used to trigger anti-DDoS actions. <code>ANTIDDOS_DISTINCT_IP</code> <code>5</code> global no Minimum number of distinct IPs that must exceed the threshold before enforcing the block mode."},{"location":"advanced/#best-practices","title":"Best Practices","text":"<ul> <li>Threshold Tuning: Adjust <code>ANTIDDOS_THRESHOLD</code> and <code>ANTIDDOS_WINDOW_TIME</code> based on your typical traffic patterns.</li> <li>Status Code Review: Regularly update <code>ANTIDDOS_STATUS_CODES</code> to capture new or evolving suspicious behaviors.</li> <li>Monitoring: Analyze logs and metrics periodically to fine-tune settings and improve overall protection.</li> </ul>"},{"location":"advanced/#user-manager-pro","title":"User Manager  (PRO)","text":"<p>The User Management Plugin offers a robust interface for administering user accounts within your system.</p> <p>With this plugin, administrators can effortlessly create, update, and disable user accounts, manage user roles, toggle two-factor authentication (2FA), and view detailed user information such as last login timestamps and account statuses (active or inactive). Designed with security and ease-of-use in mind, this plugin simplifies routine user management tasks while ensuring compliance and auditability.</p>"},{"location":"advanced/#features_1","title":"Features","text":"<ul> <li>User Account Operations: Create, edit, and delete user accounts with ease.</li> <li>Role-Based Access Control: Assign and modify user roles to manage permissions and access levels.</li> <li>2FA Management: Disable two-factor authentication based on administrative decisions.</li> <li>Comprehensive User Insights: Monitor key user data including last login times, account creation dates, and active/inactive status.</li> <li>Audit Logging: Maintain an audit trail for all user management actions for enhanced security and compliance.</li> </ul> User Manager page User Manager - Create user form User Manager - Activities page"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#architecture","title":"Architecture","text":"<p>Within your infrastructure, BunkerWeb acts as a reverse proxy in front of your web services. The typical architecture involves accessing BunkerWeb from the Internet, which then forwards requests to the appropriate application service on a secure network.</p> <p>Using BunkerWeb in this way (classical reverse proxy architecture) with TLS offloading and centralized security policies enhances performance by reducing encryption overhead on backend servers while ensuring consistent access control, threat mitigation, and compliance enforcement across all services.</p>"},{"location":"concepts/#integrations","title":"Integrations","text":"<p>The first concept is the integration of BunkerWeb into the target environment. We prefer to use the word \"integration\" instead of \"installation\" because one of BunkerWeb's goals is to integrate seamlessly into existing environments.</p> <p>The following integrations are officially supported:</p> <ul> <li>Docker</li> <li>Linux</li> <li>Docker autoconf</li> <li>Kubernetes</li> <li>Swarm</li> </ul> <p>If you think a new integration should be supported, do not hesitate to open a new issue on the GitHub repository.</p> <p>Going further</p> <p>The technical details of all BunkerWeb integrations are available in the integrations section of the documentation.</p>"},{"location":"concepts/#settings","title":"Settings","text":"<p>BunkerWeb PRO settings</p> <p>Some plugins are reserved for the PRO version. Want to quickly test BunkerWeb PRO for one month? Use the code <code>freetrial</code> when placing your order on the BunkerWeb panel or by clicking here to directly to apply the promo code (will be effective at checkout).</p> <p>Once BunkerWeb is integrated into your environment, you will need to configure it to serve and protect your web applications.</p> <p>The configuration of BunkerWeb is done using what we call \"settings\" or \"variables.\" Each setting is identified by a name such as <code>AUTO_LETS_ENCRYPT</code> or <code>USE_ANTIBOT</code>. You can assign values to these settings to configure BunkerWeb.</p> <p>Here is a dummy example of a BunkerWeb configuration:</p> <pre><code>SERVER_NAME=www.example.com\nAUTO_LETS_ENCRYPT=yes\nUSE_ANTIBOT=captcha\nREFERRER_POLICY=no-referrer\nUSE_MODSECURITY=no\nUSE_GZIP=yes\nUSE_BROTLI=no\n</code></pre> <p>Please note that if you are using the web User Interface, the setting names are also displayed in addition to a \"human-friendly\" label:</p> <p> </p> Settings name in the web UI <p>You can also use the search bar and directly specify a setting name:</p> <p> </p> Settings search in the web UI <p>Going further</p> <p>The complete list of available settings with descriptions and possible values is available in the settings section of the documentation.</p>"},{"location":"concepts/#multisite-mode","title":"Multisite mode","text":"<p>Understanding the multisite mode is essential when utilizing BunkerWeb. As our primary focus is safeguarding web applications, our solution is intricately linked to the concept of \"virtual hosts\" or \"vhosts\" (more info here). These virtual hosts enable the serving of multiple web applications from a single instance or cluster.</p> <p>By default, BunkerWeb has the multisite mode disabled. This means that only one web application will be served, and all settings will be applied to it. This setup is ideal when you have a single application to protect, as you don't need to concern yourself with multisite configurations.</p> <p>However, when the multisite mode is enabled, BunkerWeb becomes capable of serving and protecting multiple web applications. Each web application is identified by a unique server name and has its own set of settings. This mode proves beneficial when you have multiple applications to secure, and you prefer to utilize a single instance (or a cluster) of BunkerWeb.</p> <p>The activation of the multisite mode is controlled by the <code>MULTISITE</code> setting, which can be set to <code>yes</code> to enable it or <code>no</code> to keep it disabled (the default value).</p> <p>Each setting within BunkerWeb has a specific context that determines where it can be applied. If the context is set to \"global,\" the setting can't be applied per server or site but is instead applied to the entire configuration as a whole. On the other hand, if the context is \"multisite,\" the setting can be applied globally and per server. To define a multisite setting for a specific server, simply add the server name as a prefix to the setting name. For example, <code>app1.example.com_AUTO_LETS_ENCRYPT</code> or <code>app2.example.com_USE_ANTIBOT</code> are examples of setting names with server name prefixes. When a multisite setting is defined globally without a server prefix, all servers inherit that setting. However, individual servers can still override the setting if the same setting is defined with a server name prefix.</p> <p>Understanding the intricacies of multisite mode and its associated settings allows you to tailor BunkerWeb's behavior to suit your specific requirements, ensuring optimal protection for your web applications.</p> <p>Here's a dummy example of a multisite BunkerWeb configuration:</p> <pre><code>MULTISITE=yes\nSERVER_NAME=app1.example.com app2.example.com app3.example.com\nAUTO_LETS_ENCRYPT=yes\nUSE_GZIP=yes\nUSE_BROTLI=yes\napp1.example.com_USE_ANTIBOT=javascript\napp1.example.com_USE_MODSECURITY=no\napp2.example.com_USE_ANTIBOT=cookie\napp2.example.com_WHITELIST_COUNTRY=FR\napp3.example.com_USE_BAD_BEHAVIOR=no\n</code></pre> <p>Please note that multisite mode is implicit when using the web User Interface. You have the option to apply configurations directly to your services or to set a global configuration that will be applied to all your services (you can still apply exceptions directly to specific services):</p> <p> </p> Apply a setting to all services from the web UI <p>Going further</p> <p>You will find concrete examples of multisite mode in the advanced usages of the documentation and the examples directory of the repository.</p>"},{"location":"concepts/#custom-configurations","title":"Custom configurations","text":"<p>To address unique challenges and cater to specific use cases, BunkerWeb offers the flexibility of custom configurations. While the provided settings and external plugins cover a wide range of scenarios, there may be situations that require additional customization.</p> <p>BunkerWeb is built on the renowned NGINX web server, which provides a powerful configuration system. This means you can leverage NGINX's configuration capabilities to meet your specific needs. Custom NGINX configurations can be included in various contexts such as HTTP or server, allowing you to fine-tune the behavior of BunkerWeb according to your requirements. Whether you need to customize global settings or apply configurations to specific server blocks, BunkerWeb empowers you to optimize its behavior to align perfectly with your use case.</p> <p>Another integral component of BunkerWeb is the ModSecurity Web Application Firewall. With custom configurations, you have the flexibility to address false positives or add custom rules to further enhance the protection provided by ModSecurity. These custom configurations allow you to fine-tune the behavior of the firewall and ensure that it aligns with the specific requirements of your web applications.</p> <p>By leveraging custom configurations, you unlock a world of possibilities to tailor BunkerWeb's behavior and security measures precisely to your needs. Whether it's adjusting NGINX configurations or fine-tuning ModSecurity, BunkerWeb provides the flexibility to meet your unique challenges effectively.</p> <p>Managing custom configurations from the web User Interface is done through the Configs menu:</p> <p> </p> Manage custom configurations from the web UI <p>Going further</p> <p>You will find concrete examples of custom configurations in the advanced usages of the documentation and the examples directory of the repository.</p>"},{"location":"concepts/#database","title":"Database","text":"<p>BunkerWeb securely stores its current configuration in a backend database, which contains essential data for smooth operation. The following information is stored in the database:</p> <ul> <li> <p>Settings for all services: The database holds the defined settings for all the services provided by BunkerWeb. This ensures that your configurations and preferences are preserved and readily accessible.</p> </li> <li> <p>Custom configurations: Any custom configurations you create are also stored in the backend database. This includes personalized settings and modifications tailored to your specific requirements.</p> </li> <li> <p>BunkerWeb instances: Information about BunkerWeb instances, including their setup and relevant details, is stored in the database. This allows for easy management and monitoring of multiple instances if applicable.</p> </li> <li> <p>Metadata about job execution: The database stores metadata related to the execution of various jobs within BunkerWeb. This includes information about scheduled tasks, maintenance processes, and other automated activities.</p> </li> <li> <p>Cached files: BunkerWeb utilizes caching mechanisms for improved performance. The database holds cached files, ensuring efficient retrieval and delivery of frequently accessed resources.</p> </li> </ul> <p>Under the hood, whenever you edit a setting or add a new configuration, BunkerWeb automatically stores the changes in the database, ensuring data persistence and consistency. BunkerWeb supports multiple backend database options, including SQLite, MariaDB, MySQL, and PostgreSQL.</p> <p>Configuring the database is straightforward using the <code>DATABASE_URI</code> setting, which follows the specified formats for each supported database:</p> <p>Warning</p> <p>When using the Docker Integration, you must set the <code>DATABASE_URI</code> environment variable in all BunkerWeb containers (except the BunkerWeb container itself), to ensure that all components can access the database correctly. This is crucial for maintaining the integrity and functionality of the system.</p> <p>In all cases, ensure that <code>DATABASE_URI</code> is set before starting BunkerWeb, as it is required for proper operation.</p> <ul> <li>SQLite: <code>sqlite:///var/lib/bunkerweb/db.sqlite3</code></li> <li>MariaDB: <code>mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db</code></li> <li>MySQL: <code>mysql+pymysql://bunkerweb:changeme@bw-db:3306/db</code></li> <li>PostgreSQL: <code>postgresql://bunkerweb:changeme@bw-db:5432/db</code></li> </ul> <p>By specifying the appropriate database URI in the configuration, you can seamlessly integrate BunkerWeb with your preferred database backend, ensuring efficient and reliable storage of your configuration data.</p> <p> </p> Database Schema"},{"location":"concepts/#scheduler","title":"Scheduler","text":"<p>For seamless coordination and automation, BunkerWeb employs a specialized service known as the scheduler. The scheduler plays a vital role in ensuring smooth operation by performing the following tasks:</p> <ul> <li> <p>Storing settings and custom configurations: The scheduler is responsible for storing all the settings and custom configurations within the backend database. This centralizes the configuration data, making it easily accessible and manageable.</p> </li> <li> <p>Executing various tasks (jobs): The scheduler handles the execution of various tasks, referred to as jobs. These jobs encompass a range of activities, such as periodic maintenance, scheduled updates, or any other automated tasks required by BunkerWeb.</p> </li> <li> <p>Generating BunkerWeb configuration: The scheduler generates a configuration that is readily understood by BunkerWeb. This configuration is derived from the stored settings and custom configurations, ensuring that the entire system operates cohesively.</p> </li> <li> <p>Acting as an intermediary for other services: The scheduler acts as an intermediary, facilitating communication and coordination between different components of BunkerWeb. It interfaces with services such as the web UI or autoconf, ensuring a seamless flow of information and data exchange.</p> </li> </ul> <p>In essence, the scheduler serves as the brain of BunkerWeb, orchestrating various operations and ensuring the smooth functioning of the system.</p> <p>Depending on the integration approach, the execution environment of the scheduler may differ. In container-based integrations, the scheduler is executed within its dedicated container, providing isolation and flexibility. On the other hand, for Linux-based integrations, the scheduler is self-contained within the bunkerweb service, simplifying the deployment and management process.</p> <p>By employing the scheduler, BunkerWeb streamlines the automation and coordination of essential tasks, enabling efficient and reliable operation of the entire system.</p> <p>If you are using the web User Interface, you can manage scheduler jobs by clicking on Jobs from the menu:</p> <p> </p> Manage jobs from the web UI <p>Instances health check</p> <p>Since version 1.6.0, the scheduler possesses a built-in health check system that monitors the health of instances. If an instance becomes unhealthy, the scheduler will stop sending the configuration to it. If the instance becomes healthy again, the scheduler will resume sending the configuration.</p> <p>The health check interval is set by the <code>HEALTHCHECK_INTERVAL</code> environment variable, with a default value of <code>30</code>, meaning the scheduler will check the health of the instances every 30 seconds.</p>"},{"location":"concepts/#templates","title":"Templates","text":"<p>BunkerWeb leverages the power of templates to simplify the configuration process and enhance flexibility. Templates provide a structured and standardized approach to defining settings and custom configurations, ensuring consistency and ease of use.</p> <ul> <li> <p>Predefined templates: The community version offers three predefined templates that encapsulate common custom configurations and settings. These templates serve as a starting point for configuring BunkerWeb, enabling quick setup and deployment. The predefined templates are the following:</p> <ul> <li>low: A basic template that provides essential settings for web application protection.</li> <li>medium: A balanced template that offers a mix of security features and performance optimizations.</li> <li>high: An advanced template that focuses on robust security measures and comprehensive protection.</li> </ul> </li> <li> <p>Custom templates: In addition to predefined templates, BunkerWeb allows users to create custom templates tailored to their specific requirements. Custom templates enable fine-tuning of settings and custom configurations, ensuring that BunkerWeb aligns perfectly with the user's needs.</p> </li> </ul> <p>With the web User Interface, templates are available through easy mode when you add or edit a service:</p> <p> </p> Templates usage from the web UI <p>Creating custom templates</p> <p>Creating a custom template is a straightforward process that involves defining the desired settings, custom configurations, and steps in a structured format.</p> <ul> <li>Template structure: A custom template consists of a name, a series of settings, custom configurations, and optional steps. The template structure is defined in a JSON file that adheres to the specified format. The key components of a custom template include:<ul> <li>Settings: A setting is defined with a name and corresponding value. This value will override the default value of the setting. Only multisite settings are supported.</li> <li>Configs: A custom configuration is a path to an NGINX configuration file that will be included as a custom configuration. To know where to place the custom configuration file, refer to the example of a plugin's tree below. Only multisite configuration types are supported.</li> <li>Steps: A step contains a title, subtitle, settings, and custom configurations. Each step represents a configuration step that the user can follow to set up BunkerWeb according to the custom template in the web UI.</li> </ul> </li> </ul> <p>Specifications about steps</p> <p>If steps are declared, it is not mandatory to include all the settings and custom configurations in the settings and configs sections. Keep in mind that when a setting or a custom configuration is declared in a step, the user will be allowed to make edits to it in the web UI.</p> <ul> <li> <p>Template file: The custom template is defined in a JSON file in a <code>templates</code> folder inside the plugin directory that adheres to the specified structure. The template file contains a name, the settings, custom configurations, and steps required to configure BunkerWeb according to the user's preferences.</p> </li> <li> <p>Selecting a template: Once the custom template is defined, users can select it during the easy-mode configuration process of a service in the web UI. A template can also be selected with the <code>USE_TEMPLATE</code> setting in the configuration. The name of the template file (without the <code>.json</code> extension) should be specified as the value of the <code>USE_TEMPLATE</code> setting.</p> </li> </ul> <p>Example of a custom template file: <pre><code>{\n    \"name\": \"template name\",\n    // optional\n    \"settings\": {\n        \"SETTING_1\": \"value\",\n        \"SETTING_2\": \"value\"\n    },\n    // optional\n    \"configs\": [\n        \"modsec/false_positives.conf\",\n        \"modsec/non_editable.conf\",\n        \"modsec-crs/custom_rules.conf\"\n    ],\n    // optional\n    \"steps\": [\n        {\n            \"title\": \"Title 1\",\n            \"subtitle\": \"subtitle 1\",\n            \"settings\": [\n                \"SETTING_1\"\n            ],\n            \"configs\": [\n                \"modsec-crs/custom_rules.conf\"\n            ]\n        },\n        {\n            \"title\": \"Title 2\",\n            \"subtitle\": \"subtitle 2\",\n            \"settings\": [\n                \"SETTING_2\"\n            ],\n            \"configs\": [\n                \"modsec/false_positives.conf\"\n            ]\n        }\n    ]\n}\n</code></pre></p> <p>Example of a plugin's tree including custom templates: <pre><code>.\n\u251c\u2500\u2500 plugin.json\n\u2514\u2500\u2500 templates\n    \u251c\u2500\u2500 my_other_template.json\n    \u251c\u2500\u2500 my_template\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 configs\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 modsec\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 false_positives.conf\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 non_editable.conf\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 modsec-crs\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 custom_rules.conf\n    \u2514\u2500\u2500 my_template.json\n</code></pre></p>"},{"location":"features/","title":"Features","text":"<p>Settings generator tool</p> <p>To help you tune BunkerWeb, we have made an easy-to-use settings generator tool available at config.bunkerweb.io.</p> <p>This section contains the full list of settings supported by BunkerWeb. If you are not yet familiar with BunkerWeb, you should first read the concepts section of the documentation. Please follow the instructions for your own integration on how to apply the settings.</p>"},{"location":"features/#global-settings","title":"Global settings","text":"<p>STREAM support </p> <p>The General plugin provides the core configuration framework for BunkerWeb, allowing you to define essential settings that control how your web services are protected and delivered. This foundational plugin manages fundamental aspects like security modes, server defaults, logging behavior, and critical operational parameters for the entire BunkerWeb ecosystem.</p> <p>How it works:</p> <ol> <li>When BunkerWeb starts, the General plugin loads and applies your core configuration settings.</li> <li>Security modes are set either globally or per-site, determining the level of protection applied.</li> <li>Default server settings establish fallback values for any unspecified multisite configurations.</li> <li>Logging parameters control what information is recorded and how it's formatted.</li> <li>These settings create the foundation upon which all other BunkerWeb plugins and functionality operate.</li> </ol>"},{"location":"features/#multisite-mode","title":"Multisite Mode","text":"<p>When <code>MULTISITE</code> is set to <code>yes</code>, BunkerWeb can host and protect multiple websites, each with its own unique configuration. This feature is particularly useful for scenarios such as:</p> <ul> <li>Hosting multiple domains with distinct configurations</li> <li>Running multiple applications with varying security requirements</li> <li>Applying tailored security policies to different services</li> </ul> <p>In multisite mode, each site is identified by a unique <code>SERVER_NAME</code>. To apply settings specific to a site, prepend the primary <code>SERVER_NAME</code> to the setting name. For example:</p> <ul> <li><code>www.example.com_USE_ANTIBOT=captcha</code> enables CAPTCHA for <code>www.example.com</code>.</li> <li><code>myapp.example.com_USE_GZIP=yes</code> enables GZIP compression for <code>myapp.example.com</code>.</li> </ul> <p>This approach ensures that settings are applied to the correct site in a multisite environment.</p>"},{"location":"features/#multiple-settings","title":"Multiple Settings","text":"<p>Some settings in BunkerWeb support multiple configurations for the same feature. To define multiple groups of settings, append a numeric suffix to the setting name. For example:</p> <ul> <li><code>REVERSE_PROXY_URL_1=/subdir</code> and <code>REVERSE_PROXY_HOST_1=http://myhost1</code> configure the first reverse proxy.</li> <li><code>REVERSE_PROXY_URL_2=/anotherdir</code> and <code>REVERSE_PROXY_HOST_2=http://myhost2</code> configure the second reverse proxy.</li> </ul> <p>This pattern allows you to manage multiple configurations for features like reverse proxies, ports, or other settings that require distinct values for different use cases.</p>"},{"location":"features/#security-modes","title":"Security Modes","text":"<p>The <code>SECURITY_MODE</code> setting determines how BunkerWeb handles detected threats. This flexible feature allows you to choose between monitoring or actively blocking suspicious activity, depending on your specific needs:</p> <ul> <li><code>detect</code>: Logs potential threats without blocking access. This mode is useful for identifying and analyzing false positives in a safe, non-disruptive manner.</li> <li><code>block</code> (default): Actively blocks detected threats while logging incidents to prevent unauthorized access and protect your application.</li> </ul> <p>Switching to <code>detect</code> mode can help you identify and resolve potential false positives without disrupting legitimate clients. Once these issues are addressed, you can confidently switch back to <code>block</code> mode for full protection.</p>"},{"location":"features/#configuration-settings","title":"Configuration Settings","text":"Core SettingsAPI SettingsNetwork &amp; Port SettingsStream Server SettingsWorker SettingsMemory SettingsLogging SettingsIntegration SettingsNginx Settings Setting Default Context Multiple Description <code>SERVER_NAME</code> <code>www.example.com</code> multisite No Primary Domain: The main domain name for this site. Required in multisite mode. <code>BUNKERWEB_INSTANCES</code> <code>127.0.0.1</code> global No BunkerWeb Instances: List of BunkerWeb instances separated with spaces. <code>MULTISITE</code> <code>no</code> global No Multiple Sites: Set to <code>yes</code> to enable hosting multiple websites with different configurations. <code>SECURITY_MODE</code> <code>block</code> multisite No Security Level: Controls the level of security enforcement. Options: <code>detect</code> or <code>block</code>. <code>SERVER_TYPE</code> <code>http</code> multisite No Server Type: Defines if the server is <code>http</code> or <code>stream</code> type. Setting Default Context Multiple Description <code>USE_API</code> <code>yes</code> global No Activate API: Activate the API to control BunkerWeb. <code>API_HTTP_PORT</code> <code>5000</code> global No API Port: Listen port number for the API. <code>API_LISTEN_IP</code> <code>0.0.0.0</code> global No API Listen IP: Listen IP address for the API. <code>API_SERVER_NAME</code> <code>bwapi</code> global No API Server Name: Server name (virtual host) for the API. <code>API_WHITELIST_IP</code> <code>127.0.0.0/8</code> global No API Whitelist IP: List of IP/network allowed to contact the API. Setting Default Context Multiple Description <code>HTTP_PORT</code> <code>8080</code> global Yes HTTP Port: Port number for HTTP traffic. <code>HTTPS_PORT</code> <code>8443</code> global Yes HTTPS Port: Port number for HTTPS traffic. <code>USE_IPV6</code> <code>no</code> global No IPv6 Support: Enable IPv6 connectivity. <code>DNS_RESOLVERS</code> <code>127.0.0.11</code> global No DNS Resolvers: DNS addresses of resolvers to use. Setting Default Context Multiple Description <code>LISTEN_STREAM</code> <code>yes</code> multisite No Listen Stream: Enable listening for non-ssl (passthrough). <code>LISTEN_STREAM_PORT</code> <code>1337</code> multisite Yes Stream Port: Listening port for non-ssl (passthrough). <code>LISTEN_STREAM_PORT_SSL</code> <code>4242</code> multisite Yes Stream SSL Port: Listening port for ssl (passthrough). <code>USE_TCP</code> <code>yes</code> multisite No TCP Listen: Enable TCP listening (stream). <code>USE_UDP</code> <code>no</code> multisite No UDP Listen: Enable UDP listening (stream). Setting Default Context Multiple Description <code>WORKER_PROCESSES</code> <code>auto</code> global No Worker Processes: Number of worker processes. Set to <code>auto</code> to use available cores. <code>WORKER_CONNECTIONS</code> <code>1024</code> global No Worker Connections: Maximum number of connections per worker. <code>WORKER_RLIMIT_NOFILE</code> <code>2048</code> global No File Descriptors Limit: Maximum number of open files per worker. Setting Default Context Multiple Description <code>WORKERLOCK_MEMORY_SIZE</code> <code>48k</code> global No Workerlock Memory Size: Size of lua_shared_dict for initialization workers. <code>DATASTORE_MEMORY_SIZE</code> <code>64m</code> global No Datastore Memory Size: Size of the internal datastore. <code>CACHESTORE_MEMORY_SIZE</code> <code>64m</code> global No Cachestore Memory Size: Size of the internal cachestore. <code>CACHESTORE_IPC_MEMORY_SIZE</code> <code>16m</code> global No Cachestore IPC Memory Size: Size of the internal cachestore (ipc). <code>CACHESTORE_MISS_MEMORY_SIZE</code> <code>16m</code> global No Cachestore Miss Memory Size: Size of the internal cachestore (miss). <code>CACHESTORE_LOCKS_MEMORY_SIZE</code> <code>16m</code> global No Cachestore Locks Memory Size: Size of the internal cachestore (locks). Setting Default Context Multiple Description <code>LOG_FORMAT</code> <code>$host $remote_addr - $remote_user [$time_local] \\\"$request\\\" $status $body_bytes_sent \\\"$http_referer\\\" \\\"$http_user_agent\\\"</code> global No Log Format: The format to use for access logs. <code>LOG_LEVEL</code> <code>notice</code> global No Log Level: Verbosity level for error logs. Options: <code>debug</code>, <code>info</code>, <code>notice</code>, <code>warn</code>, <code>error</code>, <code>crit</code>, <code>alert</code>, <code>emerg</code>. <code>TIMERS_LOG_LEVEL</code> <code>debug</code> global No Timers Log Level: Log level for timers. Options: <code>debug</code>, <code>info</code>, <code>notice</code>, <code>warn</code>, <code>err</code>, <code>crit</code>, <code>alert</code>, <code>emerg</code>. <p>Logging Best Practices</p> <ul> <li>For production environments, use the <code>notice</code>, <code>warn</code>, or <code>error</code> log levels to minimize log volume.</li> <li>For debugging issues, temporarily set the log level to <code>debug</code> to get more detailed information.</li> </ul> Setting Default Context Multiple Description <code>AUTOCONF_MODE</code> <code>no</code> global No Autoconf Mode: Enable Autoconf Docker integration. <code>SWARM_MODE</code> <code>no</code> global No Swarm Mode: Enable Docker Swarm integration. <code>KUBERNETES_MODE</code> <code>no</code> global No Kubernetes Mode: Enable Kubernetes integration. <code>USE_TEMPLATE</code> multisite No Use Template: Config template to use that will override the default values of specific settings. Setting Default Context Multiple Description <code>NGINX_PREFIX</code> <code>/etc/nginx/</code> global No Nginx Prefix: Where nginx will search for configurations. <code>SERVER_NAMES_HASH_BUCKET_SIZE</code> global No Server Names Hash Bucket Size: Value for the server_names_hash_bucket_size directive."},{"location":"features/#example-configurations","title":"Example Configurations","text":"Basic Production SetupDevelopment ModeMultisite ConfigurationStream Server Configuration <p>A standard configuration for a production site with strict security:</p> <pre><code>SECURITY_MODE: \"block\"\nSERVER_NAME: \"example.com\"\nLOG_LEVEL: \"notice\"\n</code></pre> <p>Configuration for a development environment with extra logging:</p> <pre><code>SECURITY_MODE: \"detect\"\nSERVER_NAME: \"dev.example.com\"\nLOG_LEVEL: \"debug\"\n</code></pre> <p>Configuration for hosting multiple websites:</p> <pre><code>MULTISITE: \"yes\"\n\n# First site\nsite1.example.com_SERVER_NAME: \"site1.example.com\"\nsite1.example.com_SECURITY_MODE: \"block\"\n\n# Second site\nsite2.example.com_SERVER_NAME: \"site2.example.com\"\nsite2.example.com_SECURITY_MODE: \"detect\"\n</code></pre> <p>Configuration for a TCP/UDP server:</p> <pre><code>SERVER_TYPE: \"stream\"\nSERVER_NAME: \"stream.example.com\"\nLISTEN_STREAM: \"yes\"\nLISTEN_STREAM_PORT: \"1337\"\nUSE_TCP: \"yes\"\nUSE_UDP: \"no\"\n</code></pre>"},{"location":"features/#anti-ddos-pro","title":"Anti DDoS  (PRO)","text":"<p>STREAM support </p> <p>Provides enhanced protection against DDoS attacks by analyzing and filtering suspicious traffic.</p> Setting Default Context Multiple Description <code>USE_ANTIDDOS</code> <code>no</code> global no Enable or disable anti DDoS protection to mitigate high traffic spikes. <code>ANTIDDOS_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of in-memory storage for DDoS metrics (e.g., 10M, 500k). <code>ANTIDDOS_THRESHOLD</code> <code>100</code> global no Maximum suspicious requests allowed from a single IP before blocking. <code>ANTIDDOS_WINDOW_TIME</code> <code>10</code> global no Time window (seconds) to detect abnormal request patterns. <code>ANTIDDOS_STATUS_CODES</code> <code>429 403 444</code> global no HTTP status codes treated as suspicious for DDoS analysis. <code>ANTIDDOS_DISTINCT_IP</code> <code>5</code> global no Minimum distinct IP count before enabling anti DDoS measures."},{"location":"features/#antibot","title":"Antibot","text":"<p>STREAM support </p> <p>Attackers often use automated tools (bots) to try and exploit your website. To protect against this, BunkerWeb includes an \"Antibot\" feature that challenges users to prove they are human. If a user successfully completes the challenge, they are granted access to your website. This feature is disabled by default.</p> <p>How it works:</p> <ol> <li>When a user visits your site, BunkerWeb checks if they've already passed the antibot challenge.</li> <li>If not, the user is redirected to a challenge page.</li> <li>The user must complete the challenge (e.g., solve a CAPTCHA, run JavaScript).</li> <li>If the challenge is successful, the user is redirected back to the page they were originally trying to visit and can browse your website normally.</li> </ol>"},{"location":"features/#how-to-use","title":"How to Use","text":"<p>Follow these steps to enable and configure the Antibot feature:</p> <ol> <li>Choose a challenge type: Decide which type of antibot challenge to use (e.g., captcha, hcaptcha, javascript).</li> <li>Enable the feature: Set the <code>USE_ANTIBOT</code> setting to your chosen challenge type in your BunkerWeb configuration.</li> <li>Configure the settings: Adjust the other <code>ANTIBOT_*</code> settings as needed. For reCAPTCHA, hCaptcha, Turnstile, and mCaptcha, you must create an account with the respective service and obtain API keys.</li> <li>Important: Ensure the <code>ANTIBOT_URI</code> is a unique URL on your site that is not in use.</li> </ol> <p>About the <code>ANTIBOT_URI</code> Setting</p> <p>Ensure the <code>ANTIBOT_URI</code> is a unique URL on your site that is not in use.</p> <p>Session Configuration in Clustered Environments</p> <p>The antibot feature uses cookies to track whether a user has completed the challenge. If you are running BunkerWeb in a clustered environment (multiple BunkerWeb instances), you must configure session management properly. This involves setting the <code>SESSIONS_SECRET</code> and <code>SESSIONS_NAME</code> settings to the same values across all BunkerWeb instances. If you don't do this, users may be repeatedly prompted to complete the antibot challenge. You can find more information about session configuration here.</p>"},{"location":"features/#common-settings","title":"Common Settings","text":"<p>The following settings are shared across all challenge mechanisms:</p> Setting Default Context Multiple Description <code>ANTIBOT_URI</code> <code>/challenge</code> multisite no Challenge URL: The URL where users will be redirected to complete the challenge. Make sure this URL is not used for anything else on your site. <code>ANTIBOT_TIME_RESOLVE</code> <code>60</code> multisite no Challenge Time Limit: The maximum time (in seconds) a user has to complete the challenge. After this time, a new challenge will be generated. <code>ANTIBOT_TIME_VALID</code> <code>86400</code> multisite no Challenge Validity: How long (in seconds) a completed challenge is valid. After this time, users will have to solve a new challenge."},{"location":"features/#excluding-traffic-from-challenges","title":"Excluding Traffic from Challenges","text":"<p>BunkerWeb allows you to specify certain users, IPs, or requests that should bypass the antibot challenge completely. This is useful for whitelisting trusted services, internal networks, or specific pages that should always be accessible without challenge:</p> Setting Default Context Multiple Description <code>ANTIBOT_IGNORE_URI</code> multisite no Excluded URLs: List of URI regex patterns separated by spaces that should bypass the challenge. <code>ANTIBOT_IGNORE_IP</code> multisite no Excluded IPs: List of IP addresses or CIDR ranges separated by spaces that should bypass the challenge. <code>ANTIBOT_IGNORE_RDNS</code> multisite no Excluded Reverse DNS: List of reverse DNS suffixes separated by spaces that should bypass the challenge. <code>ANTIBOT_RDNS_GLOBAL</code> <code>yes</code> multisite no Global IPs Only: If set to <code>yes</code>, only perform reverse DNS checks on public IP addresses. <code>ANTIBOT_IGNORE_ASN</code> multisite no Excluded ASNs: List of ASN numbers separated by spaces that should bypass the challenge. <code>ANTIBOT_IGNORE_USER_AGENT</code> multisite no Excluded User Agents: List of User-Agent regex patterns separated by spaces that should bypass the challenge. <p>Examples:</p> <ul> <li> <p><code>ANTIBOT_IGNORE_URI: \"^/api/ ^/webhook/ ^/assets/\"</code>   This will exclude all URIs starting with <code>/api/</code>, <code>/webhook/</code>, or <code>/assets/</code> from the antibot challenge.</p> </li> <li> <p><code>ANTIBOT_IGNORE_IP: \"192.168.1.0/24 10.0.0.1\"</code>   This will exclude the internal network <code>192.168.1.0/24</code> and the specific IP <code>10.0.0.1</code> from the antibot challenge.</p> </li> <li> <p><code>ANTIBOT_IGNORE_RDNS: \".googlebot.com .bingbot.com\"</code>   This will exclude requests from hosts with reverse DNS ending with <code>googlebot.com</code> or <code>bingbot.com</code> from the antibot challenge.</p> </li> <li> <p><code>ANTIBOT_IGNORE_ASN: \"15169 8075\"</code>   This will exclude requests from ASN 15169 (Google) and ASN 8075 (Microsoft) from the antibot challenge.</p> </li> <li> <p><code>ANTIBOT_IGNORE_USER_AGENT: \"^Mozilla.+Chrome.+Safari\"</code>   This will exclude requests with User-Agents matching the specified regex pattern from the antibot challenge.</p> </li> </ul>"},{"location":"features/#supported-challenge-mechanisms","title":"Supported Challenge Mechanisms","text":"CookieJavaScriptCaptchareCAPTCHAhCaptchaTurnstilemCaptcha <p>The Cookie challenge is a lightweight mechanism that relies on setting a cookie in the user's browser. When a user accesses the site, the server sends a cookie to the client. On subsequent requests, the server checks for the presence of this cookie to verify that the user is legitimate. This method is simple and effective for basic bot protection without requiring additional user interaction.</p> <p>How it works:</p> <ol> <li>The server generates a unique cookie and sends it to the client.</li> <li>The client must return the cookie in subsequent requests.</li> <li>If the cookie is missing or invalid, the user is redirected to the challenge page.</li> </ol> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>cookie</code> to enable the Cookie challenge. <p>Refer to the Common Settings for additional configuration options.</p> <p>The JavaScript challenge requires the client to solve a computational task using JavaScript. This mechanism ensures that the client has JavaScript enabled and can execute the required code, which is typically beyond the capability of most bots.</p> <p>How it works:</p> <ol> <li>The server sends a JavaScript script to the client.</li> <li>The script performs a computational task (e.g., hashing) and submits the result back to the server.</li> <li>The server verifies the result to confirm the client's legitimacy.</li> </ol> <p>Key Features:</p> <ul> <li>The challenge dynamically generates a unique task for each client.</li> <li>The computational task involves hashing with specific conditions (e.g., finding a hash with a certain prefix).</li> </ul> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>javascript</code> to enable the JavaScript challenge. <p>Refer to the Common Settings for additional configuration options.</p> <p>The Captcha challenge is a homemade mechanism that generates image-based challenges hosted entirely within your BunkerWeb environment. It tests users' ability to recognize and interpret randomized characters, ensuring automated bots are effectively blocked without relying on external services.</p> <p>How it works:</p> <ol> <li>The server generates a CAPTCHA image containing randomized characters.</li> <li>The user must enter the characters displayed in the image into a text field.</li> <li>The server validates the user's input against the generated CAPTCHA.</li> </ol> <p>Key Features:</p> <ul> <li>Fully self-hosted, eliminating the need for third-party APIs.</li> <li>Dynamically generated challenges ensure uniqueness for each user session.</li> <li>Uses a customizable character set for CAPTCHA generation.</li> </ul> <p>Supported Characters:</p> <p>The CAPTCHA system supports the following character types:</p> <ul> <li>Letters: All lowercase (a-z) and uppercase (A-Z) letters</li> <li>Numbers: 2, 3, 4, 5, 6, 7, 8, 9 (excludes 0 and 1 to avoid confusion)</li> <li>Special characters: <code>+-/=%\"'&amp;_(),.;:?!\u00a7`^\u00c4\u00d6\u00dc\u00df\u00e4\u00f6\u00fc\u00e9''\u201a\"\"\u201e</code></li> </ul> <p>To have the complete set of supported characters, refer to the Font charmap of the font used for the CAPTCHA.</p> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>captcha</code> to enable the Captcha challenge. <code>ANTIBOT_CAPTCHA_ALPHABET</code> <code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code> multisite no Captcha Alphabet: A string of characters to use for generating the CAPTCHA. Supported characters: all letters (a-z, A-Z), numbers 2-9 (excludes 0 and 1), and special characters: <code>+-/=%\"'&amp;_(),.;:?!\u00a7`^\u00c4\u00d6\u00dc\u00df\u00e4\u00f6\u00fc\u00e9''\u201a\"\"\u201e</code> <p>Refer to the Common Settings for additional configuration options.</p> <p>When enabled, reCAPTCHA runs in the background (v3) to assign a score based on user behavior. A score lower than the configured threshold will prompt further verification or block the request. For visible challenges (v2), users must interact with the reCAPTCHA widget before continuing.</p> <p>To use reCAPTCHA with BunkerWeb, you need to obtain your site and secret keys from the Google reCAPTCHA admin console. Once you have the keys, you can configure BunkerWeb to use reCAPTCHA as an antibot mechanism.</p> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>recaptcha</code> to enable the reCAPTCHA challenge. <code>ANTIBOT_RECAPTCHA_SITEKEY</code> multisite no reCAPTCHA Site Key: Your reCAPTCHA site key (get this from Google). <code>ANTIBOT_RECAPTCHA_SECRET</code> multisite no reCAPTCHA Secret Key: Your reCAPTCHA secret key (get this from Google). <code>ANTIBOT_RECAPTCHA_SCORE</code> <code>0.7</code> multisite no reCAPTCHA Minimum Score: The minimum score required for reCAPTCHA to pass a user (only for reCAPTCHA v3). <p>Refer to the Common Settings for additional configuration options.</p> <p>When enabled, hCaptcha provides an effective alternative to reCAPTCHA by verifying user interactions without relying on a scoring mechanism. It challenges users with a simple, interactive test to confirm their legitimacy.</p> <p>To integrate hCaptcha with BunkerWeb, you must obtain the necessary credentials from the hCaptcha dashboard at hCaptcha. These credentials include a site key and a secret key.</p> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>hcaptcha</code> to enable the hCaptcha challenge. <code>ANTIBOT_HCAPTCHA_SITEKEY</code> multisite no hCaptcha Site Key: Your hCaptcha site key (get this from hCaptcha). <code>ANTIBOT_HCAPTCHA_SECRET</code> multisite no hCaptcha Secret Key: Your hCaptcha secret key (get this from hCaptcha). <p>Refer to the Common Settings for additional configuration options.</p> <p>Turnstile is a modern, privacy-friendly challenge mechanism that leverages Cloudflare\u2019s technology to detect and block automated traffic. It validates user interactions in a seamless, background manner, reducing friction for legitimate users while effectively discouraging bots.</p> <p>To integrate Turnstile with BunkerWeb, ensure you obtain the necessary credentials from Cloudflare Turnstile.</p> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>turnstile</code> to enable the Turnstile challenge. <code>ANTIBOT_TURNSTILE_SITEKEY</code> multisite no Turnstile Site Key: Your Turnstile site key (get this from Cloudflare). <code>ANTIBOT_TURNSTILE_SECRET</code> multisite no Turnstile Secret Key: Your Turnstile secret key (get this from Cloudflare). <p>Refer to the Common Settings for additional configuration options.</p> <p>mCaptcha is an alternative CAPTCHA challenge mechanism that verifies the legitimacy of users by presenting an interactive test similar to other antibot solutions. When enabled, it challenges users with a CAPTCHA provided by mCaptcha, ensuring that only genuine users bypass the automated security checks.</p> <p>mCaptcha is designed with privacy in mind. It is fully GDPR compliant, ensuring that all user data involved in the challenge process adheres to strict data protection standards. Additionally, mCaptcha offers the flexibility to be self-hosted, allowing organizations to maintain full control over their data and infrastructure. This self-hosting capability not only enhances privacy but also optimizes performance and customization to suit specific deployment needs.</p> <p>To integrate mCaptcha with BunkerWeb, you must obtain the necessary credentials from the mCaptcha platform or your own provider. These credentials include a site key and a secret key for verification.</p> <p>Configuration Settings:</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Enable Antibot: Set to <code>mcaptcha</code> to enable the mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_SITEKEY</code> multisite no mCaptcha Site Key: Your mCaptcha site key (get this from mCaptcha). <code>ANTIBOT_MCAPTCHA_SECRET</code> multisite no mCaptcha Secret Key: Your mCaptcha secret key (get this from mCaptcha). <code>ANTIBOT_MCAPTCHA_URL</code> <code>https://demo.mcaptcha.org</code> multisite no mCaptcha Domain: The domain to use for the mCaptcha challenge. <p>Refer to the Common Settings for additional configuration options.</p>"},{"location":"features/#example-configurations_1","title":"Example Configurations","text":"Cookie ChallengeJavaScript ChallengeCaptcha ChallengereCAPTCHA ChallengehCaptcha ChallengeTurnstile ChallengemCaptcha Challenge <p>Example configuration for enabling the Cookie challenge:</p> <pre><code>USE_ANTIBOT: \"cookie\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre> <p>Example configuration for enabling the JavaScript challenge:</p> <pre><code>USE_ANTIBOT: \"javascript\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre> <p>Example configuration for enabling the Captcha challenge:</p> <pre><code>USE_ANTIBOT: \"captcha\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\nANTIBOT_CAPTCHA_ALPHABET: \"23456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n</code></pre> <p>Note: The example above uses numbers 2-9 and all letters, which are the most commonly used characters for CAPTCHA challenges. You can customize the alphabet to include special characters as needed.</p> <p>Example configuration for enabling the reCAPTCHA challenge:</p> <pre><code>USE_ANTIBOT: \"recaptcha\"\nANTIBOT_RECAPTCHA_SITEKEY: \"your-site-key\"\nANTIBOT_RECAPTCHA_SECRET: \"your-secret-key\"\nANTIBOT_RECAPTCHA_SCORE: \"0.7\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre> <p>Example configuration for enabling the hCaptcha challenge:</p> <pre><code>USE_ANTIBOT: \"hcaptcha\"\nANTIBOT_HCAPTCHA_SITEKEY: \"your-site-key\"\nANTIBOT_HCAPTCHA_SECRET: \"your-secret-key\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre> <p>Example configuration for enabling the Turnstile challenge:</p> <pre><code>USE_ANTIBOT: \"turnstile\"\nANTIBOT_TURNSTILE_SITEKEY: \"your-site-key\"\nANTIBOT_TURNSTILE_SECRET: \"your-secret-key\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre> <p>Example configuration for enabling the mCaptcha challenge:</p> <pre><code>USE_ANTIBOT: \"mcaptcha\"\nANTIBOT_MCAPTCHA_SITEKEY: \"your-site-key\"\nANTIBOT_MCAPTCHA_SECRET: \"your-secret-key\"\nANTIBOT_MCAPTCHA_URL: \"https://demo.mcaptcha.org\"\nANTIBOT_URI: \"/challenge\"\nANTIBOT_TIME_RESOLVE: \"60\"\nANTIBOT_TIME_VALID: \"86400\"\n</code></pre>"},{"location":"features/#auth-basic","title":"Auth basic","text":"<p>STREAM support </p> <p>The Auth Basic plugin provides HTTP basic authentication to protect your website or specific resources. This feature adds an extra layer of security by requiring users to enter a username and password before accessing protected content. This type of authentication is simple to implement and widely supported by browsers.</p> <p>How it works:</p> <ol> <li>When a user tries to access a protected area of your website, the server sends an authentication challenge.</li> <li>The browser displays a login dialog box prompting the user for a username and password.</li> <li>The user enters their credentials, which are sent to the server.</li> <li>If the credentials are valid, the user is granted access to the requested content.</li> <li>If the credentials are invalid, the user is served an error message with the 401 Unauthorized status code.</li> </ol>"},{"location":"features/#how-to-use_1","title":"How to Use","text":"<p>Follow these steps to enable and configure Auth Basic authentication:</p> <ol> <li>Enable the feature: Set the <code>USE_AUTH_BASIC</code> setting to <code>yes</code> in your BunkerWeb configuration.</li> <li>Choose protection scope: Decide whether to protect your entire site or just specific URLs by configuring the <code>AUTH_BASIC_LOCATION</code> setting.</li> <li>Define credentials: Set up at least one username and password pair using the <code>AUTH_BASIC_USER</code> and <code>AUTH_BASIC_PASSWORD</code> settings.</li> <li>Customize the message: Optionally change the <code>AUTH_BASIC_TEXT</code> to display a custom message in the login prompt.</li> </ol>"},{"location":"features/#configuration-settings_1","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_AUTH_BASIC</code> <code>no</code> multisite no Enable Auth Basic: Set to <code>yes</code> to enable basic authentication. <code>AUTH_BASIC_LOCATION</code> <code>sitewide</code> multisite no Protection Scope: Set to <code>sitewide</code> to protect the entire site, or specify a URL path (e.g., <code>/admin</code>) to protect only specific areas. <code>AUTH_BASIC_USER</code> <code>changeme</code> multisite yes Username: The username required for authentication. You can define multiple username/password pairs. <code>AUTH_BASIC_PASSWORD</code> <code>changeme</code> multisite yes Password: The password required for authentication. Each password corresponds to a username. <code>AUTH_BASIC_TEXT</code> <code>Restricted area</code> multisite no Prompt Text: The message displayed in the authentication prompt shown to users. <p>Security Considerations</p> <p>HTTP Basic Authentication transmits credentials encoded (not encrypted) in Base64. While this is acceptable when used over HTTPS, it should not be considered secure over plain HTTP. Always enable SSL/TLS when using basic authentication.</p> <p>Using Multiple Credentials</p> <p>You can configure multiple username/password pairs for access. Each <code>AUTH_BASIC_USER</code> setting should have a corresponding <code>AUTH_BASIC_PASSWORD</code> setting.</p>"},{"location":"features/#example-configurations_2","title":"Example Configurations","text":"Site-wide ProtectionProtecting Specific AreasMultiple Users <p>To protect your entire website with a single set of credentials:</p> <pre><code>USE_AUTH_BASIC: \"yes\"\nAUTH_BASIC_LOCATION: \"sitewide\"\nAUTH_BASIC_USER: \"admin\"\nAUTH_BASIC_PASSWORD: \"secure_password\"\nAUTH_BASIC_TEXT: \"Admin Access Only\"\n</code></pre> <p>To only protect a specific path, such as an admin panel:</p> <pre><code>USE_AUTH_BASIC: \"yes\"\nAUTH_BASIC_LOCATION: \"/admin/\"\nAUTH_BASIC_USER: \"admin\"\nAUTH_BASIC_PASSWORD: \"secure_password\"\nAUTH_BASIC_TEXT: \"Admin Access Only\"\n</code></pre> <p>To set up multiple users with different credentials:</p> <pre><code>USE_AUTH_BASIC: \"yes\"\nAUTH_BASIC_LOCATION: \"sitewide\"\nAUTH_BASIC_TEXT: \"Staff Area\"\n\n# First user\nAUTH_BASIC_USER: \"admin\"\nAUTH_BASIC_PASSWORD: \"admin_password\"\n\n# Second user\nAUTH_BASIC_USER_2: \"editor\"\nAUTH_BASIC_PASSWORD_2: \"editor_password\"\n\n# Third user\nAUTH_BASIC_USER_3: \"viewer\"\nAUTH_BASIC_PASSWORD_3: \"viewer_password\"\n</code></pre>"},{"location":"features/#backup","title":"Backup","text":"<p>STREAM support </p> <p>The Backup plugin provides an automated backup solution to protect your BunkerWeb data. This feature ensures the safety and availability of your important database by creating regular backups according to your preferred schedule. Backups are stored in a designated location and can be easily managed through both automated processes and manual commands.</p> <p>How it works:</p> <ol> <li>Your database is automatically backed up according to the schedule you set (daily, weekly, or monthly).</li> <li>Backups are stored in a specified directory on your system.</li> <li>Old backups are automatically rotated based on your retention settings.</li> <li>You can manually create backups, list existing backups, or restore from a backup at any time.</li> <li>Before any restore operation, the current state is automatically backed up as a safety measure.</li> </ol>"},{"location":"features/#how-to-use_2","title":"How to Use","text":"<p>Follow these steps to configure and use the Backup feature:</p> <ol> <li>Enable the feature: The backup feature is enabled by default. If needed, you can control this with the <code>USE_BACKUP</code> setting.</li> <li>Configure backup schedule: Choose how often backups should occur by setting the <code>BACKUP_SCHEDULE</code> parameter.</li> <li>Set retention policy: Specify how many backups to keep using the <code>BACKUP_ROTATION</code> setting.</li> <li>Define storage location: Choose where backups will be stored using the <code>BACKUP_DIRECTORY</code> setting.</li> <li>Use CLI commands: Manage backups manually with the <code>bwcli plugin backup</code> commands when needed.</li> </ol>"},{"location":"features/#configuration-settings_2","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_BACKUP</code> <code>yes</code> global no Enable Backup: Set to <code>yes</code> to enable automatic backups. <code>BACKUP_SCHEDULE</code> <code>daily</code> global no Backup Frequency: How often to perform backups. Options: <code>daily</code>, <code>weekly</code>, or <code>monthly</code>. <code>BACKUP_ROTATION</code> <code>7</code> global no Backup Retention: The number of backup files to keep. Older backups beyond this number will be automatically deleted. <code>BACKUP_DIRECTORY</code> <code>/var/lib/bunkerweb/backups</code> global no Backup Location: The directory where backup files will be stored."},{"location":"features/#command-line-interface","title":"Command Line Interface","text":"<p>The Backup plugin provides several CLI commands to manage your backups:</p> <pre><code># List all available backups\nbwcli plugin backup list\n\n# Create a manual backup\nbwcli plugin backup save\n\n# Create a backup in a custom location\nbwcli plugin backup save --directory /path/to/custom/location\n\n# Restore from the most recent backup\nbwcli plugin backup restore\n\n# Restore from a specific backup file\nbwcli plugin backup restore /path/to/backup/backup-sqlite-2023-08-15_12-34-56.zip\n</code></pre> <p>Safety First</p> <p>Before any restore operation, the Backup plugin automatically creates a backup of your current database state in a temporary location. This provides an extra safeguard in case you need to revert the restore operation.</p> <p>Database Compatibility</p> <p>The Backup plugin supports SQLite, MySQL/MariaDB, and PostgreSQL databases. Oracle databases are not currently supported for backup and restore operations.</p>"},{"location":"features/#example-configurations_3","title":"Example Configurations","text":"Daily Backups with 7-Day RetentionWeekly Backups with Extended RetentionMonthly Backups to Custom Location <p>Default configuration that creates daily backups and keeps the most recent 7 files:</p> <pre><code>USE_BACKUP: \"yes\"\nBACKUP_SCHEDULE: \"daily\"\nBACKUP_ROTATION: \"7\"\nBACKUP_DIRECTORY: \"/var/lib/bunkerweb/backups\"\n</code></pre> <p>Configuration for less frequent backups with longer retention:</p> <pre><code>USE_BACKUP: \"yes\"\nBACKUP_SCHEDULE: \"weekly\"\nBACKUP_ROTATION: \"12\"\nBACKUP_DIRECTORY: \"/var/lib/bunkerweb/backups\"\n</code></pre> <p>Configuration for monthly backups stored in a custom location:</p> <pre><code>USE_BACKUP: \"yes\"\nBACKUP_SCHEDULE: \"monthly\"\nBACKUP_ROTATION: \"24\"\nBACKUP_DIRECTORY: \"/mnt/backup-drive/bunkerweb-backups\"\n</code></pre>"},{"location":"features/#backup-s3-pro","title":"Backup S3  (PRO)","text":"<p>STREAM support </p> <p>Automatically backup your data to an S3 bucket</p> Setting Default Context Multiple Description <code>USE_BACKUP_S3</code> <code>no</code> global no Enable or disable the S3 backup feature <code>BACKUP_S3_SCHEDULE</code> <code>daily</code> global no The frequency of the backup <code>BACKUP_S3_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_S3_ENDPOINT</code> global no The S3 endpoint <code>BACKUP_S3_BUCKET</code> global no The S3 bucket <code>BACKUP_S3_DIR</code> global no The S3 directory <code>BACKUP_S3_REGION</code> global no The S3 region <code>BACKUP_S3_ACCESS_KEY_ID</code> global no The S3 access key ID <code>BACKUP_S3_ACCESS_KEY_SECRET</code> global no The S3 access key secret <code>BACKUP_S3_COMP_LEVEL</code> <code>6</code> global no The compression level of the backup zip file"},{"location":"features/#bad-behavior","title":"Bad behavior","text":"<p>STREAM support </p> <p>The Bad Behavior plugin protects your website by automatically detecting and banning IP addresses that generate too many errors or \"bad\" HTTP status codes within a specified period of time. This helps defend against brute force attacks, web scrapers, vulnerability scanners, and other malicious activities that might generate numerous error responses.</p> <p>Attackers often generate \"suspicious\" HTTP status codes when probing for or exploiting vulnerabilities\u2014codes that a typical user is unlikely to trigger within a given time frame. By detecting this behavior, BunkerWeb can automatically ban the offending IP address, forcing the attacker to use a new IP address to continue their attempts.</p> <p>How it works:</p> <ol> <li>The plugin monitors HTTP responses from your site.</li> <li>When a visitor receives a \"bad\" HTTP status code (like 400, 401, 403, 404, etc.), the counter for that IP address is incremented.</li> <li>If an IP address exceeds the configured threshold of bad status codes within the specified time period, the IP is automatically banned.</li> <li>Banned IPs can be blocked either at the service level (just for the specific site) or globally (across all sites), depending on your configuration.</li> <li>Bans automatically expire after the configured ban duration, or remain permanent if configured with <code>0</code>.</li> </ol> <p>Key benefits</p> <ol> <li>Automatic Protection: Detects and blocks potentially malicious clients without requiring manual intervention.</li> <li>Customizable Rules: Fine-tune what constitutes \"bad behavior\" based on your specific needs.</li> <li>Resource Conservation: Prevents malicious actors from consuming server resources with repeated invalid requests.</li> <li>Flexible Scope: Choose whether bans should apply just to the current service or globally across all services.</li> <li>Ban Duration Control: Set temporary bans that automatically expire after the configured duration, or permanent bans that remain until manually removed.</li> </ol>"},{"location":"features/#how-to-use_3","title":"How to Use","text":"<p>Follow these steps to configure and use the Bad Behavior feature:</p> <ol> <li>Enable the feature: The Bad Behavior feature is enabled by default. If needed, you can control this with the <code>USE_BAD_BEHAVIOR</code> setting.</li> <li>Configure status codes: Define which HTTP status codes should be considered \"bad\" using the <code>BAD_BEHAVIOR_STATUS_CODES</code> setting.</li> <li>Set threshold values: Determine how many \"bad\" responses should trigger a ban using the <code>BAD_BEHAVIOR_THRESHOLD</code> setting.</li> <li>Configure time periods: Specify the duration for counting bad responses and the ban duration using the <code>BAD_BEHAVIOR_COUNT_TIME</code> and <code>BAD_BEHAVIOR_BAN_TIME</code> settings.</li> <li>Choose ban scope: Decide whether the bans should apply only to the current service or globally across all services using the <code>BAD_BEHAVIOR_BAN_SCOPE</code> setting.</li> </ol> <p>Stream Mode</p> <p>In stream mode, only the <code>444</code> status code is considered \"bad\" and will trigger this behavior.</p>"},{"location":"features/#configuration-settings_3","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_BAD_BEHAVIOR</code> <code>yes</code> multisite no Enable Bad Behavior: Set to <code>yes</code> to enable the bad behavior detection and banning feature. <code>BAD_BEHAVIOR_STATUS_CODES</code> <code>400 401 403 404 405 429 444</code> multisite no Bad Status Codes: List of HTTP status codes that will be counted as \"bad\" behavior when returned to a client. <code>BAD_BEHAVIOR_THRESHOLD</code> <code>10</code> multisite no Threshold: The number of \"bad\" status codes an IP can generate within the counting period before being banned. <code>BAD_BEHAVIOR_COUNT_TIME</code> <code>60</code> multisite no Count Period: The time window (in seconds) during which bad status codes are counted toward the threshold. <code>BAD_BEHAVIOR_BAN_TIME</code> <code>86400</code> multisite no Ban Duration: How long (in seconds) an IP will remain banned after exceeding the threshold. Default is 24 hours (86400 seconds). Set to <code>0</code> for permanent bans that never expire. <code>BAD_BEHAVIOR_BAN_SCOPE</code> <code>service</code> global no Ban Scope: Determines whether bans apply only to the current service (<code>service</code>) or to all services (<code>global</code>). <p>False Positives</p> <p>Be careful when setting the threshold and count time. Setting these values too low may inadvertently ban legitimate users who encounter errors while browsing your site.</p> <p>Tuning Your Configuration</p> <p>Start with conservative settings (higher threshold, shorter ban time) and adjust based on your specific needs and traffic patterns. Monitor your logs to ensure that legitimate users are not mistakenly banned.</p>"},{"location":"features/#example-configurations_4","title":"Example Configurations","text":"Default ConfigurationStrict ConfigurationLenient ConfigurationPermanent Ban Configuration <p>The default configuration provides a balanced approach suitable for most websites:</p> <pre><code>USE_BAD_BEHAVIOR: \"yes\"\nBAD_BEHAVIOR_STATUS_CODES: \"400 401 403 404 405 429 444\"\nBAD_BEHAVIOR_THRESHOLD: \"10\"\nBAD_BEHAVIOR_COUNT_TIME: \"60\"\nBAD_BEHAVIOR_BAN_TIME: \"86400\"\nBAD_BEHAVIOR_BAN_SCOPE: \"service\"\n</code></pre> <p>For high-security applications where you want to be more aggressive in banning potential threats:</p> <pre><code>USE_BAD_BEHAVIOR: \"yes\"\nBAD_BEHAVIOR_STATUS_CODES: \"400 401 403 404 405 429 444 500 502 503\"\nBAD_BEHAVIOR_THRESHOLD: \"5\"\nBAD_BEHAVIOR_COUNT_TIME: \"120\"\nBAD_BEHAVIOR_BAN_TIME: \"604800\"  # 7 days\nBAD_BEHAVIOR_BAN_SCOPE: \"global\" # Ban across all services\n</code></pre> <p>For sites with high legitimate traffic where you want to avoid false positives:</p> <pre><code>USE_BAD_BEHAVIOR: \"yes\"\nBAD_BEHAVIOR_STATUS_CODES: \"401 403 429\"  # Only count unauthorized, forbidden, and rate limited\nBAD_BEHAVIOR_THRESHOLD: \"20\"\nBAD_BEHAVIOR_COUNT_TIME: \"30\"\nBAD_BEHAVIOR_BAN_TIME: \"3600\"  # 1 hour\nBAD_BEHAVIOR_BAN_SCOPE: \"service\"\n</code></pre> <p>For scenarios where you want detected attackers permanently banned until manually unbanned:</p> <pre><code>USE_BAD_BEHAVIOR: \"yes\"\nBAD_BEHAVIOR_STATUS_CODES: \"400 401 403 404 405 429 444\"\nBAD_BEHAVIOR_THRESHOLD: \"10\"\nBAD_BEHAVIOR_COUNT_TIME: \"60\"\nBAD_BEHAVIOR_BAN_TIME: \"0\"  # Permanent ban (never expires)\nBAD_BEHAVIOR_BAN_SCOPE: \"global\" # Ban across all services\n</code></pre>"},{"location":"features/#blacklist","title":"Blacklist","text":"<p>STREAM support </p> <p>The Blacklist plugin provides robust protection for your website by blocking access based on various client attributes. This feature defends against known malicious entities, scanners, and suspicious visitors by denying access based on IP addresses, networks, reverse DNS entries, ASNs, user agents, and specific URI patterns.</p> <p>How it works:</p> <ol> <li>The plugin checks incoming requests against multiple blacklist criteria (IP addresses, networks, rDNS, ASN, User-Agent, or URI patterns).</li> <li>Blacklists can be specified directly in your configuration or loaded from external URLs.</li> <li>If a visitor matches any blacklist rule (and does not match any ignore rule), access is denied.</li> <li>Blacklists are automatically updated on a regular schedule from configured URLs.</li> <li>You can customize exactly which criteria are checked and ignored based on your specific security needs.</li> </ol>"},{"location":"features/#how-to-use_4","title":"How to Use","text":"<p>Follow these steps to configure and use the Blacklist feature:</p> <ol> <li>Enable the feature: The Blacklist feature is enabled by default. If needed, you can control this with the <code>USE_BLACKLIST</code> setting.</li> <li>Configure block rules: Define which IPs, networks, rDNS patterns, ASNs, User-Agents, or URIs should be blocked.</li> <li>Set up ignore rules: Specify any exceptions that should bypass the blacklist checks.</li> <li>Add external sources: Configure URLs for automatically downloading and updating blacklist data.</li> <li>Monitor effectiveness: Check the web UI to see statistics on blocked requests.</li> </ol> <p>stream mode</p> <p>When using stream mode, only IP, rDNS, and ASN checks will be performed.</p>"},{"location":"features/#configuration-settings_4","title":"Configuration Settings","text":"<p>General</p> Setting Default Context Multiple Description <code>USE_BLACKLIST</code> <code>yes</code> multisite no Enable Blacklist: Set to <code>yes</code> to enable the blacklist feature. <code>BLACKLIST_COMMUNITY_LISTS</code> <code>ip:danmeuk-tor-exit ua:mitchellkrogza-bad-user-agents</code> multisite no Community Blacklists: Select pre-configured community-maintained blacklists to include in blocking. Community BlacklistsIP AddressReverse DNSASNUser AgentURI <p>What this does: Enables you to quickly add well-maintained, community-sourced blacklists without having to manually configure URLs.</p> <p>The <code>BLACKLIST_COMMUNITY_LISTS</code> setting allows you to select from curated blacklist sources. Available options include:</p> ID Description Source <code>ip:laurent-minne-data-shield-aggressive</code> Data-Shield IPv4 Blocklist. DST = Europa <code>https://raw.githubusercontent.com/duggytuxy/Data-Shield_IPv4_Blocklist/refs/heads/main/prod_data-shield_ipv4_blocklist.txt</code> <code>ip:danmeuk-tor-exit</code> Tor Exit Nodes IPs (dan.me.uk) <code>https://www.dan.me.uk/torlist/?exit</code> <code>ua:mitchellkrogza-bad-user-agents</code> Nginx Block Bad Bots, Spam Referrer Blocker, Vulnerability Scanners, User-Agents, Malware, Adware, Ransomware, Malicious Sites, with anti-DDOS, Wordpress Theme Detector Blocking and Fail2Ban Jail for Repeat Offenders <code>https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list</code> <p>Configuration: Specify multiple lists separated by spaces. For example: <pre><code>BLACKLIST_COMMUNITY_LISTS: \"ip:danmeuk-tor-exit ua:mitchellkrogza-bad-user-agents\"\n</code></pre></p> <p>Community vs Manual Configuration</p> <p>Community blacklists provide a convenient way to get started with proven blacklist sources. You can use them alongside manual URL configurations for maximum flexibility.</p> <p>What this does: Blocks visitors based on their IP address or network.</p> Setting Default Context Multiple Description <code>BLACKLIST_IP</code> multisite no IP Blacklist: List of IP addresses or networks (CIDR notation) to block, separated by spaces. <code>BLACKLIST_IGNORE_IP</code> multisite no IP Ignore List: List of IP addresses or networks that should bypass IP blacklist checks. <code>BLACKLIST_IP_URLS</code> <code>https://www.dan.me.uk/torlist/?exit</code> multisite no IP Blacklist URLs: List of URLs containing IP addresses or networks to block, separated by spaces. <code>BLACKLIST_IGNORE_IP_URLS</code> multisite no IP Ignore List URLs: List of URLs containing IP addresses or networks to ignore. <p>The default <code>BLACKLIST_IP_URLS</code> setting includes a URL that provides a list of known Tor exit nodes. This is a common source of malicious traffic and is a good starting point for many sites.</p> <p>What this does: Blocks visitors based on their reverse domain name. This is useful for blocking known scanners and crawlers based on their organization domains.</p> Setting Default Context Multiple Description <code>BLACKLIST_RDNS</code> <code>.shodan.io .censys.io</code> multisite no rDNS Blacklist: List of reverse DNS suffixes to block, separated by spaces. <code>BLACKLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no rDNS Global Only: Only perform rDNS checks on global IP addresses when set to <code>yes</code>. <code>BLACKLIST_IGNORE_RDNS</code> multisite no rDNS Ignore List: List of reverse DNS suffixes that should bypass rDNS blacklist checks. <code>BLACKLIST_RDNS_URLS</code> multisite no rDNS Blacklist URLs: List of URLs containing reverse DNS suffixes to block, separated by spaces. <code>BLACKLIST_IGNORE_RDNS_URLS</code> multisite no rDNS Ignore List URLs: List of URLs containing reverse DNS suffixes to ignore. <p>The default <code>BLACKLIST_RDNS</code> setting includes common scanner domains like Shodan and Censys. These are often used by security researchers and scanners to identify vulnerable sites.</p> <p>What this does: Blocks visitors from specific network providers. ASNs are like ZIP codes for the Internet\u2014they identify which provider or organization an IP belongs to.</p> Setting Default Context Multiple Description <code>BLACKLIST_ASN</code> multisite no ASN Blacklist: List of Autonomous System Numbers to block, separated by spaces. <code>BLACKLIST_IGNORE_ASN</code> multisite no ASN Ignore List: List of ASNs that should bypass ASN blacklist checks. <code>BLACKLIST_ASN_URLS</code> multisite no ASN Blacklist URLs: List of URLs containing ASNs to block, separated by spaces. <code>BLACKLIST_IGNORE_ASN_URLS</code> multisite no ASN Ignore List URLs: List of URLs containing ASNs to ignore. <p>What this does: Blocks visitors based on the browser or tool they claim to be using. This is effective against bots that honestly identify themselves (such as \"ScannerBot\" or \"WebHarvestTool\").</p> Setting Default Context Multiple Description <code>BLACKLIST_USER_AGENT</code> multisite no User-Agent Blacklist: List of User-Agent patterns (PCRE regex) to block, separated by spaces. <code>BLACKLIST_IGNORE_USER_AGENT</code> multisite no User-Agent Ignore List: List of User-Agent patterns that should bypass User-Agent blacklist checks. <code>BLACKLIST_USER_AGENT_URLS</code> <code>https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list</code> multisite no User-Agent Blacklist URLs: List of URLs containing User-Agent patterns to block. <code>BLACKLIST_IGNORE_USER_AGENT_URLS</code> multisite no User-Agent Ignore List URLs: List of URLs containing User-Agent patterns to ignore. <p>The default <code>BLACKLIST_USER_AGENT_URLS</code> setting includes a URL that provides a list of known bad user agents. These are often used by malicious bots and scanners to identify vulnerable sites.</p> <p>What this does: Blocks requests to specific URLs on your site. This is helpful for blocking attempts to access admin pages, login forms, or other sensitive areas that might be targeted.</p> Setting Default Context Multiple Description <code>BLACKLIST_URI</code> multisite no URI Blacklist: List of URI patterns (PCRE regex) to block, separated by spaces. <code>BLACKLIST_IGNORE_URI</code> multisite no URI Ignore List: List of URI patterns that should bypass URI blacklist checks. <code>BLACKLIST_URI_URLS</code> multisite no URI Blacklist URLs: List of URLs containing URI patterns to block, separated by spaces. <code>BLACKLIST_IGNORE_URI_URLS</code> multisite no URI Ignore List URLs: List of URLs containing URI patterns to ignore. <p>URL Format Support</p> <p>All <code>*_URLS</code> settings support HTTP/HTTPS URLs as well as local file paths using the <code>file:///</code> prefix. Basic authentication is supported using the <code>http://user:pass@url</code> format.</p> <p>Regular Updates</p> <p>Blacklists from URLs are automatically downloaded and updated hourly to ensure your protection remains current against the latest threats.</p>"},{"location":"features/#example-configurations_5","title":"Example Configurations","text":"Basic IP and User-Agent ProtectionAdvanced Protection with Custom RulesUsing Local Files <p>A simple configuration that blocks known Tor exit nodes and common bad user agents using community blacklists:</p> <pre><code>USE_BLACKLIST: \"yes\"\nBLACKLIST_COMMUNITY_LISTS: \"ip:danmeuk-tor-exit ua:mitchellkrogza-bad-user-agents\"\n</code></pre> <p>Alternatively, you can use manual URL configuration:</p> <pre><code>USE_BLACKLIST: \"yes\"\nBLACKLIST_IP_URLS: \"https://www.dan.me.uk/torlist/?exit\"\nBLACKLIST_USER_AGENT_URLS: \"https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list\"\n</code></pre> <p>A more comprehensive configuration with custom blacklist entries and exceptions:</p> <pre><code>USE_BLACKLIST: \"yes\"\n\n# Custom blacklist entries\nBLACKLIST_IP: \"192.168.1.100 203.0.113.0/24\"\nBLACKLIST_RDNS: \".shodan.io .censys.io .scanner.com\"\nBLACKLIST_ASN: \"16509 14618\"  # AWS and Amazon ASNs\nBLACKLIST_USER_AGENT: \"(?:\\b)SemrushBot(?:\\b) (?:\\b)AhrefsBot(?:\\b)\"\nBLACKLIST_URI: \"^/wp-login\\.php$ ^/administrator/\"\n\n# Custom ignore rules\nBLACKLIST_IGNORE_IP: \"192.168.1.200 203.0.113.42\"\n\n# External blacklist sources\nBLACKLIST_IP_URLS: \"https://www.dan.me.uk/torlist/?exit https://www.spamhaus.org/drop/drop.txt\"\nBLACKLIST_USER_AGENT_URLS: \"https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list\"\n</code></pre> <p>Configuration using local files for blacklists:</p> <pre><code>USE_BLACKLIST: \"yes\"\nBLACKLIST_IP_URLS: \"file:///path/to/ip-blacklist.txt\"\nBLACKLIST_RDNS_URLS: \"file:///path/to/rdns-blacklist.txt\"\nBLACKLIST_ASN_URLS: \"file:///path/to/asn-blacklist.txt\"\nBLACKLIST_USER_AGENT_URLS: \"file:///path/to/user-agent-blacklist.txt\"\nBLACKLIST_URI_URLS: \"file:///path/to/uri-blacklist.txt\"\n</code></pre>"},{"location":"features/#brotli","title":"Brotli","text":"<p>STREAM support </p> <p>The Brotli plugin enables efficient compression of HTTP responses using the Brotli algorithm. This feature helps reduce bandwidth usage and improve page load times by compressing web content before it is sent to the client's browser.</p> <p>Compared to other compression methods like gzip, Brotli typically achieves higher compression ratios, resulting in smaller file sizes and faster content delivery.</p> <p>How it works:</p> <ol> <li>When a client requests content from your website, BunkerWeb checks if the client supports Brotli compression.</li> <li>If supported, BunkerWeb compresses the response using the Brotli algorithm at your configured compression level.</li> <li>The compressed content is sent to the client with appropriate headers indicating Brotli compression.</li> <li>The client's browser decompresses the content before rendering it to the user.</li> <li>Both bandwidth usage and page load times are reduced, improving overall user experience.</li> </ol>"},{"location":"features/#how-to-use_5","title":"How to Use","text":"<p>Follow these steps to configure and use the Brotli compression feature:</p> <ol> <li>Enable the feature: The Brotli feature is disabled by default. Enable it by setting the <code>USE_BROTLI</code> setting to <code>yes</code>.</li> <li>Configure MIME types: Specify which content types should be compressed using the <code>BROTLI_TYPES</code> setting.</li> <li>Set minimum size: Define the minimum response size for compression with <code>BROTLI_MIN_LENGTH</code> to avoid compressing tiny files.</li> <li>Choose compression level: Select your preferred balance between speed and compression ratio with <code>BROTLI_COMP_LEVEL</code>.</li> <li>Let BunkerWeb handle the rest: Once configured, compression happens automatically for eligible responses.</li> </ol>"},{"location":"features/#configuration-settings_5","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_BROTLI</code> <code>no</code> multisite no Enable Brotli: Set to <code>yes</code> to enable Brotli compression. <code>BROTLI_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no MIME Types: List of content types that will be compressed with Brotli. <code>BROTLI_MIN_LENGTH</code> <code>1000</code> multisite no Minimum Size: The minimum response size (in bytes) for Brotli compression to be applied. <code>BROTLI_COMP_LEVEL</code> <code>6</code> multisite no Compression Level: Level of compression from 0 (no compression) to 11 (maximum compression). Higher values use more CPU. <p>Optimizing Compression Level</p> <p>The default compression level (6) offers a good balance between compression ratio and CPU usage. For static content or when server CPU resources are plentiful, consider increasing to 9-11 for maximum compression. For dynamic content or when CPU resources are limited, you might want to use 4-5 for faster compression with reasonable size reduction.</p> <p>Browser Support</p> <p>Brotli is supported by all modern browsers including Chrome, Firefox, Edge, Safari, and Opera. Older browsers will automatically receive uncompressed content, ensuring compatibility.</p>"},{"location":"features/#example-configurations_6","title":"Example Configurations","text":"Basic ConfigurationMaximum CompressionBalanced Performance <p>A standard configuration that enables Brotli with default settings:</p> <pre><code>USE_BROTLI: \"yes\"\nBROTLI_TYPES: \"application/javascript application/json application/xml application/xhtml+xml text/css text/html text/javascript text/plain text/xml\"\nBROTLI_MIN_LENGTH: \"1000\"\nBROTLI_COMP_LEVEL: \"6\"\n</code></pre> <p>Configuration optimized for maximum compression savings:</p> <pre><code>USE_BROTLI: \"yes\"\nBROTLI_TYPES: \"application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml\"\nBROTLI_MIN_LENGTH: \"500\"\nBROTLI_COMP_LEVEL: \"11\"\n</code></pre> <p>Configuration that balances compression ratio with CPU usage:</p> <pre><code>USE_BROTLI: \"yes\"\nBROTLI_TYPES: \"application/javascript application/json text/css text/html text/javascript text/plain\"\nBROTLI_MIN_LENGTH: \"1000\"\nBROTLI_COMP_LEVEL: \"4\"\n</code></pre>"},{"location":"features/#bunkernet","title":"BunkerNet","text":"<p>STREAM support </p> <p>The BunkerNet plugin enables collective threat intelligence sharing between BunkerWeb instances, creating a powerful network of protection against malicious actors. By participating in BunkerNet, your instance both benefits from and contributes to a global database of known threats, enhancing security for the entire BunkerWeb community.</p> <p>How it works:</p> <ol> <li>Your BunkerWeb instance automatically registers with the BunkerNet API to receive a unique identifier.</li> <li>When your instance detects and blocks a malicious IP address or behavior, it anonymously reports the threat to BunkerNet.</li> <li>BunkerNet aggregates threat intelligence from all participating instances and distributes the consolidated database.</li> <li>Your instance regularly downloads an updated database of known threats from BunkerNet.</li> <li>This collective intelligence allows your instance to proactively block IP addresses that have exhibited malicious behavior on other BunkerWeb instances.</li> </ol> <p>Key benefits</p> <ol> <li>Collective Defense: Leverage the security findings from thousands of other BunkerWeb instances globally.</li> <li>Proactive Protection: Block malicious actors before they can target your site based on their behavior elsewhere.</li> <li>Community Contribution: Help protect other BunkerWeb users by sharing anonymized threat data about attackers.</li> <li>Zero Configuration: Works out of the box with sensible defaults, requiring minimal setup.</li> <li>Privacy Focused: Only shares necessary threat information without compromising your or your users' privacy.</li> </ol>"},{"location":"features/#how-to-use_6","title":"How to Use","text":"<p>Follow these steps to configure and use the BunkerNet feature:</p> <ol> <li>Enable the feature: The BunkerNet feature is enabled by default. If needed, you can control this with the <code>USE_BUNKERNET</code> setting.</li> <li>Initial registration: Upon first startup, your instance will automatically register with the BunkerNet API and receive a unique identifier.</li> <li>Automatic updates: Your instance will automatically download the latest threat database on a regular schedule.</li> <li>Automatic reporting: When your instance blocks a malicious IP address, it will automatically contribute this data to the community.</li> <li>Monitor protection: Check the web UI to see statistics on threats blocked by BunkerNet intelligence.</li> </ol>"},{"location":"features/#configuration-settings_6","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_BUNKERNET</code> <code>yes</code> multisite no Enable BunkerNet: Set to <code>yes</code> to enable the BunkerNet threat intelligence sharing. <code>BUNKERNET_SERVER</code> <code>https://api.bunkerweb.io</code> global no BunkerNet Server: The address of the BunkerNet API server for sharing threat intelligence. <p>Network Protection</p> <p>When BunkerNet detects that an IP address has been involved in malicious activity across multiple BunkerWeb instances, it adds that IP to a collective blacklist. This provides a proactive defense layer, protecting your site from threats before they can target you directly.</p> <p>Anonymous Reporting</p> <p>When reporting threat information to BunkerNet, your instance only shares the necessary data to identify the threat: the IP address, the reason for blocking, and minimal contextual data. No personal information about your users or sensitive details about your site is shared.</p>"},{"location":"features/#example-configurations_7","title":"Example Configurations","text":"Default Configuration (Recommended)Disabled ConfigurationCustom Server Configuration <p>The default configuration enables BunkerNet with the official BunkerWeb API server:</p> <pre><code>USE_BUNKERNET: \"yes\"\nBUNKERNET_SERVER: \"https://api.bunkerweb.io\"\n</code></pre> <p>If you prefer not to participate in the BunkerNet threat intelligence network:</p> <pre><code>USE_BUNKERNET: \"no\"\n</code></pre> <p>For organizations running their own BunkerNet server (uncommon):</p> <pre><code>USE_BUNKERNET: \"yes\"\nBUNKERNET_SERVER: \"https://bunkernet.example.com\"\n</code></pre>"},{"location":"features/#crowdsec-console-integration","title":"CrowdSec Console integration","text":"<p>If you aren\u2019t already familiar with CrowdSec Console integration, CrowdSec leverages crowdsourced intelligence to combat cyber threats. Think of it as the \"Waze of cybersecurity\"\u2014when one server is attacked, other systems worldwide are alerted and protected from the same attackers. You can learn more about it here.</p> <p>Through our partnership with CrowdSec, you can enroll your BunkerWeb instances into your CrowdSec Console. This means that attacks blocked by BunkerWeb will be visible in your CrowdSec Console alongside attacks blocked by CrowdSec Security Engines, giving you a unified view of threats.</p> <p>Importantly, CrowdSec does not need to be installed for this integration (though we highly recommend trying it out with the CrowdSec plugin for BunkerWeb to further enhance the security of your web services). Additionally, you can enroll your CrowdSec Security Engines into the same Console account for even greater synergy.</p> <p>Step #1: Create your CrowdSec Console account</p> <p>Go to the CrowdSec Console and register if you don\u2019t already have an account. Once done, note the enroll key found under \"Security Engines\" after clicking on \"Add Security Engine\":</p> <p> </p> Get your Crowdsec Console enroll key <p>Step #2: Get your BunkerNet ID</p> <p>Activating the BunkerNet feature (enabled by default) is mandatory if you want to enroll your BunkerWeb instance(s) in your CrowdSec Console. Enable it by setting <code>USE_BUNKERNET</code> to <code>yes</code>.</p> <p>For Docker, get your BunkerNet ID using:</p> <pre><code>docker exec my-bw-scheduler cat /var/cache/bunkerweb/bunkernet/instance.id\n</code></pre> <p>For Linux, use:</p> <pre><code>cat /var/cache/bunkerweb/bunkernet/instance.id\n</code></pre> <p>Step #3: Enroll your instance using the Panel</p> <p>Once you have your BunkerNet ID and CrowdSec Console enroll key, order the free product \"BunkerNet / CrowdSec\" on the Panel. You may be prompted to create an account if you haven\u2019t already.</p> <p>You can now select the \"BunkerNet / CrowdSec\" service and fill out the form by pasting your BunkerNet ID and CrowdSec Console enroll key:</p> <p> </p> Enroll your BunkerWeb instance into the CrowdSec Console <p>Step #4: Accept the new security engine on the Console</p> <p>Then, go back to your CrowdSec Console and accept the new Security Engine:</p> <p> </p> Accept enroll into the CrowdSec Console <p>Congratulations, your BunkerWeb instance is now enrolled in your CrowdSec Console!</p> <p>Pro tip: When viewing your alerts, click the \"columns\" option and check the \"context\" checkbox to access BunkerWeb-specific data.</p> <p> </p> BunkerWeb data shown in the context column"},{"location":"features/#cors","title":"CORS","text":"<p>STREAM support </p> <p>The CORS plugin enables Cross-Origin Resource Sharing for your website, allowing controlled access to your resources from different domains. This feature helps you safely share your content with trusted third-party websites while maintaining security by explicitly defining which origins, methods, and headers are permitted.</p> <p>How it works:</p> <ol> <li>When a browser makes a cross-origin request to your website, it first sends a preflight request with the <code>OPTIONS</code> method.</li> <li>BunkerWeb checks if the requesting origin is permitted based on your configuration.</li> <li>If allowed, BunkerWeb responds with the appropriate CORS headers that define what the requesting site can do.</li> <li>For non-permitted origins, the request can be either completely denied or served without CORS headers.</li> <li>Additional cross-origin policies, such as COEP, COOP, and CORP, can be configured to further enhance security.</li> </ol>"},{"location":"features/#how-to-use_7","title":"How to Use","text":"<p>Follow these steps to configure and use the CORS feature:</p> <ol> <li>Enable the feature: The CORS feature is disabled by default. Set the <code>USE_CORS</code> setting to <code>yes</code> to enable it.</li> <li>Configure allowed origins: Specify which domains can access your resources using the <code>CORS_ALLOW_ORIGIN</code> setting.</li> <li>Set permitted methods: Define which HTTP methods are allowed for cross-origin requests with <code>CORS_ALLOW_METHODS</code>.</li> <li>Configure allowed headers: Specify which headers can be used in requests with <code>CORS_ALLOW_HEADERS</code>.</li> <li>Control credentials: Decide whether cross-origin requests can include credentials using <code>CORS_ALLOW_CREDENTIALS</code>.</li> </ol>"},{"location":"features/#configuration-settings_7","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_CORS</code> <code>no</code> multisite no Enable CORS: Set to <code>yes</code> to enable Cross-Origin Resource Sharing. <code>CORS_ALLOW_ORIGIN</code> <code>self</code> multisite no Allowed Origins: PCRE regular expression representing allowed origins; use <code>*</code> for any origin, or <code>self</code> for same-origin only. <code>CORS_ALLOW_METHODS</code> <code>GET, POST, OPTIONS</code> multisite no Allowed Methods: HTTP methods that can be used in cross-origin requests. <code>CORS_ALLOW_HEADERS</code> <code>DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range</code> multisite no Allowed Headers: HTTP headers that can be used in cross-origin requests. <code>CORS_ALLOW_CREDENTIALS</code> <code>no</code> multisite no Allow Credentials: Set to <code>yes</code> to allow credentials (cookies, HTTP authentication) in CORS requests. <code>CORS_EXPOSE_HEADERS</code> <code>Content-Length,Content-Range</code> multisite no Exposed Headers: HTTP headers that browsers are permitted to access from cross-origin responses. <code>CROSS_ORIGIN_OPENER_POLICY</code> <code>same-origin</code> multisite no Cross-Origin-Opener-Policy: Controls communication between browsing contexts. <code>CROSS_ORIGIN_EMBEDDER_POLICY</code> <code>require-corp</code> multisite no Cross-Origin-Embedder-Policy: Controls whether a document can load resources from other origins. <code>CROSS_ORIGIN_RESOURCE_POLICY</code> <code>same-site</code> multisite no Cross-Origin-Resource-Policy: Controls which websites can embed your resources. <code>CORS_MAX_AGE</code> <code>86400</code> multisite no Preflight Cache Duration: How long (in seconds) browsers should cache the preflight response. <code>CORS_DENY_REQUEST</code> <code>yes</code> multisite no Deny Unauthorized Origins: When <code>yes</code>, requests from unauthorized origins are denied with an error code. <p>Optimizing Preflight Requests</p> <p>The <code>CORS_MAX_AGE</code> setting determines how long browsers will cache the results of a preflight request. Setting this to a higher value (like the default 86400 seconds/24 hours) reduces the number of preflight requests, improving performance for frequently accessed resources.</p> <p>Security Considerations</p> <p>Be cautious when setting <code>CORS_ALLOW_ORIGIN</code> to <code>*</code> (all origins) or <code>CORS_ALLOW_CREDENTIALS</code> to <code>yes</code> because these configurations may introduce security risks if not properly managed. It's generally safer to explicitly list trusted origins and limit the allowed methods and headers.</p>"},{"location":"features/#example-configurations_8","title":"Example Configurations","text":"<p>Here are examples of possible values for the <code>CORS_ALLOW_ORIGIN</code> setting, along with their behavior:</p> <ul> <li><code>*</code>: Allows requests from all origins.</li> <li><code>self</code>: Automatically allows requests from the same origin as the configured server_name.</li> <li><code>^https://www\\.example\\.com$</code>: Allows requests only from <code>https://www.example.com</code>.</li> <li><code>^https://.+\\.example\\.com$</code>: Allows requests from any subdomain ending with <code>.example.com</code>.</li> <li><code>^https://(www\\.example1\\.com|www\\.example2\\.com)$</code>: Allows requests from either <code>https://www.example1.com</code> or <code>https://www.example2.com</code>.</li> <li><code>^https?://www\\.example\\.com$</code>: Allows requests from both <code>https://www.example.com</code> and <code>http://www.example.com</code>.</li> </ul> Basic ConfigurationPublic API ConfigurationMultiple Trusted DomainsSubdomain WildcardMultiple Domain Patterns <p>A simple configuration allowing cross-origin requests from the same domain:</p> <pre><code>USE_CORS: \"yes\"\nCORS_ALLOW_ORIGIN: \"self\"\nCORS_ALLOW_METHODS: \"GET, POST, OPTIONS\"\nCORS_ALLOW_HEADERS: \"Content-Type, Authorization\"\nCORS_ALLOW_CREDENTIALS: \"no\"\nCORS_DENY_REQUEST: \"yes\"\n</code></pre> <p>Configuration for a public API that needs to be accessible from any origin:</p> <pre><code>USE_CORS: \"yes\"\nCORS_ALLOW_ORIGIN: \"*\"\nCORS_ALLOW_METHODS: \"GET, OPTIONS\"\nCORS_ALLOW_HEADERS: \"Content-Type, X-API-Key\"\nCORS_ALLOW_CREDENTIALS: \"no\"\nCORS_MAX_AGE: \"3600\"\nCORS_DENY_REQUEST: \"no\"\n</code></pre> <p>Configuration for allowing multiple specific domains with a single PCRE regular expression pattern:</p> <pre><code>USE_CORS: \"yes\"\nCORS_ALLOW_ORIGIN: \"^https://(app|api|dashboard)\\\\.example\\\\.com$\"\nCORS_ALLOW_METHODS: \"GET, POST, PUT, DELETE, OPTIONS\"\nCORS_ALLOW_HEADERS: \"Content-Type, Authorization, X-Requested-With\"\nCORS_ALLOW_CREDENTIALS: \"yes\"\nCORS_EXPOSE_HEADERS: \"Content-Length, Content-Range, X-RateLimit-Remaining\"\nCORS_MAX_AGE: \"86400\"\nCORS_DENY_REQUEST: \"yes\"\n</code></pre> <p>Configuration allowing all subdomains of a primary domain using a PCRE regular expression pattern:</p> <pre><code>USE_CORS: \"yes\"\nCORS_ALLOW_ORIGIN: \"^https://.*\\\\.example\\\\.com$\"\nCORS_ALLOW_METHODS: \"GET, POST, OPTIONS\"\nCORS_ALLOW_HEADERS: \"Content-Type, Authorization\"\nCORS_ALLOW_CREDENTIALS: \"no\"\nCORS_MAX_AGE: \"86400\"\nCORS_DENY_REQUEST: \"yes\"\n</code></pre> <p>Configuration allowing requests from multiple domain patterns with alternation:</p> <pre><code>USE_CORS: \"yes\"\nCORS_ALLOW_ORIGIN: \"^https://(.*\\\\.example\\\\.com|.*\\\\.trusted-partner\\\\.org|api\\\\.third-party\\\\.net)$\"\nCORS_ALLOW_METHODS: \"GET, POST, PUT, OPTIONS\"\nCORS_ALLOW_HEADERS: \"Content-Type, Authorization, X-Custom-Header\"\nCORS_ALLOW_CREDENTIALS: \"no\"\nCORS_MAX_AGE: \"86400\"\nCORS_DENY_REQUEST: \"yes\"\n</code></pre>"},{"location":"features/#client-cache","title":"Client cache","text":"<p>STREAM support </p> <p>The Client Cache plugin optimizes website performance by controlling how browsers cache static content. It reduces bandwidth usage, lowers server load, and improves page load times by instructing browsers to store and reuse static assets\u2014such as images, CSS, and JavaScript files\u2014locally instead of requesting them on every page visit.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb adds Cache-Control headers to responses for static files.</li> <li>These headers tell browsers how long they should cache the content locally.</li> <li>For files with specified extensions (like images, CSS, JavaScript), BunkerWeb applies the configured caching policy.</li> <li>Optional ETag support provides an additional validation mechanism to determine whether cached content is still fresh.</li> <li>When visitors return to your site, their browsers can use locally cached files instead of downloading them again, resulting in faster page load times.</li> </ol>"},{"location":"features/#how-to-use_8","title":"How to Use","text":"<p>Follow these steps to configure and use the Client Cache feature:</p> <ol> <li>Enable the feature: The Client Cache feature is disabled by default; set the <code>USE_CLIENT_CACHE</code> setting to <code>yes</code> to enable it.</li> <li>Configure file extensions: Specify which file types should be cached using the <code>CLIENT_CACHE_EXTENSIONS</code> setting.</li> <li>Set cache control directives: Customize how clients should cache content using the <code>CLIENT_CACHE_CONTROL</code> setting.</li> <li>Configure ETag support: Decide whether to enable ETags for validating cache freshness with the <code>CLIENT_CACHE_ETAG</code> setting.</li> <li>Let BunkerWeb handle the rest: Once configured, caching headers are applied automatically to eligible responses.</li> </ol>"},{"location":"features/#configuration-settings_8","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_CLIENT_CACHE</code> <code>no</code> multisite no Enable Client Cache: Set to <code>yes</code> to enable client-side caching of static files. <code>CLIENT_CACHE_EXTENSIONS</code> <code>jpg                       | jpeg      | png      | bmp                                                                                            | ico | svg | tif | css | js | otf | ttf | eot | woff | woff2</code> global no Cacheable Extensions: List of file extensions (separated by pipes) that should be cached by the client. <code>CLIENT_CACHE_CONTROL</code> <code>public, max-age=15552000</code> multisite no Cache-Control Header: Value for the Cache-Control HTTP header to control caching behavior. <code>CLIENT_CACHE_ETAG</code> <code>yes</code> multisite no Enable ETags: Set to <code>yes</code> to send the HTTP ETag header for static resources. <p>Optimizing Cache Settings</p> <p>For frequently updated content, consider using shorter max-age values. For content that rarely changes (like versioned JavaScript libraries or logos), use longer cache times. The default value of 15552000 seconds (180 days) is appropriate for most static assets.</p> <p>Browser Behavior</p> <p>Different browsers implement caching slightly differently, but all modern browsers honor standard Cache-Control directives. ETags provide an additional validation mechanism that helps browsers determine if cached content is still valid.</p>"},{"location":"features/#example-configurations_9","title":"Example Configurations","text":"Basic ConfigurationAggressive CachingMixed Content Strategy <p>A simple configuration that enables caching for common static assets:</p> <pre><code>USE_CLIENT_CACHE: \"yes\"\nCLIENT_CACHE_EXTENSIONS: \"jpg|jpeg|png|gif|css|js|svg|woff|woff2\"\nCLIENT_CACHE_CONTROL: \"public, max-age=86400\"  # 1 day\nCLIENT_CACHE_ETAG: \"yes\"\n</code></pre> <p>Configuration optimized for maximum caching, suitable for sites with infrequently updated static content:</p> <pre><code>USE_CLIENT_CACHE: \"yes\"\nCLIENT_CACHE_EXTENSIONS: \"jpg|jpeg|png|bmp|ico|svg|tif|gif|css|js|otf|ttf|eot|woff|woff2|pdf|xml|txt\"\nCLIENT_CACHE_CONTROL: \"public, max-age=31536000, immutable\"  # 1 year\nCLIENT_CACHE_ETAG: \"yes\"\n</code></pre> <p>For sites with a mix of frequently and infrequently updated content, consider using file versioning in your application and a configuration like this:</p> <pre><code>USE_CLIENT_CACHE: \"yes\"\nCLIENT_CACHE_EXTENSIONS: \"jpg|jpeg|png|bmp|ico|svg|tif|gif|css|js|otf|ttf|eot|woff|woff2\"\nCLIENT_CACHE_CONTROL: \"public, max-age=604800\"  # 1 week\nCLIENT_CACHE_ETAG: \"yes\"\n</code></pre>"},{"location":"features/#country","title":"Country","text":"<p>STREAM support </p> <p>The Country plugin enables geo-blocking functionality for your website, allowing you to restrict access based on the geographic location of your visitors. This feature helps you comply with regional regulations, prevent fraudulent activities often associated with high-risk regions, and implement content restrictions based on geographic boundaries.</p> <p>How it works:</p> <ol> <li>When a visitor accesses your website, BunkerWeb determines their country based on their IP address.</li> <li>Your configuration specifies either a whitelist (allowed countries) or a blacklist (blocked countries).</li> <li>If you've set up a whitelist, only visitors from countries on that list will be granted access.</li> <li>If you've set up a blacklist, visitors from countries on that list will be denied access.</li> <li>The result is cached to improve performance for repeat visitors from the same IP address.</li> </ol>"},{"location":"features/#how-to-use_9","title":"How to Use","text":"<p>Follow these steps to configure and use the Country feature:</p> <ol> <li>Define your strategy: Decide whether you want to use a whitelist approach (allow only specific countries) or a blacklist approach (block specific countries).</li> <li>Configure country codes: Add the ISO 3166-1 alpha-2 country codes (two-letter codes like US, GB, FR) to either the <code>WHITELIST_COUNTRY</code> or <code>BLACKLIST_COUNTRY</code> setting.</li> <li>Apply settings: Once configured, the country-based restrictions will apply to all visitors to your site.</li> <li>Monitor effectiveness: Check the web UI to see statistics on blocked requests by country.</li> </ol>"},{"location":"features/#configuration-settings_9","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>WHITELIST_COUNTRY</code> multisite no Country Whitelist: List of country codes (ISO 3166-1 alpha-2 format) separated by spaces. Only these countries are allowed. <code>BLACKLIST_COUNTRY</code> multisite no Country Blacklist: List of country codes (ISO 3166-1 alpha-2 format) separated by spaces. These countries are blocked. <p>Whitelist vs. Blacklist</p> <p>Choose the approach that best fits your needs:</p> <ul> <li>Use the whitelist when you want to restrict access to a small number of countries.</li> <li>Use the blacklist when you want to block access from specific problematic regions while allowing everyone else.</li> </ul> <p>Precedence Rule</p> <p>If both whitelist and blacklist are configured, the whitelist takes precedence. This means the system first checks if a country is whitelisted; if not, access is denied regardless of the blacklist configuration.</p> <p>Country Detection</p> <p>BunkerWeb uses the lite db-ip mmdb database to determine the country of origin based on IP addresses.</p>"},{"location":"features/#example-configurations_10","title":"Example Configurations","text":"Whitelist OnlyBlacklist OnlyEU Access OnlyHigh-Risk Countries Blocked <p>Allow access only from the United States, Canada, and the United Kingdom:</p> <pre><code>WHITELIST_COUNTRY: \"US CA GB\"\n</code></pre> <p>Block access from specific countries while allowing all others:</p> <pre><code>BLACKLIST_COUNTRY: \"RU CN KP\"\n</code></pre> <p>Allow access only from European Union member states:</p> <pre><code>WHITELIST_COUNTRY: \"AT BE BG HR CY CZ DK EE FI FR DE GR HU IE IT LV LT LU MT NL PL PT RO SK SI ES SE\"\n</code></pre> <p>Block access from countries often associated with certain cyber threats:</p> <pre><code>BLACKLIST_COUNTRY: \"RU CN KP IR SY\"\n</code></pre>"},{"location":"features/#crowdsec","title":"CrowdSec","text":"<p>STREAM support </p> <p></p> <p>The CrowdSec plugin integrates BunkerWeb with the CrowdSec security engine, providing an additional layer of protection against various cyber threats. This plugin acts as a CrowdSec bouncer, denying requests based on decisions from the CrowdSec API.</p> <p>CrowdSec is a modern, open-source security engine that detects and blocks malicious IP addresses based on behavioral analysis and collective intelligence from its community. You can also configure scenarios to automatically ban IP addresses based on suspicious behavior, benefiting from a crowdsourced blacklist.</p> <p>How it works:</p> <ol> <li>The CrowdSec engine analyzes logs and detects suspicious activities on your infrastructure.</li> <li>When malicious activity is detected, CrowdSec creates a decision to block the offending IP address.</li> <li>BunkerWeb, acting as a bouncer, queries the CrowdSec Local API for decisions about incoming requests.</li> <li>If a client's IP address has an active block decision, BunkerWeb denies access to the protected services.</li> <li>Optionally, the Application Security Component can perform deep request inspection for enhanced security.</li> </ol> <p>Key benefits</p> <ol> <li>Community-Powered Security: Benefit from threat intelligence shared across the CrowdSec user community.</li> <li>Behavioral Analysis: Detect sophisticated attacks based on behavior patterns, not just signatures.</li> <li>Lightweight Integration: Minimal performance impact on your BunkerWeb instance.</li> <li>Multi-Level Protection: Combine perimeter defense (IP blocking) with application security for in-depth protection.</li> </ol>"},{"location":"features/#setup","title":"Setup","text":"DockerLinuxAll-in-one <p>Acquisition file</p> <p>You will need to run a CrowdSec instance and configure it to parse BunkerWeb logs. Since BunkerWeb is based on NGINX, you can use the <code>nginx</code> value for the <code>type</code> parameter in your acquisition file (assuming that BunkerWeb logs are stored as is without additional data):</p> <pre><code>filenames:\n  - /var/log/bunkerweb.log\nlabels:\n  type: nginx\n</code></pre> <p>Application Security Component (optional)</p> <p>CrowdSec also provides an Application Security Component that can be used to protect your application from attacks. If you want to use it, you must create another acquisition file for the AppSec Component:</p> <pre><code>appsec_config: crowdsecurity/appsec-default\nlabels:\n  type: appsec\nlisten_addr: 0.0.0.0:7422\nsource: appsec\n</code></pre> <p>Syslog</p> <p>For container-based integrations, we recommend redirecting the logs of the BunkerWeb container to a syslog service so CrowdSec can access them easily. Here is an example configuration for syslog-ng that will store raw logs coming from BunkerWeb to a local <code>/var/log/bunkerweb.log</code> file:</p> <pre><code>@version: 4.8\n\nsource s_net {\n    udp(\n        ip(\"0.0.0.0\")\n    );\n};\n\ntemplate t_imp {\n    template(\"$MSG\\n\");\n    template_escape(no);\n};\n\ndestination d_file {\n    file(\"/var/log/bunkerweb.log\" template(t_imp));\n};\n\nlog {\n    source(s_net);\n    destination(d_file);\n};\n</code></pre> <p>Docker Compose</p> <p>Here is the docker-compose boilerplate that you can use (don\u2019t forget to update the bouncer key):</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n\nservices:\n  bunkerweb:\n    # This is the name that will be used to identify the instance in the Scheduler\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      &lt;&lt;: *bw-env # We use the anchor to avoid repeating the same settings for all services\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    logging:\n      driver: syslog # Send logs to syslog\n      options:\n        syslog-address: \"udp://10.20.30.254:514\" # The IP address of the syslog service\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      SERVER_NAME: \"\"\n      MULTISITE: \"yes\"\n      USE_CROWDSEC: \"yes\"\n      CROWDSEC_API: \"http://crowdsec:8080\" # This is the address of the CrowdSec container API in the same network\n      CROWDSEC_APPSEC_URL: \"http://crowdsec:7422\" # Comment if you don't want to use the AppSec Component\n      CROWDSEC_API_KEY: \"s3cr3tb0unc3rk3y\" # Remember to set a stronger key for the bouncer\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  crowdsec:\n    image: crowdsecurity/crowdsec:v1.6.11 # Use the latest version but always pin the version for a better stability/security\n    volumes:\n      - cs-data:/var/lib/crowdsec/data # To persist the CrowdSec data\n      - bw-logs:/var/log:ro # The logs of BunkerWeb for CrowdSec to parse\n      - ./acquis.yaml:/etc/crowdsec/acquis.yaml # The acquisition file for BunkerWeb logs\n      - ./appsec.yaml:/etc/crowdsec/acquis.d/appsec.yaml # Comment if you don't want to use the AppSec Component\n    environment:\n      BOUNCER_KEY_bunkerweb: \"s3cr3tb0unc3rk3y\" # Remember to set a stronger key for the bouncer\n      COLLECTIONS: \"crowdsecurity/nginx crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules\"\n      #   COLLECTIONS: \"crowdsecurity/nginx\" # If you don't want to use the AppSec Component use this line instead\n    networks:\n      - bw-universe\n\n  syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n        bw-universe:\n          ipv4_address: 10.20.30.254\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n  cs-data:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>You need to install CrowdSec and configure it to parse BunkerWeb logs. Follow the official documentation.</p> <p>To enable CrowdSec to parse BunkerWeb logs, add the following lines to your acquisition file located at <code>/etc/crowdsec/acquis.yaml</code>:</p> <pre><code>filenames:\n  - /var/log/bunkerweb/access.log\n  - /var/log/bunkerweb/error.log\n  - /var/log/bunkerweb/modsec_audit.log\nlabels:\n    type: nginx\n</code></pre> <p>Now, add your custom bouncer to the CrowdSec API using the <code>cscli</code> tool:</p> <pre><code>sudo cscli bouncers add crowdsec-bunkerweb-bouncer/v1.6\n</code></pre> <p>API key</p> <p>Keep the key generated by the <code>cscli</code> command; you will need it later.</p> <p>Then restart the CrowdSec service:</p> <pre><code>sudo systemctl restart crowdsec\n</code></pre> <p>Application Security Component (optional)</p> <p>If you want to use the AppSec Component, you must create another acquisition file for it located at <code>/etc/crowdsec/acquis.d/appsec.yaml</code>:</p> <pre><code>appsec_config: crowdsecurity/appsec-default\nlabels:\n    type: appsec\nlisten_addr: 127.0.0.1:7422\nsource: appsec\n</code></pre> <p>You will also need to install the AppSec Component's collections:</p> <pre><code>sudo cscli collections install crowdsecurity/appsec-virtual-patching\nsudo cscli collections install crowdsecurity/appsec-generic-rules\n</code></pre> <p>Finally, restart the CrowdSec service:</p> <pre><code>sudo systemctl restart crowdsec\n</code></pre> <p>Settings</p> <p>Configure the plugin by adding the following settings to your BunkerWeb configuration file:</p> <pre><code>USE_CROWDSEC=yes\nCROWDSEC_API=http://127.0.0.1:8080\nCROWDSEC_API_KEY=&lt;The key provided by cscli&gt;\n# Comment if you don't want to use the AppSec Component\nCROWDSEC_APPSEC_URL=http://127.0.0.1:7422\n</code></pre> <p>Finally, reload the BunkerWeb service:</p> <pre><code>sudo systemctl reload bunkerweb\n</code></pre> <p>The BunkerWeb All-In-One (AIO) Docker image comes with CrowdSec fully integrated. You don't need to set up a separate CrowdSec instance or manually configure acquisition files for BunkerWeb logs when using the internal CrowdSec agent.</p> <p>Refer to the All-In-One (AIO) Image integration documentation.</p>"},{"location":"features/#configuration-settings_10","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_CROWDSEC</code> <code>no</code> multisite no Enable CrowdSec: Set to <code>yes</code> to enable the CrowdSec bouncer. <code>CROWDSEC_API</code> <code>http://crowdsec:8080</code> global no CrowdSec API URL: The address of the CrowdSec Local API service. <code>CROWDSEC_API_KEY</code> global no CrowdSec API Key: The API key for authenticating with the CrowdSec API, obtained using <code>cscli bouncers add</code>. <code>CROWDSEC_MODE</code> <code>live</code> global no Operation Mode: Either <code>live</code> (query API for each request) or <code>stream</code> (periodically cache all decisions). <code>CROWDSEC_ENABLE_INTERNAL</code> <code>no</code> global no Internal Traffic: Set to <code>yes</code> to check internal traffic against CrowdSec decisions. <code>CROWDSEC_REQUEST_TIMEOUT</code> <code>1000</code> global no Request Timeout: Timeout in milliseconds for HTTP requests to the CrowdSec Local API in live mode. <code>CROWDSEC_EXCLUDE_LOCATION</code> global no Excluded Locations: Comma-separated list of locations (URIs) to exclude from CrowdSec checks. <code>CROWDSEC_CACHE_EXPIRATION</code> <code>1</code> global no Cache Expiration: The cache expiration time in seconds for IP decisions in live mode. <code>CROWDSEC_UPDATE_FREQUENCY</code> <code>10</code> global no Update Frequency: How often (in seconds) to pull new/expired decisions from the CrowdSec API in stream mode."},{"location":"features/#application-security-component-settings","title":"Application Security Component Settings","text":"Setting Default Context Multiple Description <code>CROWDSEC_APPSEC_URL</code> global no AppSec URL: The URL of the CrowdSec Application Security Component. Leave empty to disable AppSec. <code>CROWDSEC_APPSEC_FAILURE_ACTION</code> <code>passthrough</code> global no Failure Action: Action to take when AppSec returns an error. Can be <code>passthrough</code> or <code>deny</code>. <code>CROWDSEC_APPSEC_CONNECT_TIMEOUT</code> <code>100</code> global no Connect Timeout: The timeout in milliseconds for connecting to the AppSec Component. <code>CROWDSEC_APPSEC_SEND_TIMEOUT</code> <code>100</code> global no Send Timeout: The timeout in milliseconds for sending data to the AppSec Component. <code>CROWDSEC_APPSEC_PROCESS_TIMEOUT</code> <code>500</code> global no Process Timeout: The timeout in milliseconds for processing the request in the AppSec Component. <code>CROWDSEC_ALWAYS_SEND_TO_APPSEC</code> <code>no</code> global no Always Send: Set to <code>yes</code> to always send requests to AppSec, even if there's an IP-level decision. <code>CROWDSEC_APPSEC_SSL_VERIFY</code> <code>no</code> global no SSL Verify: Set to <code>yes</code> to verify the AppSec Component's SSL certificate. <p>About Operation Modes</p> <ul> <li>Live mode queries the CrowdSec API for each incoming request, providing real-time protection at the cost of higher latency.</li> <li>Stream mode periodically downloads all decisions from the CrowdSec API and caches them locally, reducing latency with a slight delay in applying new decisions.</li> </ul>"},{"location":"features/#example-configurations_11","title":"Example Configurations","text":"Basic ConfigurationAdvanced Configuration with AppSec <p>This is a simple configuration for when CrowdSec runs on the same host:</p> <pre><code>USE_CROWDSEC: \"yes\"\nCROWDSEC_API: \"http://crowdsec:8080\"\nCROWDSEC_API_KEY: \"your-api-key-here\"\nCROWDSEC_MODE: \"live\"\n</code></pre> <p>A more comprehensive configuration including the Application Security Component:</p> <pre><code>USE_CROWDSEC: \"yes\"\nCROWDSEC_API: \"http://crowdsec:8080\"\nCROWDSEC_API_KEY: \"your-api-key-here\"\nCROWDSEC_MODE: \"stream\"\nCROWDSEC_UPDATE_FREQUENCY: \"30\"\nCROWDSEC_EXCLUDE_LOCATION: \"/health,/metrics\"\n\n# AppSec Configuration\nCROWDSEC_APPSEC_URL: \"http://crowdsec:7422\"\nCROWDSEC_APPSEC_FAILURE_ACTION: \"deny\"\nCROWDSEC_ALWAYS_SEND_TO_APPSEC: \"yes\"\nCROWDSEC_APPSEC_SSL_VERIFY: \"yes\"\n</code></pre>"},{"location":"features/#custom-ssl-certificate","title":"Custom SSL certificate","text":"<p>STREAM support </p> <p>The Custom SSL certificate plugin allows you to use your own SSL/TLS certificates with BunkerWeb instead of the automatically generated ones. This feature is particularly useful if you have existing certificates from a trusted Certificate Authority (CA), need to use certificates with specific configurations, or want to maintain consistent certificate management across your infrastructure.</p> <p>How it works:</p> <ol> <li>You provide BunkerWeb with your certificate and private key files, either by specifying file paths or by providing the data in base64-encoded or plaintext PEM format.</li> <li>BunkerWeb validates your certificate and key to ensure they are properly formatted and usable.</li> <li>When a secure connection is established, BunkerWeb serves your custom certificate instead of the auto-generated one.</li> <li>BunkerWeb automatically monitors your certificate's validity and displays warnings if it is approaching expiration.</li> <li>You have full control over certificate management, allowing you to use certificates from any issuer you prefer.</li> </ol> <p>Automatic Certificate Monitoring</p> <p>When you enable custom SSL/TLS by setting <code>USE_CUSTOM_SSL</code> to <code>yes</code>, BunkerWeb automatically monitors the custom certificate specified in <code>CUSTOM_SSL_CERT</code>. It checks for changes daily and reloads NGINX if any modifications are detected, ensuring the latest certificate is always in use.</p>"},{"location":"features/#how-to-use_10","title":"How to Use","text":"<p>Follow these steps to configure and use the Custom SSL certificate feature:</p> <ol> <li>Enable the feature: Set the <code>USE_CUSTOM_SSL</code> setting to <code>yes</code> to enable custom certificate support.</li> <li>Choose a method: Decide whether to provide certificates via file paths or as base64-encoded/plaintext data, and set the priority using <code>CUSTOM_SSL_CERT_PRIORITY</code>.</li> <li>Provide certificate files: If using file paths, specify the locations of your certificate and private key files.</li> <li>Or provide certificate data: If using data, provide your certificate and key as either base64-encoded strings or plaintext PEM format.</li> <li>Let BunkerWeb handle the rest: Once configured, BunkerWeb automatically uses your custom certificates for all HTTPS connections.</li> </ol> <p>Stream Mode Configuration</p> <p>For stream mode, you must configure the <code>LISTEN_STREAM_PORT_SSL</code> setting to specify the SSL/TLS listening port. This step is essential for proper operation in stream mode.</p>"},{"location":"features/#configuration-settings_11","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_CUSTOM_SSL</code> <code>no</code> multisite no Enable Custom SSL: Set to <code>yes</code> to use your own certificate instead of the auto-generated one. <code>CUSTOM_SSL_CERT_PRIORITY</code> <code>file</code> multisite no Certificate Priority: Choose whether to prioritize the certificate from file path or from base64 data (<code>file</code> or <code>data</code>). <code>CUSTOM_SSL_CERT</code> multisite no Certificate Path: Full path to your SSL certificate or certificate bundle file. <code>CUSTOM_SSL_KEY</code> multisite no Private Key Path: Full path to your SSL private key file. <code>CUSTOM_SSL_CERT_DATA</code> multisite no Certificate Data: Your certificate encoded in base64 format or as plaintext PEM. <code>CUSTOM_SSL_KEY_DATA</code> multisite no Private Key Data: Your private key encoded in base64 format or as plaintext PEM. <p>Security Considerations</p> <p>When using custom certificates, ensure your private key is properly secured and has appropriate permissions. The files must be readable by the BunkerWeb scheduler.</p> <p>Certificate Format</p> <p>BunkerWeb expects certificates in PEM format. If your certificate is in a different format, you may need to convert it first.</p> <p>Certificate Chains</p> <p>If your certificate includes a chain (intermediates), you should provide the full certificate chain in the correct order, with your certificate first, followed by any intermediate certificates.</p>"},{"location":"features/#example-configurations_12","title":"Example Configurations","text":"Using File PathsUsing Base64 DataUsing Plaintext PEM DataFallback Configuration <p>A configuration using certificate and key files on disk:</p> <pre><code>USE_CUSTOM_SSL: \"yes\"\nCUSTOM_SSL_CERT_PRIORITY: \"file\"\nCUSTOM_SSL_CERT: \"/path/to/your/certificate.pem\"\nCUSTOM_SSL_KEY: \"/path/to/your/private-key.pem\"\n</code></pre> <p>A configuration using base64-encoded certificate and key data:</p> <pre><code>USE_CUSTOM_SSL: \"yes\"\nCUSTOM_SSL_CERT_PRIORITY: \"data\"\nCUSTOM_SSL_CERT_DATA: \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR...base64 encoded certificate...Cg==\"\nCUSTOM_SSL_KEY_DATA: \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSEV...base64 encoded key...Cg==\"\n</code></pre> <p>A configuration using plaintext certificate and key data in PEM format:</p> <pre><code>USE_CUSTOM_SSL: \"yes\"\nCUSTOM_SSL_CERT_PRIORITY: \"data\"\nCUSTOM_SSL_CERT_DATA: |\n  -----BEGIN CERTIFICATE-----\n  MIIDdzCCAl+gAwIBAgIUJH...certificate content...AAAA\n  -----END CERTIFICATE-----\nCUSTOM_SSL_KEY_DATA: |\n  -----BEGIN PRIVATE KEY-----\n  MIIEvQIBADAN...key content...AAAA\n  -----END PRIVATE KEY-----\n</code></pre> <p>A configuration that prioritizes files but falls back to base64 data if files are unavailable:</p> <pre><code>USE_CUSTOM_SSL: \"yes\"\nCUSTOM_SSL_CERT_PRIORITY: \"file\"\nCUSTOM_SSL_CERT: \"/path/to/your/certificate.pem\"\nCUSTOM_SSL_KEY: \"/path/to/your/private-key.pem\"\nCUSTOM_SSL_CERT_DATA: \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR...base64 encoded certificate...Cg==\"\nCUSTOM_SSL_KEY_DATA: \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSEV...base64 encoded key...Cg==\"\n</code></pre>"},{"location":"features/#dnsbl","title":"DNSBL","text":"<p>STREAM support </p> <p>The DNSBL (Domain Name System Blacklist) plugin provides protection against known malicious IP addresses by checking client IP addresses against external DNSBL servers. This feature helps guard your website against spam, botnets, and various types of cyber threats by leveraging community-maintained lists of problematic IP addresses.</p> <p>How it works:</p> <ol> <li>When a client connects to your website, BunkerWeb queries the DNSBL servers you have chosen using the DNS protocol.</li> <li>The check is performed by sending a reverse DNS query to each DNSBL server with the client's IP address.</li> <li>If any DNSBL server confirms that the client's IP address is listed as malicious, BunkerWeb will automatically ban the client, preventing potential threats from reaching your application.</li> <li>Results are cached to improve performance for repeat visitors from the same IP address.</li> <li>Lookups are performed efficiently using asynchronous queries to minimize impact on page load times.</li> </ol>"},{"location":"features/#how-to-use_11","title":"How to Use","text":"<p>Follow these steps to configure and use the DNSBL feature:</p> <ol> <li>Enable the feature: The DNSBL feature is disabled by default. Set the <code>USE_DNSBL</code> setting to <code>yes</code> to enable it.</li> <li>Configure DNSBL servers: Add the domain names of the DNSBL services you want to use to the <code>DNSBL_LIST</code> setting.</li> <li>Apply settings: Once configured, BunkerWeb will automatically check incoming connections against the specified DNSBL servers.</li> <li>Monitor effectiveness: Check the web UI to see statistics on requests blocked by DNSBL checks.</li> </ol>"},{"location":"features/#configuration-settings_12","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_DNSBL</code> <code>no</code> multisite no Enable DNSBL: Set to <code>yes</code> to enable DNSBL checks for incoming connections. <code>DNSBL_LIST</code> <code>bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org</code> global no DNSBL Servers: List of DNSBL server domains to check, separated by spaces. <p>Choosing DNSBL Servers</p> <p>Choose reputable DNSBL providers to minimize false positives. The default list includes well-established services that are suitable for most websites:</p> <ul> <li>bl.blocklist.de: Lists IPs that have been detected attacking other servers.</li> <li>sbl.spamhaus.org: Focuses on spam sources and other malicious activities.</li> <li>xbl.spamhaus.org: Targets infected systems, such as compromised machines or open proxies.</li> </ul> <p>How DNSBL Works</p> <p>DNSBL servers work by responding to specially formatted DNS queries. When BunkerWeb checks an IP address, it reverses the IP and appends the DNSBL domain name. If the resulting DNS query returns a \"success\" response, the IP is considered blacklisted.</p> <p>Performance Considerations</p> <p>While BunkerWeb optimizes DNSBL lookups for performance, adding a large number of DNSBL servers could potentially impact response times. Start with a few reputable DNSBL servers and monitor performance before adding more.</p>"},{"location":"features/#example-configurations_13","title":"Example Configurations","text":"Basic ConfigurationMinimal Configuration <p>A simple configuration using the default DNSBL servers:</p> <pre><code>USE_DNSBL: \"yes\"\nDNSBL_LIST: \"bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org\"\n</code></pre> <p>A minimal configuration focusing on the most reliable DNSBL services:</p> <pre><code>USE_DNSBL: \"yes\"\nDNSBL_LIST: \"zen.spamhaus.org\"\n</code></pre> <p>This configuration uses only:</p> <ul> <li>zen.spamhaus.org: Spamhaus' combined list is often considered sufficient as a standalone solution due to its wide coverage and reputation for accuracy. It combines the SBL, XBL, and PBL lists in a single query, making it efficient and comprehensive.</li> </ul>"},{"location":"features/#database","title":"Database","text":"<p>STREAM support </p> <p>The Database plugin provides a robust database integration for BunkerWeb by enabling centralized storage and management of configuration data, logs, and other essential information.</p> <p>This core component supports multiple database engines, including SQLite, PostgreSQL, MySQL/MariaDB, and Oracle, allowing you to choose the database solution that best fits your environment and requirements.</p> <p>How it works:</p> <ol> <li>BunkerWeb connects to your configured database using the provided URI in the SQLAlchemy format.</li> <li>Critical configuration data, runtime information, and job logs are stored securely in the database.</li> <li>Automatic maintenance processes optimize your database by managing data growth and cleaning up excess records.</li> <li>For high-availability scenarios, you can configure a read-only database URI that serves both as a failover and as a method to offload read operations.</li> <li>Database operations are logged according to your specified log level, providing appropriate visibility into database interactions.</li> </ol>"},{"location":"features/#how-to-use_12","title":"How to Use","text":"<p>Follow these steps to configure and use the Database feature:</p> <ol> <li>Choose a database engine: Select from SQLite (default), PostgreSQL, MySQL/MariaDB, or Oracle based on your requirements.</li> <li>Configure the database URI: Set the <code>DATABASE_URI</code> to connect to your primary database using the SQLAlchemy format.</li> <li>Optional read-only database: For high-availability setups, configure a <code>DATABASE_URI_READONLY</code> as a fallback or for read operations.</li> </ol>"},{"location":"features/#configuration-settings_13","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>DATABASE_URI</code> <code>sqlite:////var/lib/bunkerweb/db.sqlite3</code> global no Database URI: The primary database connection string in the SQLAlchemy format. <code>DATABASE_URI_READONLY</code> global no Read-Only Database URI: Optional database for read-only operations or as a failover if the main database is down. <code>DATABASE_LOG_LEVEL</code> <code>warning</code> global no Log Level: The verbosity level for database logs. Options: <code>debug</code>, <code>info</code>, <code>warn</code>, <code>warning</code>, or <code>error</code>. <code>DATABASE_MAX_JOBS_RUNS</code> <code>10000</code> global no Maximum Job Runs: The maximum number of job execution records to retain in the database before automatic cleanup. <p>Database Selection</p> <ul> <li>SQLite (default): Ideal for single-node deployments or testing environments due to its simplicity and file-based nature.</li> <li>PostgreSQL: Recommended for production environments with multiple BunkerWeb instances due to its robustness and concurrency support.</li> <li>MySQL/MariaDB: A good alternative to PostgreSQL with similar production-grade capabilities.</li> <li>Oracle: Suitable for enterprise environments where Oracle is already the standard database platform.</li> </ul> <p>SQLAlchemy URI Format</p> <p>The database URI follows the SQLAlchemy format:</p> <ul> <li>SQLite: <code>sqlite:////path/to/database.sqlite3</code></li> <li>PostgreSQL: <code>postgresql://username:password@hostname:port/database</code></li> <li>MySQL/MariaDB: <code>mysql://username:password@hostname:port/database</code> or <code>mariadb://username:password@hostname:port/database</code></li> <li>Oracle: <code>oracle://username:password@hostname:port/database</code></li> </ul> <p>Database Maintenance</p> <p>The plugin automatically runs a daily job that cleans up excess job runs based on the <code>DATABASE_MAX_JOBS_RUNS</code> setting. This prevents unbounded database growth while maintaining a useful history of job executions.</p>"},{"location":"features/#errors","title":"Errors","text":"<p>STREAM support </p> <p>The Errors plugin provides customizable error handling for your website, letting you configure how HTTP error responses appear to users. This feature helps you present user-friendly, branded error pages that enhance the user experience during error scenarios, rather than displaying default server error pages, which can seem technical and confusing to visitors.</p> <p>How it works:</p> <ol> <li>When a client encounters an HTTP error (for example, 400, 404, or 500), BunkerWeb intercepts the error response.</li> <li>Instead of showing the default error page, BunkerWeb displays a custom, professionally designed error page.</li> <li>Error pages are fully customizable through your configuration, allowing you to specify custom pages for specific error codes. Custom error page files must be placed in the directory defined by the <code>ROOT_FOLDER</code> setting (see the Miscellaneous plugin documentation).</li> <li>By default, <code>ROOT_FOLDER</code> is <code>/var/www/html/{server_name}</code> (where <code>{server_name}</code> is replaced by the actual server name).</li> <li>In multisite mode, each site can have its own <code>ROOT_FOLDER</code>, so custom error pages must be placed in the corresponding directory for each site.</li> <li>The default error pages provide clear explanations, helping users understand what went wrong and what they can do next.</li> </ol>"},{"location":"features/#how-to-use_13","title":"How to Use","text":"<p>Follow these steps to configure and use the Errors feature:</p> <ol> <li>Define custom error pages: Specify which HTTP error codes should use custom error pages using the <code>ERRORS</code> setting. The custom error page files must be located in the folder specified by the <code>ROOT_FOLDER</code> setting for the site. In multisite mode, this means each site/server can have its own folder for custom error pages.</li> <li>Configure your error pages: For each error code, you can use the default BunkerWeb error page or provide your own custom HTML page (placed in the appropriate <code>ROOT_FOLDER</code>).</li> <li>Set intercepted error codes: Select which error codes should always be handled by BunkerWeb with the <code>INTERCEPTED_ERROR_CODES</code> setting.</li> <li>Let BunkerWeb handle the rest: Once configured, error handling occurs automatically for all specified error codes.</li> </ol>"},{"location":"features/#configuration-settings_14","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>ERRORS</code> multisite no Custom Error Pages: Map specific error codes to custom HTML files using the format <code>ERROR_CODE=/path/to/file.html</code>. <code>INTERCEPTED_ERROR_CODES</code> <code>400 401 403 404 405 413 429 500 501 502 503 504</code> multisite no Intercepted Errors: List of HTTP error codes that BunkerWeb should handle with its default error page when no custom page is specified. <p>Error Page Design</p> <p>The default BunkerWeb error pages are designed to be informative, user-friendly, and professional in appearance. They include:</p> <ul> <li>Clear error descriptions</li> <li>Information about what might have caused the error</li> <li>Suggested actions for users to resolve the issue</li> <li>Visual indicators that help users understand whether the issue is on the client or the server side</li> </ul> <p>Error Types</p> <p>Error codes are categorized by type:</p> <ul> <li>4xx errors (client-side): These indicate issues with the client's request, such as attempting to access non-existent pages or lacking proper authentication.</li> <li>5xx errors (server-side): These indicate issues with the server's ability to fulfill a valid request, such as internal server errors or temporary unavailability.</li> </ul>"},{"location":"features/#example-configurations_14","title":"Example Configurations","text":"Default Error HandlingCustom Error PagesSelective Error Handling <p>Let BunkerWeb handle common error codes with its default error pages:</p> <pre><code>INTERCEPTED_ERROR_CODES: \"400 401 403 404 405 413 429 500 501 502 503 504\"\n</code></pre> <p>Use custom error pages for specific error codes:</p> <pre><code>ERRORS: \"404=/custom/404.html 500=/custom/500.html\"\nINTERCEPTED_ERROR_CODES: \"400 401 403 404 405 413 429 500 501 502 503 504\"\n</code></pre> <p>Only handle specific error codes with BunkerWeb:</p> <pre><code>INTERCEPTED_ERROR_CODES: \"404 500\"\n</code></pre>"},{"location":"features/#greylist","title":"Greylist","text":"<p>STREAM support </p> <p>The Greylist plugin provides a flexible security approach that allows visitors access while still maintaining essential security features.</p> <p>Unlike traditional blacklist/whitelist approaches\u2014that completely block or allow access\u2014greylisting creates a middle ground by granting access to certain visitors while still subjecting them to security checks.</p> <p>How it works:</p> <ol> <li>You define criteria for visitors to be greylisted (IP addresses, networks, rDNS, ASN, User-Agent, or URI patterns).</li> <li>When a visitor matches any of these criteria, they are granted access to your site while the other security features remain active.</li> <li>If a visitor does not match any greylist criteria, their access is denied.</li> <li>Greylist data can be automatically updated from external sources on a regular schedule.</li> </ol>"},{"location":"features/#how-to-use_14","title":"How to Use","text":"<p>Follow these steps to configure and use the Greylist feature:</p> <ol> <li>Enable the feature: The Greylist feature is disabled by default. Set the <code>USE_GREYLIST</code> setting to <code>yes</code> to enable it.</li> <li>Configure greylist rules: Define which IPs, networks, rDNS patterns, ASNs, User-Agents, or URIs should be greylisted.</li> <li>Add external sources: Optionally, configure URLs for automatically downloading and updating greylist data.</li> <li>Monitor access: Check the web UI to see which visitors are being allowed or denied.</li> </ol> <p>Access Control Behavior</p> <p>When the greylist feature is enabled with the <code>USE_GREYLIST</code> setting set to <code>yes</code>:</p> <ol> <li>Greylisted visitors: Are allowed access but are still subject to all security checks.</li> <li>Non-greylisted visitors: Are completely denied access.</li> </ol> <p>stream mode</p> <p>When using stream mode, only IP, rDNS, and ASN checks are performed.</p>"},{"location":"features/#configuration-settings_15","title":"Configuration Settings","text":"<p>General</p> Setting Default Context Multiple Description <code>USE_GREYLIST</code> <code>no</code> multisite no Enable Greylist: Set to <code>yes</code> to enable greylisting. IP AddressReverse DNSASNUser AgentURI <p>What this does: Greylist visitors based on their IP address or network. These visitors gain access but remain subject to security checks.</p> Setting Default Context Multiple Description <code>GREYLIST_IP</code> multisite no IP Greylist: List of IP addresses or networks (in CIDR notation) to greylist, separated by spaces. <code>GREYLIST_IP_URLS</code> multisite no IP Greylist URLs: List of URLs containing IP addresses or networks to greylist, separated by spaces. <p>What this does: Greylist visitors based on their domain name (in reverse). Useful for allowing conditional access to visitors from specific organizations or networks.</p> Setting Default Context Multiple Description <code>GREYLIST_RDNS</code> multisite no rDNS Greylist: List of reverse DNS suffixes to greylist, separated by spaces. <code>GREYLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no rDNS Global Only: Only perform rDNS greylist checks on global IP addresses when set to <code>yes</code>. <code>GREYLIST_RDNS_URLS</code> multisite no rDNS Greylist URLs: List of URLs containing reverse DNS suffixes to greylist, separated by spaces. <p>What this does: Greylist visitors from specific network providers using Autonomous System Numbers. ASNs identify which provider or organization an IP belongs to.</p> Setting Default Context Multiple Description <code>GREYLIST_ASN</code> multisite no ASN Greylist: List of Autonomous System Numbers to greylist, separated by spaces. <code>GREYLIST_ASN_URLS</code> multisite no ASN Greylist URLs: List of URLs containing ASNs to greylist, separated by spaces. <p>What this does: Greylist visitors based on the browser or tool they claim to be using. This allows controlled access for specific tools while maintaining security checks.</p> Setting Default Context Multiple Description <code>GREYLIST_USER_AGENT</code> multisite no User-Agent Greylist: List of User-Agent patterns (PCRE regex) to greylist, separated by spaces. <code>GREYLIST_USER_AGENT_URLS</code> multisite no User-Agent Greylist URLs: List of URLs containing User-Agent patterns to greylist. <p>What this does: Greylist requests to specific URLs on your site. This allows conditional access to certain endpoints while maintaining security checks.</p> Setting Default Context Multiple Description <code>GREYLIST_URI</code> multisite no URI Greylist: List of URI patterns (PCRE regex) to greylist, separated by spaces. <code>GREYLIST_URI_URLS</code> multisite no URI Greylist URLs: List of URLs containing URI patterns to greylist, separated by spaces. <p>URL Format Support</p> <p>All <code>*_URLS</code> settings support HTTP/HTTPS URLs as well as local file paths using the <code>file:///</code> prefix. Basic authentication is supported using the <code>http://user:pass@url</code> format.</p> <p>Regular Updates</p> <p>Greylists from URLs are automatically downloaded and updated hourly to ensure that your protection remains current with the latest trusted sources.</p>"},{"location":"features/#example-configurations_15","title":"Example Configurations","text":"Basic ConfigurationAdvanced ConfigurationUsing Local FilesSelective API Access <p>A simple configuration that applies greylisting to a company's internal network and crawler:</p> <pre><code>USE_GREYLIST: \"yes\"\nGREYLIST_IP: \"192.168.1.0/24 10.0.0.0/8\"\nGREYLIST_USER_AGENT: \"(?:\\b)CompanyCrawler(?:\\b)\"\n</code></pre> <p>A more comprehensive configuration with multiple greylist criteria:</p> <pre><code>USE_GREYLIST: \"yes\"\n\n# Company assets and approved crawlers\nGREYLIST_IP: \"192.168.1.0/24 203.0.113.0/24\"\nGREYLIST_RDNS: \".company.com .partner-company.org\"\nGREYLIST_ASN: \"12345 67890\"  # Company and partner ASNs\nGREYLIST_USER_AGENT: \"(?:\\b)GoodBot(?:\\b) (?:\\b)PartnerCrawler(?:\\b)\"\nGREYLIST_URI: \"^/api/v1/\"\n\n# External trusted sources\nGREYLIST_IP_URLS: \"https://example.com/trusted-networks.txt\"\nGREYLIST_USER_AGENT_URLS: \"https://example.com/trusted-crawlers.txt\"\n</code></pre> <p>Configuration using local files for greylists:</p> <pre><code>USE_GREYLIST: \"yes\"\nGREYLIST_IP_URLS: \"file:///path/to/ip-greylist.txt\"\nGREYLIST_RDNS_URLS: \"file:///path/to/rdns-greylist.txt\"\nGREYLIST_ASN_URLS: \"file:///path/to/asn-greylist.txt\"\nGREYLIST_USER_AGENT_URLS: \"file:///path/to/user-agent-greylist.txt\"\nGREYLIST_URI_URLS: \"file:///path/to/uri-greylist.txt\"\n</code></pre> <p>A configuration allowing access to specific API endpoints:</p> <pre><code>USE_GREYLIST: \"yes\"\nGREYLIST_URI: \"^/api/v1/public/ ^/api/v1/status\"\nGREYLIST_IP: \"203.0.113.0/24\"  # External partner network\n</code></pre>"},{"location":"features/#gzip","title":"Gzip","text":"<p>STREAM support </p> <p>The GZIP plugin enhances website performance by compressing HTTP responses using the GZIP algorithm. This feature reduces bandwidth usage and improves page load times by compressing web content before it is sent to the client's browser, resulting in faster delivery and an improved user experience.</p>"},{"location":"features/#how-it-works","title":"How It Works","text":"<ol> <li>When a client requests content from your website, BunkerWeb checks if the client supports GZIP compression.</li> <li>If supported, BunkerWeb compresses the response using the GZIP algorithm at your configured compression level.</li> <li>The compressed content is sent to the client with appropriate headers indicating GZIP compression.</li> <li>The client's browser decompresses the content before rendering it.</li> <li>Both bandwidth usage and page load times are reduced, enhancing overall site performance and user experience.</li> </ol>"},{"location":"features/#how-to-use_15","title":"How to Use","text":"<p>Follow these steps to configure and use the GZIP compression feature:</p> <ol> <li>Enable the feature: The GZIP feature is disabled by default. Enable it by setting the <code>USE_GZIP</code> setting to <code>yes</code>.</li> <li>Configure MIME types: Specify which content types should be compressed using the <code>GZIP_TYPES</code> setting.</li> <li>Set minimum size: Define the minimum response size required for compression with the <code>GZIP_MIN_LENGTH</code> setting to avoid compressing small files.</li> <li>Choose a compression level: Select your preferred balance between speed and compression ratio using the <code>GZIP_COMP_LEVEL</code> setting.</li> <li>Configure proxied requests: Specify which proxied requests should be compressed using the <code>GZIP_PROXIED</code> setting.</li> </ol>"},{"location":"features/#configuration-settings_16","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_GZIP</code> <code>no</code> multisite no Enable GZIP: Set to <code>yes</code> to enable GZIP compression. <code>GZIP_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no MIME Types: List of content types that will be compressed with GZIP. <code>GZIP_MIN_LENGTH</code> <code>1000</code> multisite no Minimum Size: The minimum response size (in bytes) for GZIP compression to be applied. <code>GZIP_COMP_LEVEL</code> <code>5</code> multisite no Compression Level: Level of compression from 1 (minimum compression) to 9 (maximum compression). Higher values use more CPU. <code>GZIP_PROXIED</code> <code>no-cache no-store private expired auth</code> multisite no Proxied Requests: Specifies which proxied requests should be compressed based on response headers. <p>Optimizing Compression Level</p> <p>The default compression level (5) offers a good balance between compression ratio and CPU usage. For static content or when server CPU resources are plentiful, consider increasing to 7-9 for maximum compression. For dynamic content or when CPU resources are limited, you might want to use 1-3 for faster compression with reasonable size reduction.</p> <p>Browser Support</p> <p>GZIP is supported by all modern browsers and has been the standard compression method for HTTP responses for many years, ensuring excellent compatibility across devices and browsers.</p> <p>Compression vs. CPU Usage</p> <p>While GZIP compression reduces bandwidth and improves load times, higher compression levels consume more CPU resources. For high-traffic sites, find the right balance between compression efficiency and server performance.</p>"},{"location":"features/#example-configurations_16","title":"Example Configurations","text":"Basic ConfigurationMaximum CompressionBalanced PerformanceProxied Content Focus <p>A standard configuration that enables GZIP with default settings:</p> <pre><code>USE_GZIP: \"yes\"\nGZIP_TYPES: \"application/javascript application/json application/xml text/css text/html text/javascript text/plain text/xml\"\nGZIP_MIN_LENGTH: \"1000\"\nGZIP_COMP_LEVEL: \"5\"\n</code></pre> <p>Configuration optimized for maximum compression savings:</p> <pre><code>USE_GZIP: \"yes\"\nGZIP_TYPES: \"application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml\"\nGZIP_MIN_LENGTH: \"500\"\nGZIP_COMP_LEVEL: \"9\"\nGZIP_PROXIED: \"any\"\n</code></pre> <p>Configuration that balances compression ratio with CPU usage:</p> <pre><code>USE_GZIP: \"yes\"\nGZIP_TYPES: \"application/javascript application/json text/css text/html text/javascript text/plain\"\nGZIP_MIN_LENGTH: \"1000\"\nGZIP_COMP_LEVEL: \"3\"\nGZIP_PROXIED: \"no-cache no-store private expired\"\n</code></pre> <p>Configuration that focuses on properly handling compression for proxied content:</p> <pre><code>USE_GZIP: \"yes\"\nGZIP_TYPES: \"application/javascript application/json text/css text/html text/javascript\"\nGZIP_MIN_LENGTH: \"1000\"\nGZIP_COMP_LEVEL: \"4\"\nGZIP_PROXIED: \"any\"\n</code></pre>"},{"location":"features/#html-injection","title":"HTML injection","text":"<p>STREAM support </p> <p>The HTML Injection plugin enables you to seamlessly add custom HTML code to your website's pages before either the closing <code>&lt;/body&gt;</code> or <code>&lt;/head&gt;</code> tags. This feature is particularly useful for adding analytics scripts, tracking pixels, custom JavaScript, CSS styles, or other third-party integrations without modifying your website's source code.</p> <p>How it works:</p> <ol> <li>When a page is served from your website, BunkerWeb examines the HTML response.</li> <li>If you've configured body injection, BunkerWeb inserts your custom HTML code just before the closing <code>&lt;/body&gt;</code> tag.</li> <li>If you've configured head injection, BunkerWeb inserts your custom HTML code just before the closing <code>&lt;/head&gt;</code> tag.</li> <li>The insertion happens automatically for all HTML pages served by your website.</li> <li>This allows you to add scripts, styles, or other elements without modifying your application's code.</li> </ol>"},{"location":"features/#how-to-use_16","title":"How to Use","text":"<p>Follow these steps to configure and use the HTML Injection feature:</p> <ol> <li>Prepare your custom HTML: Decide what HTML code you want to inject into your pages.</li> <li>Choose injection locations: Determine whether you need to inject code in the <code>&lt;head&gt;</code> section, the <code>&lt;body&gt;</code> section, or both.</li> <li>Configure the settings: Add your custom HTML to the appropriate settings (<code>INJECT_HEAD</code> and/or <code>INJECT_BODY</code>).</li> <li>Let BunkerWeb handle the rest: Once configured, the HTML will be automatically injected into all served HTML pages.</li> </ol>"},{"location":"features/#configuration-settings_17","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>INJECT_HEAD</code> multisite no Head HTML Code: The HTML code to inject before the <code>&lt;/head&gt;</code> tag. <code>INJECT_BODY</code> multisite no Body HTML Code: The HTML code to inject before the <code>&lt;/body&gt;</code> tag. <p>Best Practices</p> <ul> <li>For performance reasons, place JavaScript files at the end of the body to prevent render blocking.</li> <li>Place CSS and critical JavaScript in the head section to avoid a flash of unstyled content.</li> <li>Be careful with injected content that could potentially break your site's functionality.</li> </ul> <p>Common Use Cases</p> <ul> <li>Adding analytics scripts (like Google Analytics, Matomo)</li> <li>Integrating chat widgets or customer support tools</li> <li>Including tracking pixels for marketing campaigns</li> <li>Adding custom CSS styles or JavaScript functionality</li> <li>Including third-party libraries without modifying your application code</li> </ul>"},{"location":"features/#example-configurations_17","title":"Example Configurations","text":"Google AnalyticsCustom StylesMultiple IntegrationsCookie Consent Banner <p>Adding Google Analytics tracking to your website:</p> <pre><code>INJECT_HEAD: \"\"\nINJECT_BODY: \"&lt;script async src=\\\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\\\"&gt;&lt;/script&gt;&lt;script&gt;window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-XXXXXXXXXX');&lt;/script&gt;\"\n</code></pre> <p>Adding custom CSS styles to your website:</p> <pre><code>INJECT_HEAD: \"&lt;style&gt;body { font-family: 'Arial', sans-serif; } .custom-element { color: blue; }&lt;/style&gt;\"\nINJECT_BODY: \"\"\n</code></pre> <p>Adding both custom styles and JavaScript:</p> <pre><code>INJECT_HEAD: \"&lt;style&gt;body { font-family: 'Arial', sans-serif; } .notification-banner { background: #f8f9fa; padding: 10px; text-align: center; }&lt;/style&gt;\"\nINJECT_BODY: \"&lt;script src=\\\"https://cdn.example.com/js/widget.js\\\"&gt;&lt;/script&gt;&lt;script&gt;initializeWidget('your-api-key');&lt;/script&gt;\"\n</code></pre> <p>Adding a simple cookie consent banner:</p> <pre><code>INJECT_HEAD: \"&lt;style&gt;.cookie-banner { position: fixed; bottom: 0; left: 0; right: 0; background: #f1f1f1; padding: 20px; text-align: center; z-index: 1000; } .cookie-banner button { background: #4CAF50; border: none; color: white; padding: 10px 20px; cursor: pointer; }&lt;/style&gt;\"\nINJECT_BODY: \"&lt;div id=\\\"cookie-banner\\\" class=\\\"cookie-banner\\\"&gt;This website uses cookies to ensure you get the best experience. &lt;button onclick=\\\"acceptCookies()\\\"&gt;Accept&lt;/button&gt;&lt;/div&gt;&lt;script&gt;function acceptCookies() { document.getElementById('cookie-banner').style.display = 'none'; localStorage.setItem('cookies-accepted', 'true'); } if(localStorage.getItem('cookies-accepted') === 'true') { document.getElementById('cookie-banner').style.display = 'none'; }&lt;/script&gt;\"\n</code></pre>"},{"location":"features/#headers","title":"Headers","text":"<p>STREAM support </p> <p>Headers play a crucial role in HTTP security. The Headers plugin provides robust management of both standard and custom HTTP headers\u2014enhancing security and functionality. It dynamically applies security measures, such as HSTS, CSP (including a reporting mode), and custom header injection, while preventing information leakage.</p> <p>How it works</p> <ol> <li>When a client requests content from your website, BunkerWeb processes the response headers.</li> <li>Security headers are applied in accordance with your configuration.</li> <li>Custom headers can be added to provide additional information or functionality to clients.</li> <li>Unwanted headers that might reveal server information are automatically removed.</li> <li>Cookies are modified to include appropriate security flags based on your settings.</li> <li>Headers from upstream servers can be selectively preserved when needed.</li> </ol>"},{"location":"features/#how-to-use_17","title":"How to Use","text":"<p>Follow these steps to configure and use the Headers feature:</p> <ol> <li>Configure security headers: Set values for common headers.</li> <li>Add custom headers: Define any custom headers using the <code>CUSTOM_HEADER</code> setting.</li> <li>Remove unwanted headers: Use <code>REMOVE_HEADERS</code> to ensure headers that could expose server details are stripped out.</li> <li>Set cookie security: Enable robust cookie security by configuring <code>COOKIE_FLAGS</code> and setting <code>COOKIE_AUTO_SECURE_FLAG</code> to <code>yes</code> so that the Secure flag is automatically added on HTTPS connections.</li> <li>Preserve upstream headers: Specify which upstream headers to retain by using <code>KEEP_UPSTREAM_HEADERS</code>.</li> <li>Leverage conditional header application: If you wish to test policies without disruption, enable CSP Report-Only mode via <code>CONTENT_SECURITY_POLICY_REPORT_ONLY</code>.</li> </ol>"},{"location":"features/#configuration-guide","title":"Configuration Guide","text":"Security HeadersCookie SettingsCustom Headers <p>Overview</p> <p>Security headers enforce secure communication, restrict resource loading, and prevent attacks like clickjacking and injection. Properly configured headers create a robust defensive layer for your website.</p> <p>Benefits of Security Headers</p> <ul> <li>HSTS: Ensures all connections are encrypted, protecting against protocol downgrade attacks.</li> <li>CSP: Prevents malicious scripts from executing, reducing the risk of XSS attacks.</li> <li>X-Frame-Options: Blocks clickjacking attempts by controlling iframe embedding.</li> <li>Referrer Policy: Limits sensitive information leakage through referrer headers.</li> </ul> Setting Default Context Multiple Description <code>STRICT_TRANSPORT_SECURITY</code> <code>max-age=63072000; includeSubDomains; preload</code> multisite no HSTS: Enforces secure HTTPS connections, reducing risks of man-in-the-middle attacks. <code>CONTENT_SECURITY_POLICY</code> <code>object-src 'none'; form-action 'self'; frame-ancestors 'self';</code> multisite no CSP: Restricts resource loading to trusted sources, mitigating cross-site scripting and data injection attacks. <code>CONTENT_SECURITY_POLICY_REPORT_ONLY</code> <code>no</code> multisite no CSP Report Mode: Reports violations without blocking content, helping in testing security policies while capturing logs. <code>X_FRAME_OPTIONS</code> <code>SAMEORIGIN</code> multisite no X-Frame-Options: Prevents clickjacking by controlling whether your site can be framed. <code>X_CONTENT_TYPE_OPTIONS</code> <code>nosniff</code> multisite no X-Content-Type-Options: Prevents browsers from MIME-sniffing, protecting against drive-by download attacks. <code>X_DNS_PREFETCH_CONTROL</code> <code>off</code> multisite no X-DNS-Prefetch-Control: Regulates DNS prefetching to reduce unintentional network requests and enhance privacy. <code>REFERRER_POLICY</code> <code>strict-origin-when-cross-origin</code> multisite no Referrer Policy: Controls the amount of referrer information sent, safeguarding user privacy. <code>PERMISSIONS_POLICY</code> <code>accelerometer=(), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), ...</code> multisite no Permissions Policy: Restricts browser feature access, reducing potential attack vectors. <code>KEEP_UPSTREAM_HEADERS</code> <code>Content-Security-Policy Permissions-Policy X-Frame-Options</code> multisite no Keep Headers: Preserves selected upstream headers, aiding legacy integration while maintaining security. <p>Best Practices</p> <ul> <li>Regularly review and update your security headers to align with evolving security standards.</li> <li>Use tools like Mozilla Observatory to validate your header configuration.</li> <li>Test CSP in <code>Report-Only</code> mode before enforcing it to avoid breaking functionality.</li> </ul> <p>Overview</p> <p>Proper cookie settings ensure secure user sessions by preventing hijacking, fixation, and cross-site scripting. Secure cookies maintain session integrity over HTTPS and enhance overall user data protection.</p> <p>Benefits of Secure Cookies</p> <ul> <li>HttpOnly Flag: Prevents client-side scripts from accessing cookies, mitigating XSS risks.</li> <li>SameSite Flag: Reduces CSRF attacks by restricting cross-origin cookie usage.</li> <li>Secure Flag: Ensures cookies are transmitted only over encrypted HTTPS connections.</li> </ul> Setting Default Context Multiple Description <code>COOKIE_FLAGS</code> <code>* HttpOnly SameSite=Lax</code> multisite yes Cookie Flags: Automatically adds security flags such as HttpOnly and SameSite, protecting cookies from client-side script access and CSRF attacks. <code>COOKIE_AUTO_SECURE_FLAG</code> <code>yes</code> multisite no Auto Secure Flag: Ensures cookies are only sent over secure HTTPS connections by appending the Secure flag automatically. <p>Best Practices</p> <ul> <li>Use <code>SameSite=Strict</code> for sensitive cookies to prevent cross-origin access.</li> <li>Regularly audit your cookie settings to ensure compliance with security and privacy regulations.</li> <li>Avoid setting cookies without the Secure flag in production environments.</li> </ul> <p>Overview</p> <p>Custom headers allow you to add specific HTTP headers to meet application or performance requirements. They offer flexibility but must be carefully configured to avoid exposing sensitive server details.</p> <p>Benefits of Custom Headers</p> <ul> <li>Enhance security by removing unnecessary headers that may leak server details.</li> <li>Add application-specific headers to improve functionality or debugging.</li> </ul> Setting Default Context Multiple Description <code>CUSTOM_HEADER</code> multisite yes Custom Header: Provides a means to add user-defined headers in the format HeaderName: HeaderValue for specialized security or performance enhancements. <code>REMOVE_HEADERS</code> <code>Server Expect-CT X-Powered-By X-AspNet-Version X-AspNetMvc-Version Public-Key-Pins</code> multisite no Remove Headers: Specifies headers to remove, decreasing the chance of exposing internal server details and known vulnerabilities. <p>Security Considerations</p> <ul> <li>Avoid exposing sensitive information through custom headers.</li> <li>Regularly review and update custom headers to align with your application's requirements.</li> </ul> <p>Best Practices</p> <ul> <li>Use <code>REMOVE_HEADERS</code> to strip out headers like <code>Server</code> and <code>X-Powered-By</code> to reduce fingerprinting risks.</li> <li>Test custom headers in a staging environment before deploying them to production.</li> </ul>"},{"location":"features/#example-configurations_18","title":"Example Configurations","text":"Basic Security HeadersEnhanced Cookie SecurityCustom Headers for APIContent Security Policy - Reporting Mode <p>A standard configuration with essential security headers:</p> <pre><code>STRICT_TRANSPORT_SECURITY: \"max-age=63072000; includeSubDomains; preload\"\nCONTENT_SECURITY_POLICY: \"default-src 'self'; script-src 'self'; object-src 'none'; frame-ancestors 'self'\"\nX_FRAME_OPTIONS: \"SAMEORIGIN\"\nX_CONTENT_TYPE_OPTIONS: \"nosniff\"\nREFERRER_POLICY: \"strict-origin-when-cross-origin\"\nREMOVE_HEADERS: \"Server X-Powered-By X-AspNet-Version\"\n</code></pre> <p>Configuration with robust cookie security settings:</p> <pre><code>COOKIE_FLAGS: \"* HttpOnly SameSite=Strict\"\nCOOKIE_FLAGS_2: \"session_cookie Secure HttpOnly SameSite=Strict\"\nCOOKIE_FLAGS_3: \"auth_cookie Secure HttpOnly SameSite=Strict Max-Age=3600\"\nCOOKIE_AUTO_SECURE_FLAG: \"yes\"\n</code></pre> <p>Configuration for an API service with custom headers:</p> <pre><code>CUSTOM_HEADER: \"API-Version: 1.2.3\"\nCUSTOM_HEADER_2: \"Access-Control-Max-Age: 86400\"\nCONTENT_SECURITY_POLICY: \"default-src 'none'; frame-ancestors 'none'\"\nREMOVE_HEADERS: \"Server X-Powered-By X-AspNet-Version X-Runtime\"\n</code></pre> <p>Configuration to test CSP without breaking functionality:</p> <pre><code>CONTENT_SECURITY_POLICY: \"default-src 'self'; script-src 'self' https://trusted-cdn.example.com; img-src 'self' data: https://*.example.com; style-src 'self' 'unsafe-inline' https://trusted-cdn.example.com; connect-src 'self' https://api.example.com; object-src 'none'; frame-ancestors 'self'; form-action 'self'; base-uri 'self'; report-uri https://example.com/csp-reports\"\nCONTENT_SECURITY_POLICY_REPORT_ONLY: \"yes\"\n</code></pre>"},{"location":"features/#lets-encrypt","title":"Let's Encrypt","text":"<p>STREAM support </p> <p>The Let's Encrypt plugin simplifies SSL/TLS certificate management by automating the creation, renewal, and configuration of free certificates from Let's Encrypt. This feature enables secure HTTPS connections for your websites without the complexity of manual certificate management, reducing both cost and administrative overhead.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb automatically detects the domains configured for your website.</li> <li>BunkerWeb requests free SSL/TLS certificates from Let's Encrypt's certificate authority.</li> <li>Domain ownership is verified through either HTTP challenges (proving you control the website) or DNS challenges (proving you control your domain's DNS).</li> <li>Certificates are automatically installed and configured for your domains.</li> <li>BunkerWeb handles certificate renewals in the background before expiration, ensuring continuous HTTPS availability.</li> <li>The entire process is fully automated, requiring minimal intervention after the initial setup.</li> </ol> <p>Prerequisites</p> <p>To use this feature, ensure that proper DNS A records are configured for each domain, pointing to the public IP(s) where BunkerWeb is accessible. Without correct DNS configuration, the domain verification process will fail.</p>"},{"location":"features/#how-to-use_18","title":"How to Use","text":"<p>Follow these steps to configure and use the Let's Encrypt feature:</p> <ol> <li>Enable the feature: Set the <code>AUTO_LETS_ENCRYPT</code> setting to <code>yes</code> to enable automatic certificate issuance and renewal.</li> <li>Provide contact email: Enter your email address using the <code>EMAIL_LETS_ENCRYPT</code> setting to receive important notifications about your certificates.</li> <li>Choose challenge type: Select either <code>http</code> or <code>dns</code> verification with the <code>LETS_ENCRYPT_CHALLENGE</code> setting.</li> <li>Configure DNS provider: If using DNS challenges, specify your DNS provider and credentials.</li> <li>Select certificate profile: Choose your preferred certificate profile using the <code>LETS_ENCRYPT_PROFILE</code> setting (classic, tlsserver, or shortlived).</li> <li>Let BunkerWeb handle the rest: Once configured, certificates are automatically issued, installed, and renewed as needed.</li> </ol> <p>Certificate Profiles</p> <p>Let's Encrypt provides different certificate profiles for different use cases: - classic: General-purpose certificates with 90-day validity (default) - tlsserver: Optimized for TLS server authentication with 90-day validity and smaller payload - shortlived: Enhanced security with 7-day validity for automated environments - custom: If your ACME server supports a different profile, set it using <code>LETS_ENCRYPT_CUSTOM_PROFILE</code>.</p> <p>Profile Availability</p> <p>Note that the <code>tlsserver</code> and <code>shortlived</code> profiles may not be available in all environments or with all ACME clients at this time. The <code>classic</code> profile has the widest compatibility and is recommended for most users. If a selected profile is not available, the system will automatically fall back to the <code>classic</code> profile.</p>"},{"location":"features/#configuration-settings_18","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>AUTO_LETS_ENCRYPT</code> <code>no</code> multisite no Enable Let's Encrypt: Set to <code>yes</code> to enable automatic certificate issuance and renewal. <code>LETS_ENCRYPT_PASSTHROUGH</code> <code>no</code> multisite no Pass Through Let's Encrypt: Set to <code>yes</code> to pass through Let's Encrypt requests to the web server. This is useful when BunkerWeb is behind another reverse proxy handling SSL. <code>EMAIL_LETS_ENCRYPT</code> <code>contact@{FIRST_SERVER}</code> multisite no Contact Email: Email address that is used for Let's Encrypt notifications and is included in certificates. <code>LETS_ENCRYPT_CHALLENGE</code> <code>http</code> multisite no Challenge Type: Method used to verify domain ownership. Options: <code>http</code> or <code>dns</code>. <code>LETS_ENCRYPT_DNS_PROVIDER</code> multisite no DNS Provider: When using DNS challenges, the DNS provider to use (e.g., cloudflare, route53, digitalocean). <code>LETS_ENCRYPT_DNS_PROPAGATION</code> <code>default</code> multisite no DNS Propagation: The time to wait for DNS propagation in seconds. If no value is provided, the provider's default propagation time is used. <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> multisite yes Credential Item: Configuration items for DNS provider authentication (e.g., <code>cloudflare_api_token 123456</code>). Values can be raw text, base64 encoded, or a JSON object. <code>USE_LETS_ENCRYPT_WILDCARD</code> <code>no</code> multisite no Wildcard Certificates: When set to <code>yes</code>, creates wildcard certificates for all domains. Only available with DNS challenges. <code>USE_LETS_ENCRYPT_STAGING</code> <code>no</code> multisite no Use Staging: When set to <code>yes</code>, uses Let's Encrypt's staging environment for testing. Staging has higher rate limits but produces certificates that are not trusted by browsers. <code>LETS_ENCRYPT_CLEAR_OLD_CERTS</code> <code>no</code> global no Clear Old Certificates: When set to <code>yes</code>, removes old certificates that are no longer needed during renewal. <code>LETS_ENCRYPT_PROFILE</code> <code>classic</code> multisite no Certificate Profile: Select the certificate profile to use. Options: <code>classic</code> (general-purpose), <code>tlsserver</code> (optimized for TLS servers), or <code>shortlived</code> (7-day certificates). <code>LETS_ENCRYPT_CUSTOM_PROFILE</code> multisite no Custom Certificate Profile: Enter a custom certificate profile if your ACME server supports non-standard profiles. This overrides <code>LETS_ENCRYPT_PROFILE</code> if set. <code>LETS_ENCRYPT_MAX_RETRIES</code> <code>3</code> multisite no Maximum Retries: Number of times to retry certificate generation on failure. Set to <code>0</code> to disable retries. Useful for handling temporary network issues or API rate limits. <p>Information and behavior</p> <ul> <li>The <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> setting is a multiple setting and can be used to set multiple items for the DNS provider. The items will be saved as a cache file, and Certbot will read the credentials from it.</li> <li>If no <code>LETS_ENCRYPT_DNS_PROPAGATION</code> setting is provided, the provider's default propagation time is used.</li> <li>Full Let's Encrypt automation using the <code>http</code> challenge works in stream mode as long as you open the <code>80/tcp</code> port from the outside. Use the <code>LISTEN_STREAM_PORT_SSL</code> setting to choose your listening SSL/TLS port.</li> <li>If <code>LETS_ENCRYPT_PASSTHROUGH</code> is set to <code>yes</code>, BunkerWeb will not handle the ACME challenge requests itself but will pass them to the backend web server. This is useful in scenarios where BunkerWeb is acting as a reverse proxy in front of another server that is configured to handle Let's Encrypt challenges</li> </ul> <p>HTTP vs. DNS Challenges</p> <p>HTTP Challenges are easier to set up and work well for most websites:</p> <ul> <li>Requires your website to be publicly accessible on port 80</li> <li>Automatically configured by BunkerWeb</li> <li>Cannot be used for wildcard certificates</li> </ul> <p>DNS Challenges offer more flexibility and are required for wildcard certificates:</p> <ul> <li>Works even when your website is not publicly accessible</li> <li>Requires DNS provider API credentials</li> <li>Required for wildcard certificates (e.g., *.example.com)</li> <li>Useful when port 80 is blocked or unavailable</li> </ul> <p>Wildcard certificates</p> <p>Wildcard certificates are only available with DNS challenges. If you want to use them, you must set the <code>USE_LETS_ENCRYPT_WILDCARD</code> setting to <code>yes</code> and properly configure your DNS provider credentials.</p> <p>Rate Limits</p> <p>Let's Encrypt imposes rate limits on certificate issuance. When testing configurations, use the staging environment by setting <code>USE_LETS_ENCRYPT_STAGING</code> to <code>yes</code> to avoid hitting production rate limits. Staging certificates are not trusted by browsers but are useful for validating your setup.</p>"},{"location":"features/#supported-dns-providers","title":"Supported DNS Providers","text":"<p>The Let's Encrypt plugin supports a wide range of DNS providers for DNS challenges. Each provider requires specific credentials that must be provided using the <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> setting.</p> Provider Description Mandatory Settings Optional Settings Documentation <code>bunny</code> bunny.net <code>api_key</code> Documentation <code>cloudflare</code> Cloudflare either <code>api_token</code>or <code>email</code> and <code>api_key</code> Documentation <code>desec</code> deSEC <code>token</code> Documentation <code>digitalocean</code> DigitalOcean <code>token</code> Documentation <code>domainoffensive</code> Domain-Offensive <code>api_token</code> Documentation <code>dnsimple</code> DNSimple <code>token</code> Documentation <code>dnsmadeeasy</code> DNS Made Easy <code>api_key</code><code>secret_key</code> Documentation <code>dynu</code> Dynu <code>auth_token</code> Documentation <code>gehirn</code> Gehirn DNS <code>api_token</code><code>api_secret</code> Documentation <code>google</code> Google Cloud <code>project_id</code><code>private_key_id</code><code>private_key</code><code>client_email</code><code>client_id</code><code>client_x509_cert_url</code> <code>type</code> (default: <code>service_account</code>)<code>auth_uri</code> (default: <code>https://accounts.google.com/o/oauth2/auth</code>)<code>token_uri</code> (default: <code>https://accounts.google.com/o/oauth2/token</code>)<code>auth_provider_x509_cert_url</code> (default: <code>https://www.googleapis.com/oauth2/v1/certs</code>) Documentation <code>infomaniak</code> Infomaniak <code>token</code> Documentation <code>ionos</code> IONOS <code>prefix</code><code>secret</code> <code>endpoint</code> (default: <code>https://api.hosting.ionos.com</code>) Documentation <code>linode</code> Linode <code>key</code> Documentation <code>luadns</code> LuaDNS <code>email</code><code>token</code> Documentation <code>njalla</code> Njalla <code>token</code> Documentation <code>nsone</code> NS1 <code>api_key</code> Documentation <code>ovh</code> OVH <code>application_key</code><code>application_secret</code><code>consumer_key</code> <code>endpoint</code> (default: <code>ovh-eu</code>) Documentation <code>rfc2136</code> RFC 2136 <code>server</code><code>name</code><code>secret</code> <code>port</code> (default: <code>53</code>)<code>algorithm</code> (default: <code>HMAC-SHA512</code>)<code>sign_query</code> (default: <code>false</code>) Documentation <code>route53</code> Amazon Route 53 <code>access_key_id</code><code>secret_access_key</code> Documentation <code>sakuracloud</code> Sakura Cloud <code>api_token</code><code>api_secret</code> Documentation <code>scaleway</code> Scaleway <code>application_token</code> Documentation"},{"location":"features/#example-configurations_19","title":"Example Configurations","text":"Basic HTTP ChallengeCloudflare DNS with WildcardAWS Route53 ConfigurationTesting with Staging Environment and RetriesDigitalOcean with Custom Propagation TimeGoogle Cloud DNS <p>Simple configuration using HTTP challenges for a single domain:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"http\"\n</code></pre> <p>Configuration for wildcard certificates using Cloudflare DNS:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"dns\"\nLETS_ENCRYPT_DNS_PROVIDER: \"cloudflare\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM: \"api_token YOUR_API_TOKEN\"\nUSE_LETS_ENCRYPT_WILDCARD: \"yes\"\n</code></pre> <p>Configuration using Amazon Route53 for DNS challenges:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"dns\"\nLETS_ENCRYPT_DNS_PROVIDER: \"route53\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM: \"aws_access_key_id YOUR_ACCESS_KEY\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_2: \"aws_secret_access_key YOUR_SECRET_KEY\"\n</code></pre> <p>Configuration for testing setup with the staging environment and enhanced retry settings:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"http\"\nUSE_LETS_ENCRYPT_STAGING: \"yes\"\nLETS_ENCRYPT_MAX_RETRIES: \"5\"\n</code></pre> <p>Configuration using DigitalOcean DNS with a longer propagation wait time:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"dns\"\nLETS_ENCRYPT_DNS_PROVIDER: \"digitalocean\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM: \"token YOUR_API_TOKEN\"\nLETS_ENCRYPT_DNS_PROPAGATION: \"120\"\n</code></pre> <p>Configuration using Google Cloud DNS with service account credentials:</p> <pre><code>AUTO_LETS_ENCRYPT: \"yes\"\nEMAIL_LETS_ENCRYPT: \"admin@example.com\"\nLETS_ENCRYPT_CHALLENGE: \"dns\"\nLETS_ENCRYPT_DNS_PROVIDER: \"google\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM: \"project_id your-project-id\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_2: \"private_key_id your-private-key-id\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_3: \"private_key your-private-key\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_4: \"client_email your-service-account-email\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_5: \"client_id your-client-id\"\nLETS_ENCRYPT_DNS_CREDENTIAL_ITEM_6: \"client_x509_cert_url your-cert-url\"\n</code></pre>"},{"location":"features/#limit","title":"Limit","text":"<p>STREAM support </p> <p>The Limit plugin in BunkerWeb provides robust capabilities to enforce limiting policies on your website, ensuring fair usage and protecting your resources from abuse, denial-of-service attacks, and excessive resource consumption. These policies include:</p> <ul> <li>Number of connections per IP address (STREAM support )</li> <li>Number of requests per IP address and URL within a specific time period (STREAM support )</li> </ul>"},{"location":"features/#how-it-works_1","title":"How it Works","text":"<ol> <li>Rate Limiting: Tracks the number of requests from each client IP address to specific URLs. If a client exceeds the configured rate limit, subsequent requests are temporarily denied.</li> <li>Connection Limiting: Monitors and restricts the number of concurrent connections from each client IP address. Different connection limits can be applied based on the protocol used (HTTP/1, HTTP/2, HTTP/3, or stream).</li> <li>In both cases, clients that exceed the defined limits receive an HTTP status code \"429 - Too Many Requests\", which helps prevent server overload.</li> </ol>"},{"location":"features/#steps-to-use","title":"Steps to Use","text":"<ol> <li>Enable Request Rate Limiting: Use <code>USE_LIMIT_REQ</code> to enable request rate limiting and define URL patterns along with their corresponding rate limits.</li> <li>Enable Connection Limiting: Use <code>USE_LIMIT_CONN</code> to enable connection limiting and set the maximum number of concurrent connections for different protocols.</li> <li>Apply Granular Control: Create multiple rate limit rules for different URLs to provide varying levels of protection across your site.</li> <li>Monitor Effectiveness: Use the web UI to view statistics on limited requests and connections.</li> </ol>"},{"location":"features/#configuration-settings_19","title":"Configuration Settings","text":"Request Rate LimitingConnection Limiting Setting Default Context Multiple Description <code>USE_LIMIT_REQ</code> <code>yes</code> multisite no Enable Request Limiting: Set to <code>yes</code> to enable the request rate limiting feature. <code>LIMIT_REQ_URL</code> <code>/</code> multisite yes URL Pattern: URL pattern (PCRE regex) to which the rate limit will be applied; use <code>/</code> to apply for all requests. <code>LIMIT_REQ_RATE</code> <code>2r/s</code> multisite yes Rate Limit: Maximum request rate in the format <code>Nr/t</code>, where N is the number of requests and t is the time unit: s (second), m (minute), h (hour), or d (day). <p>Rate Limiting Format</p> <p>The rate limit format is specified as <code>Nr/t</code> where:</p> <ul> <li><code>N</code> is the number of requests allowed</li> <li><code>r</code> is a literal 'r' (for 'requests')</li> <li><code>/</code> is a literal slash</li> <li><code>t</code> is the time unit: <code>s</code> (second), <code>m</code> (minute), <code>h</code> (hour), or <code>d</code> (day)</li> </ul> <p>For example, <code>5r/m</code> means that 5 requests per minute are allowed from each IP address.</p> Setting Default Context Multiple Description <code>USE_LIMIT_CONN</code> <code>yes</code> multisite no Enable Connection Limiting: Set to <code>yes</code> to enable the connection limiting feature. <code>LIMIT_CONN_MAX_HTTP1</code> <code>10</code> multisite no HTTP/1.X Connections: Maximum number of concurrent HTTP/1.X connections per IP address. <code>LIMIT_CONN_MAX_HTTP2</code> <code>100</code> multisite no HTTP/2 Streams: Maximum number of concurrent HTTP/2 streams per IP address. <code>LIMIT_CONN_MAX_HTTP3</code> <code>100</code> multisite no HTTP/3 Streams: Maximum number of concurrent HTTP/3 streams per IP address. <code>LIMIT_CONN_MAX_STREAM</code> <code>10</code> multisite no Stream Connections: Maximum number of concurrent stream connections per IP address. <p>Connection vs. Request Limiting</p> <ul> <li>Connection limiting restricts the number of simultaneous connections that a single IP address can maintain.</li> <li>Request rate limiting restricts the number of requests an IP address can make within a defined period of time.</li> </ul> <p>Using both methods provides comprehensive protection against various types of abuse.</p> <p>Setting Appropriate Limits</p> <p>Setting limits too restrictively may impact legitimate users, especially for HTTP/2 and HTTP/3 where browsers often use multiple streams. The default values are balanced for most use cases, but consider adjusting them based on your application's needs and user behavior.</p>"},{"location":"features/#example-configurations_20","title":"Example Configurations","text":"Basic ProtectionProtecting Specific EndpointsHigh-Traffic Site ConfigurationAPI Server Configuration <p>A simple configuration using default settings to protect your entire site:</p> <pre><code>USE_LIMIT_REQ: \"yes\"\nLIMIT_REQ_URL: \"/\"\nLIMIT_REQ_RATE: \"2r/s\"\n\nUSE_LIMIT_CONN: \"yes\"\nLIMIT_CONN_MAX_HTTP1: \"10\"\nLIMIT_CONN_MAX_HTTP2: \"100\"\nLIMIT_CONN_MAX_HTTP3: \"100\"\nLIMIT_CONN_MAX_STREAM: \"10\"\n</code></pre> <p>Configuration with different rate limits for various endpoints:</p> <pre><code>USE_LIMIT_REQ: \"yes\"\n\n# Default rule for all requests\nLIMIT_REQ_URL: \"/\"\nLIMIT_REQ_RATE: \"10r/s\"\n\n# Stricter limit for login page\nLIMIT_REQ_URL_2: \"^/login\"\nLIMIT_REQ_RATE_2: \"1r/s\"\n\n# Stricter limit for API\nLIMIT_REQ_URL_3: \"^/api/\"\nLIMIT_REQ_RATE_3: \"5r/s\"\n\nUSE_LIMIT_CONN: \"yes\"\nLIMIT_CONN_MAX_HTTP1: \"10\"\nLIMIT_CONN_MAX_HTTP2: \"100\"\nLIMIT_CONN_MAX_HTTP3: \"100\"\nLIMIT_CONN_MAX_STREAM: \"10\"\n</code></pre> <p>Configuration tuned for high-traffic sites with more permissive limits:</p> <pre><code>USE_LIMIT_REQ: \"yes\"\n\n# General limit\nLIMIT_REQ_URL: \"/\"\nLIMIT_REQ_RATE: \"30r/s\"\n\n# Admin area protection\nLIMIT_REQ_URL_2: \"^/admin/\"\nLIMIT_REQ_RATE_2: \"5r/s\"\n\nUSE_LIMIT_CONN: \"yes\"\nLIMIT_CONN_MAX_HTTP1: \"50\"\nLIMIT_CONN_MAX_HTTP2: \"200\"\nLIMIT_CONN_MAX_HTTP3: \"200\"\nLIMIT_CONN_MAX_STREAM: \"30\"\n</code></pre> <p>Configuration optimized for an API server with rate limits expressed in requests per minute:</p> <pre><code>USE_LIMIT_REQ: \"yes\"\n\n# Public API endpoints\nLIMIT_REQ_URL: \"^/api/public/\"\nLIMIT_REQ_RATE: \"120r/m\"\n\n# Private API endpoints\nLIMIT_REQ_URL_2: \"^/api/private/\"\nLIMIT_REQ_RATE_2: \"300r/m\"\n\n# Authentication endpoint\nLIMIT_REQ_URL_3: \"^/api/auth\"\nLIMIT_REQ_RATE_3: \"10r/m\"\n\nUSE_LIMIT_CONN: \"yes\"\nLIMIT_CONN_MAX_HTTP1: \"20\"\nLIMIT_CONN_MAX_HTTP2: \"100\"\nLIMIT_CONN_MAX_HTTP3: \"100\"\nLIMIT_CONN_MAX_STREAM: \"20\"\n</code></pre>"},{"location":"features/#load-balancer-pro","title":"Load Balancer  (PRO)","text":"<p>STREAM support </p> <p>Provides load balancing feature to group of upstreams with optional healthchecks.</p> Setting Default Context Multiple Description <code>LOADBALANCER_HEALTHCHECK_DICT_SIZE</code> <code>10m</code> global no Shared dict size (datastore for all healthchecks). <code>LOADBALANCER_UPSTREAM_NAME</code> global yes Name of the upstream (used in REVERSE_PROXY_HOST). <code>LOADBALANCER_UPSTREAM_SERVERS</code> global yes List of servers/IPs in the server group. <code>LOADBALANCER_UPSTREAM_MODE</code> <code>round-robin</code> global yes Load balancing mode (round-robin or sticky). <code>LOADBALANCER_UPSTREAM_RESOLVE</code> <code>no</code> global yes Dynamically resolve upstream hostnames. <code>LOADBALANCER_UPSTREAM_KEEPALIVE_TIMEOUT</code> <code>60s</code> global yes Keepalive timeout for upstream connections. <code>LOADBALANCER_UPSTREAM_KEEPALIVE_TIME</code> <code>1h</code> global yes Keepalive time for upstream connections. <code>LOADBALANCER_HEALTHCHECK_URL</code> <code>/status</code> global yes The healthcheck URL. <code>LOADBALANCER_HEALTHCHECK_INTERVAL</code> <code>2000</code> global yes Healthcheck interval in milliseconds. <code>LOADBALANCER_HEALTHCHECK_TIMEOUT</code> <code>1000</code> global yes Healthcheck timeout in milliseconds. <code>LOADBALANCER_HEALTHCHECK_FALL</code> <code>3</code> global yes Number of failed healthchecks before marking the server as down. <code>LOADBALANCER_HEALTHCHECK_RISE</code> <code>1</code> global yes Number of successful healthchecks before marking the server as up. <code>LOADBALANCER_HEALTHCHECK_VALID_STATUSES</code> <code>200</code> global yes HTTP status considered valid in healthchecks. <code>LOADBALANCER_HEALTHCHECK_CONCURRENCY</code> <code>10</code> global yes Maximum number of concurrent healthchecks. <code>LOADBALANCER_HEALTHCHECK_TYPE</code> <code>http</code> global yes Type of healthcheck (http or https). <code>LOADBALANCER_HEALTHCHECK_SSL_VERIFY</code> <code>yes</code> global yes Verify SSL certificate in healthchecks. <code>LOADBALANCER_HEALTHCHECK_HOST</code> global yes Host header for healthchecks (useful for HTTPS)."},{"location":"features/#metrics","title":"Metrics","text":"<p>STREAM support </p> <p>The Metrics plugin provides comprehensive monitoring and data collection capabilities for your BunkerWeb instance. This feature enables you to track various performance indicators, security events, and system statistics, giving you valuable insights into the behavior and health of your protected websites and services.</p> <p>How it works:</p> <ol> <li>BunkerWeb collects key metrics during the processing of requests and responses.</li> <li>These metrics include counters for blocked requests, performance measurements, and various security-related statistics.</li> <li>The data is stored efficiently in memory, with configurable limits to prevent excessive resource usage.</li> <li>For multi-instance setups, Redis can be used to centralize and aggregate metrics data.</li> <li>The collected metrics can be accessed through the API or visualized in the web UI.</li> <li>This information helps you identify security threats, troubleshoot issues, and optimize your configuration.</li> </ol>"},{"location":"features/#technical-implementation","title":"Technical Implementation","text":"<p>The metrics plugin works by:</p> <ul> <li>Using shared dictionaries in NGINX, where <code>metrics_datastore</code> is used for HTTP and <code>metrics_datastore_stream</code> for TCP/UDP traffic</li> <li>Leveraging an LRU cache for efficient in-memory storage</li> <li>Periodically synchronizing data between workers using timers</li> <li>Storing detailed information about blocked requests, including the client IP address, country, timestamp, request details, and block reason</li> <li>Supporting plugin-specific metrics through a common metrics collection interface</li> <li>Providing API endpoints for querying collected metrics</li> </ul>"},{"location":"features/#how-to-use_19","title":"How to Use","text":"<p>Follow these steps to configure and use the Metrics feature:</p> <ol> <li>Enable the feature: Metrics collection is enabled by default. You can control this with the <code>USE_METRICS</code> setting.</li> <li>Configure memory allocation: Set the amount of memory to allocate for metrics storage using the <code>METRICS_MEMORY_SIZE</code> setting.</li> <li>Set storage limits: Define how many blocked requests to store per worker and in Redis with the respective settings.</li> <li>Access the data: View the collected metrics through the web UI or API endpoints.</li> <li>Analyze the information: Use the gathered data to identify patterns, detect security issues, and optimize your configuration.</li> </ol>"},{"location":"features/#collected-metrics","title":"Collected Metrics","text":"<p>The metrics plugin collects the following information:</p> <ol> <li> <p>Blocked Requests: For each blocked request, the following data is stored:</p> <ul> <li>Request ID and timestamp</li> <li>Client IP address and country (when available)</li> <li>HTTP method and URL</li> <li>HTTP status code</li> <li>User agent</li> <li>Block reason and security mode</li> <li>Server name</li> <li>Additional data related to the block reason</li> </ul> </li> <li> <p>Plugin Counters: Various plugin-specific counters that track activities and events.</p> </li> </ol>"},{"location":"features/#api-access","title":"API Access","text":"<p>Metrics data can be accessed via BunkerWeb's internal API endpoints:</p> <ul> <li>Endpoint: <code>/metrics/{filter}</code></li> <li>Method: GET</li> <li>Description: Retrieves metrics data based on the specified filter</li> <li>Response Format: JSON object containing the requested metrics</li> </ul> <p>For example, <code>/metrics/requests</code> returns information about blocked requests.</p> <p>API Access Configuration</p> <p>To access metrics via the API, you must ensure that:</p> <ol> <li>The API feature is enabled with <code>USE_API: \"yes\"</code> (enabled by default)</li> <li>Your client IP is included in the <code>API_WHITELIST_IP</code> setting (default is <code>127.0.0.0/8</code>)</li> <li>You are accessing the API on the configured port (default is <code>5000</code> via the <code>API_HTTP_PORT</code> setting)</li> <li>You are using the correct <code>API_SERVER_NAME</code> value in the Host header (default is <code>bwapi</code>)</li> </ol> <p>A typical API request would look like: <pre><code>curl -H \"Host: bwapi\" http://your-bunkerweb-instance:5000/metrics/requests\n</code></pre></p> <p>If you have customized the <code>API_SERVER_NAME</code> to something other than the default <code>bwapi</code>, use that value in the Host header instead.</p> <p>For secure production environments, make sure to restrict API access to trusted IPs only.</p>"},{"location":"features/#configuration-settings_20","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_METRICS</code> <code>yes</code> multisite no Enable Metrics: Set to <code>yes</code> to enable collection and retrieval of metrics. <code>METRICS_MEMORY_SIZE</code> <code>16m</code> global no Memory Size: Size of the internal storage for metrics (e.g., <code>16m</code>, <code>32m</code>). <code>METRICS_MAX_BLOCKED_REQUESTS</code> <code>1000</code> global no Max Blocked Requests: Maximum number of blocked requests to store per worker. <code>METRICS_MAX_BLOCKED_REQUESTS_REDIS</code> <code>100000</code> global no Max Redis Blocked Requests: Maximum number of blocked requests to store in Redis. <code>METRICS_SAVE_TO_REDIS</code> <code>yes</code> global no Save Metrics to Redis: Set to <code>yes</code> to save metrics (counters and tables) to Redis for cluster-wide aggregation. <p>Sizing Memory Allocation</p> <p>The <code>METRICS_MEMORY_SIZE</code> setting should be adjusted based on your traffic volume and the number of instances. For high-traffic sites, consider increasing this value to ensure all metrics are captured without data loss.</p> <p>Redis Integration</p> <p>When BunkerWeb is configured to use Redis, the metrics plugin will automatically synchronize blocked request data to the Redis server. This provides a centralized view of security events across multiple BunkerWeb instances.</p> <p>Performance Considerations</p> <p>Setting very high values for <code>METRICS_MAX_BLOCKED_REQUESTS</code> or <code>METRICS_MAX_BLOCKED_REQUESTS_REDIS</code> can increase memory usage. Monitor your system resources and adjust these values according to your actual needs and available resources.</p> <p>Worker-Specific Storage</p> <p>Each NGINX worker maintains its own metrics in memory. When accessing metrics through the API, data from all workers is automatically aggregated to provide a complete view.</p>"},{"location":"features/#example-configurations_21","title":"Example Configurations","text":"Basic ConfigurationLow-Resource EnvironmentHigh-Traffic EnvironmentMetrics Disabled <p>Default configuration suitable for most deployments:</p> <pre><code>USE_METRICS: \"yes\"\nMETRICS_MEMORY_SIZE: \"16m\"\nMETRICS_MAX_BLOCKED_REQUESTS: \"1000\"\nMETRICS_MAX_BLOCKED_REQUESTS_REDIS: \"100000\"\nMETRICS_SAVE_TO_REDIS: \"yes\"\n</code></pre> <p>Configuration optimized for environments with limited resources:</p> <pre><code>USE_METRICS: \"yes\"\nMETRICS_MEMORY_SIZE: \"8m\"\nMETRICS_MAX_BLOCKED_REQUESTS: \"500\"\nMETRICS_MAX_BLOCKED_REQUESTS_REDIS: \"10000\"\nMETRICS_SAVE_TO_REDIS: \"no\"\n</code></pre> <p>Configuration for high-traffic websites that need to track more security events:</p> <pre><code>USE_METRICS: \"yes\"\nMETRICS_MEMORY_SIZE: \"64m\"\nMETRICS_MAX_BLOCKED_REQUESTS: \"5000\"\nMETRICS_MAX_BLOCKED_REQUESTS_REDIS: \"500000\"\nMETRICS_SAVE_TO_REDIS: \"yes\"\n</code></pre> <p>Configuration with metrics collection disabled:</p> <pre><code>USE_METRICS: \"no\"\n</code></pre>"},{"location":"features/#migration-pro","title":"Migration  (PRO)","text":"<p>STREAM support </p> <p>Migration of BunkerWeb configuration between instances made easy via the web UI</p>"},{"location":"features/#miscellaneous","title":"Miscellaneous","text":"<p>STREAM support </p> <p>The Miscellaneous plugin provides essential baseline settings that help maintain the security and functionality of your website. This core component offers comprehensive controls for:</p> <ul> <li>Server behavior - Configure how your server responds to various requests</li> <li>HTTP settings - Manage methods, request sizes, and protocol options</li> <li>File management - Control static file serving and optimize delivery</li> <li>Protocol support - Enable modern HTTP protocols for better performance</li> <li>System configurations - Extend functionality and improve security</li> </ul> <p>Whether you need to restrict HTTP methods, manage request sizes, optimize file caching, or control how your server responds to various requests, this plugin gives you the tools to fine-tune your web service's behavior while optimizing both performance and security.</p>"},{"location":"features/#key-features","title":"Key Features","text":"Feature Category Description HTTP Method Control Define which HTTP methods are acceptable for your application Default Server Protection Prevent unauthorized access through hostname mismatches and enforce SNI for secure connections Request Size Management Set limits for client request bodies and file uploads Static File Serving Configure and optimize delivery of static content from custom root folders File Caching Improve performance through advanced file descriptor caching mechanisms with customizable settings Protocol Support Configure modern HTTP protocol options (HTTP2/HTTP3) and Alt-Svc port settings Anonymous Reporting Optional usage statistics reporting to help improve BunkerWeb External Plugin Support Extend functionality by integrating external plugins through URLs HTTP Status Control Configure how your server responds when denying requests (including connection termination)"},{"location":"features/#configuration-guide_1","title":"Configuration Guide","text":"Default Server SecurityDeny HTTP StatusHTTP MethodsRequest Size LimitsProtocol SupportStatic File ServingSystem SettingsFile Caching <p>Default Server Controls</p> <p>In HTTP, the <code>Host</code> header specifies the target server, but it may be missing or unknown, often due to bots scanning for vulnerabilities.</p> <p>To block such requests:</p> <ul> <li>Set <code>DISABLE_DEFAULT_SERVER</code> to <code>yes</code> to silently deny such requests using NGINX's <code>444</code> status code.</li> <li>For stricter security, enable <code>DISABLE_DEFAULT_SERVER_STRICT_SNI</code> to reject SSL/TLS connections without valid SNI.</li> </ul> <p>Security Benefits</p> <ul> <li>Blocks Host header manipulation and virtual host scanning</li> <li>Mitigates HTTP request smuggling risks</li> <li>Removes the default server as an attack vector</li> </ul> Setting Default Context Multiple Description <code>DISABLE_DEFAULT_SERVER</code> <code>no</code> global no Default Server: Set to <code>yes</code> to disable the default server when no hostname matches the request. <code>DISABLE_DEFAULT_SERVER_STRICT_SNI</code> <code>no</code> global no Strict SNI: When set to <code>yes</code>, requires SNI for HTTPS connections and rejects connections without valid SNI. <p>SNI Enforcement</p> <p>Enabling strict SNI validation provides stronger security but may cause issues if BunkerWeb is behind a reverse proxy that forwards HTTPS requests without preserving SNI information. Test thoroughly before enabling in production environments.</p> <p>HTTP Status Control</p> <p>The first step in handling denied client access is defining the appropriate action. This can be configured using the <code>DENY_HTTP_STATUS</code> setting. When BunkerWeb denies a request, you can control its response using this setting. By default, it returns a <code>403 Forbidden</code> status, displaying a web page or custom content to the client.</p> <p>Alternatively, setting it to <code>444</code> closes the connection immediately without sending any response. This non-standard status code, specific to NGINX, is useful for silently dropping unwanted requests.</p> Setting Default Context Multiple Description <code>DENY_HTTP_STATUS</code> <code>403</code> global no Deny HTTP Status: HTTP status code to send when request is denied (403 or 444). Code 444 closes the connection. <p>444 Status Code considerations</p> <p>Since clients receive no feedback, troubleshooting can be more challenging. Setting <code>444</code> is recommended only if you have thoroughly addressed false positives, are experienced with BunkerWeb, and require a higher level of security.</p> <p>Stream mode</p> <p>In stream mode, this setting is always enforced as <code>444</code>, meaning the connection will be closed, regardless of the configured value.</p> <p>HTTP Method Control</p> <p>Restricting HTTP methods to only those required by your application is a fundamental security measure that adheres to the principle of least privilege. By explicitly defining acceptable HTTP methods, you can minimize the risk of exploitation through unused or dangerous methods.</p> <p>This feature is configured using the <code>ALLOWED_METHODS</code> setting, where methods are listed and separated by a <code>|</code> (default: <code>GET|POST|HEAD</code>). If a client attempts to use a method not listed, the server will respond with a 405 - Method Not Allowed status.</p> <p>For most websites, the default <code>GET|POST|HEAD</code> is sufficient. If your application uses RESTful APIs, you may need to include methods like <code>PUT</code> and <code>DELETE</code>.</p> <p>Security Benefits</p> <ul> <li>Prevents exploitation of unused or unnecessary HTTP methods</li> <li>Reduces the attack surface by disabling potentially harmful methods</li> <li>Blocks HTTP method enumeration techniques used by attackers</li> </ul> Setting Default Context Multiple Description <code>ALLOWED_METHODS</code> <code>GET    | POST    | HEAD</code> multisite no HTTP Methods: List of HTTP methods that are allowed, separated by pipe characters. <p>CORS and Pre-flight Requests</p> <p>If your application supports Cross-Origin Resource Sharing (CORS), you should include the <code>OPTIONS</code> method in the <code>ALLOWED_METHODS</code> setting to handle pre-flight requests. This ensures proper functionality for browsers making cross-origin requests.</p> <p>Security Considerations</p> <ul> <li>Avoid enabling <code>TRACE</code> or <code>CONNECT</code>: These methods are rarely needed and can introduce significant security risks, such as enabling Cross-Site Tracing (XST) or tunneling attacks.</li> <li>Regularly review allowed methods: Periodically audit the <code>ALLOWED_METHODS</code> setting to ensure it aligns with your application's current requirements.</li> <li>Test thoroughly before deployment: Changes to HTTP method restrictions can impact application functionality. Validate your configuration in a staging environment before applying it to production.</li> </ul> <p>Request Size Limits</p> <p>The maximum request body size can be controlled using the <code>MAX_CLIENT_SIZE</code> setting (default: <code>10m</code>). Accepted values follow the syntax described here.</p> <p>Security Benefits</p> <ul> <li>Protects against denial-of-service attacks caused by excessive payload sizes</li> <li>Mitigates buffer overflow vulnerabilities</li> <li>Prevents file upload attacks</li> <li>Reduces the risk of server resource exhaustion</li> </ul> Setting Default Context Multiple Description <code>MAX_CLIENT_SIZE</code> <code>10m</code> multisite no Maximum Request Size: The maximum allowed size for client request bodies (e.g., file uploads). <p>Request Size Configuration Best Practices</p> <p>If you need to allow a request body of unlimited size, you can set the <code>MAX_CLIENT_SIZE</code> value to <code>0</code>. However, this is not recommended due to potential security and performance risks.</p> <p>Best Practices:</p> <ul> <li>Always configure <code>MAX_CLIENT_SIZE</code> to the smallest value that meets your application's legitimate requirements.</li> <li>Regularly review and adjust this setting to align with your application's evolving needs.</li> <li>Avoid setting <code>0</code> unless absolutely necessary, as it can expose your server to denial-of-service attacks and resource exhaustion.</li> </ul> <p>By carefully managing this setting, you can ensure optimal security and performance for your application.</p> <p>HTTP Protocol Settings</p> <p>Modern HTTP protocols like HTTP/2 and HTTP/3 improve performance and security. BunkerWeb allows easy configuration of these protocols.</p> <p>Security and Performance Benefits</p> <ul> <li>Security Advantages: Modern protocols like HTTP/2 and HTTP/3 enforce TLS/HTTPS by default, reduce susceptibility to certain attacks, and improve privacy through encrypted headers (HTTP/3).</li> <li>Performance Benefits: Features like multiplexing, header compression, server push, and binary data transfer enhance speed and efficiency.</li> </ul> Setting Default Context Multiple Description <code>LISTEN_HTTP</code> <code>yes</code> multisite no HTTP Listen: Respond to (insecure) HTTP requests when set to <code>yes</code>. <code>HTTP2</code> <code>yes</code> multisite no HTTP2: Support HTTP2 protocol when HTTPS is enabled. <code>HTTP3</code> <code>yes</code> multisite no HTTP3: Support HTTP3 protocol when HTTPS is enabled. <code>HTTP3_ALT_SVC_PORT</code> <code>443</code> multisite no HTTP3 Alt-Svc Port: Port to use in the Alt-Svc header for HTTP3. <p>About HTTP/3</p> <p>HTTP/3, the latest version of the Hypertext Transfer Protocol, uses QUIC over UDP instead of TCP, addressing issues like head-of-line blocking for faster, more reliable connections.</p> <p>NGINX introduced experimental support for HTTP/3 and QUIC starting with version 1.25.0. However, this feature is still experimental, and caution is advised for production use. For more details, see NGINX's official documentation.</p> <p>Thorough testing is recommended before enabling HTTP/3 in production environments.</p> <p>File Serving Configuration</p> <p>BunkerWeb can serve static files directly or act as a reverse proxy to an application server. By default, files are served from <code>/var/www/html/{server_name}</code>.</p> Setting Default Context Multiple Description <code>SERVE_FILES</code> <code>yes</code> multisite no Serve Files: When set to <code>yes</code>, BunkerWeb will serve static files from the configured root folder. <code>ROOT_FOLDER</code> <code>/var/www/html/{server_name}</code> multisite no Root Folder: The directory from which to serve static files. Empty means use the default location. <p>Best Practices for Static File Serving</p> <ul> <li>Direct Serving: Enable file serving (<code>SERVE_FILES=yes</code>) when BunkerWeb is responsible for serving static files directly.</li> <li>Reverse Proxy: If BunkerWeb acts as a reverse proxy, deactivate file serving (<code>SERVE_FILES=no</code>) to reduce the attack surface and avoid exposing unnecessary directories.</li> <li>Permissions: Ensure proper file permissions and path configurations to prevent unauthorized access.</li> <li>Security: Avoid exposing sensitive directories or files through misconfigurations.</li> </ul> <p>By carefully managing static file serving, you can optimize performance while maintaining a secure environment.</p> <p>Plugin and System Management</p> <p>These settings manage BunkerWeb's interaction with external systems and contribute to improving the product through optional anonymous usage statistics.</p> <p>Anonymous Reporting</p> <p>Anonymous reporting provides the BunkerWeb team with insights into how the software is being used. This helps identify areas for improvement and prioritize feature development. The reports are strictly statistical and do not include any sensitive or personally identifiable information. They cover:</p> <ul> <li>Enabled features</li> <li>General configuration patterns</li> </ul> <p>You can disable this feature if desired by setting <code>SEND_ANONYMOUS_REPORT</code> to <code>no</code>.</p> <p>External Plugins</p> <p>External plugins enable you to extend BunkerWeb's functionality by integrating third-party modules. This allows for additional customization and advanced use cases.</p> <p>External Plugin Security</p> <p>External plugins can introduce security risks if not properly vetted. Follow these best practices to minimize potential threats:</p> <ul> <li>Only use plugins from trusted sources.</li> <li>Verify plugin integrity using checksums when available.</li> <li>Regularly review and update plugins to ensure security and compatibility.</li> </ul> <p>For more details, refer to the Plugins documentation.</p> Setting Default Context Multiple Description <code>SEND_ANONYMOUS_REPORT</code> <code>yes</code> global no Anonymous Reports: Send anonymous usage reports to BunkerWeb maintainers. <code>EXTERNAL_PLUGIN_URLS</code> global no External Plugins: URLs for external plugins to download (space-separated). <p>File Cache Optimization</p> <p>The open file cache improves performance by storing file descriptors and metadata in memory, reducing the need for repeated file system operations.</p> <p>Benefits of File Caching</p> <ul> <li>Performance: Reduces filesystem I/O, decreases latency, and lowers CPU usage for file operations.</li> <li>Security: Mitigates timing attacks by caching error responses and reduces the impact of DoS attacks targeting the filesystem.</li> </ul> Setting Default Context Multiple Description <code>USE_OPEN_FILE_CACHE</code> <code>no</code> multisite no Enable Cache: Enable caching of file descriptors and metadata to improve performance. <code>OPEN_FILE_CACHE</code> <code>max=1000 inactive=20s</code> multisite no Cache Configuration: Configure the open file cache (e.g., maximum entries and inactive timeout). <code>OPEN_FILE_CACHE_ERRORS</code> <code>yes</code> multisite no Cache Errors: Cache file descriptor lookup errors as well as successful lookups. <code>OPEN_FILE_CACHE_MIN_USES</code> <code>2</code> multisite no Minimum Uses: Minimum number of accesses during the inactive period for a file to remain cached. <code>OPEN_FILE_CACHE_VALID</code> <code>30s</code> multisite no Cache Validity: Time after which cached elements are revalidated. <p>Configuration Guide</p> <p>To enable and configure file caching: 1. Set <code>USE_OPEN_FILE_CACHE</code> to <code>yes</code> to activate the feature. 2. Adjust <code>OPEN_FILE_CACHE</code> parameters to define the maximum number of cached entries and their inactive timeout. 3. Use <code>OPEN_FILE_CACHE_ERRORS</code> to cache both successful and failed lookups, reducing repeated filesystem operations. 4. Set <code>OPEN_FILE_CACHE_MIN_USES</code> to specify the minimum number of accesses required for a file to remain cached. 5. Define the cache validity period with <code>OPEN_FILE_CACHE_VALID</code> to control how often cached elements are revalidated.</p> <p>Best Practices</p> <ul> <li>Enable file caching for websites with many static files to improve performance.</li> <li>Regularly review and fine-tune cache settings to balance performance and resource usage.</li> <li>In dynamic environments where files change frequently, consider reducing the cache validity period or disabling the feature to ensure content freshness.</li> </ul>"},{"location":"features/#example-configurations_22","title":"Example Configurations","text":"Default Server SecurityDeny HTTP StatusHTTP MethodsRequest Size LimitsProtocol SupportStatic File ServingFile Caching <p>Example configuration for disabling the default server and enforcing strict SNI:</p> <pre><code>DISABLE_DEFAULT_SERVER: \"yes\"\nDISABLE_DEFAULT_SERVER_STRICT_SNI: \"yes\"\n</code></pre> <p>Example configuration for silently dropping unwanted requests:</p> <pre><code>DENY_HTTP_STATUS: \"444\"\n</code></pre> <p>Example configuration for restricting HTTP methods to only those required by a RESTful API:</p> <pre><code>ALLOWED_METHODS: \"GET|POST|PUT|DELETE\"\n</code></pre> <p>Example configuration for limiting the maximum request body size:</p> <pre><code>MAX_CLIENT_SIZE: \"5m\"\n</code></pre> <p>Example configuration for enabling HTTP/2 and HTTP/3 with a custom Alt-Svc port:</p> <pre><code>HTTP2: \"yes\"\nHTTP3: \"yes\"\nHTTP3_ALT_SVC_PORT: \"443\"\n</code></pre> <p>Example configuration for serving static files from a custom root folder:</p> <pre><code>SERVE_FILES: \"yes\"\nROOT_FOLDER: \"/var/www/custom-folder\"\n</code></pre> <p>Example configuration for enabling and optimizing file caching:</p> <p>```yaml USE_OPEN_FILE_CACHE: \"yes\" OPEN_FILE_CACHE: \"max=2000 inactive=30s\" OPEN_FILE_CACHE_ERRORS: \"yes\" OPEN_FILE_CACHE_MIN_USES: \"3\" OPEN_FILE_CACHE_VALID: \"60s\"</p>"},{"location":"features/#modsecurity","title":"ModSecurity","text":"<p>STREAM support </p> <p>The ModSecurity plugin integrates the powerful ModSecurity Web Application Firewall (WAF) into BunkerWeb. This integration delivers robust protection against a wide range of web attacks by leveraging the OWASP Core Rule Set (CRS) to detect and block threats such as SQL injection, cross-site scripting (XSS), local file inclusion, and more.</p> <p>How it works:</p> <ol> <li>When a request is received, ModSecurity evaluates it against the active rule set.</li> <li>The OWASP Core Rule Set inspects headers, cookies, URL parameters, and body content.</li> <li>Each detected violation contributes to an overall anomaly score.</li> <li>If this score exceeds the configured threshold, the request is blocked.</li> <li>Detailed logs are created to help diagnose which rules were triggered and why.</li> </ol> <p>Key benefits</p> <ol> <li>Industry Standard Protection: Utilizes the widely used open-source ModSecurity firewall.</li> <li>OWASP Core Rule Set: Employs community-maintained rules covering the OWASP Top Ten and more.</li> <li>Configurable Security Levels: Adjust paranoia levels to balance security with potential false positives.</li> <li>Detailed Logging: Provides thorough audit logs for attack analysis.</li> <li>Plugin Support: Extend protection with optional CRS plugins tailored to your applications.</li> </ol>"},{"location":"features/#how-to-use_20","title":"How to Use","text":"<p>Follow these steps to configure and use ModSecurity:</p> <ol> <li>Enable the feature: ModSecurity is enabled by default. This can be controlled using the <code>USE_MODSECURITY</code> setting.</li> <li>Select a CRS version: Choose a version of the OWASP Core Rule Set (v3, v4, or nightly).</li> <li>Add plugins: Optionally activate CRS plugins to enhance rule coverage.</li> <li>Monitor and tune: Use logs and the web UI to identify false positives and adjust settings.</li> </ol>"},{"location":"features/#configuration-settings_21","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_MODSECURITY</code> <code>yes</code> multisite no Enable ModSecurity: Turn on ModSecurity Web Application Firewall protection. <code>USE_MODSECURITY_CRS</code> <code>yes</code> multisite no Use Core Rule Set: Enable the OWASP Core Rule Set for ModSecurity. <code>MODSECURITY_CRS_VERSION</code> <code>4</code> multisite no CRS Version: The version of the OWASP Core Rule Set to use. Options: <code>3</code>, <code>4</code>, or <code>nightly</code>. <code>MODSECURITY_SEC_RULE_ENGINE</code> <code>On</code> multisite no Rule Engine: Control whether rules are enforced. Options: <code>On</code>, <code>DetectionOnly</code>, or <code>Off</code>. <code>MODSECURITY_SEC_AUDIT_ENGINE</code> <code>RelevantOnly</code> multisite no Audit Engine: Control how audit logging works. Options: <code>On</code>, <code>Off</code>, or <code>RelevantOnly</code>. <code>MODSECURITY_SEC_AUDIT_LOG_PARTS</code> <code>ABIJDEFHZ</code> multisite no Audit Log Parts: Which parts of requests/responses to include in audit logs. <code>MODSECURITY_REQ_BODY_NO_FILES_LIMIT</code> <code>131072</code> multisite no Request Body Limit (No Files): Maximum size for request bodies without file uploads. Accepts plain bytes or human\u2011readable suffix (<code>k</code>, <code>m</code>, <code>g</code>), e.g. <code>131072</code>, <code>256k</code>, <code>1m</code>, <code>2g</code>. <code>USE_MODSECURITY_CRS_PLUGINS</code> <code>yes</code> multisite no Enable CRS Plugins: Enable additional plugin rule sets for the Core Rule Set. <code>MODSECURITY_CRS_PLUGINS</code> multisite no CRS Plugins List: Space-separated list of plugins to download and install (<code>plugin-name[/tag]</code> or URL). <code>USE_MODSECURITY_GLOBAL_CRS</code> <code>no</code> global no Global CRS: When enabled, applies CRS rules globally at the HTTP level rather than per server. <p>ModSecurity and the OWASP Core Rule Set</p> <p>We strongly recommend keeping both ModSecurity and the OWASP Core Rule Set (CRS) enabled to provide robust protection against common web vulnerabilities. While occasional false positives may occur, they can be resolved with some effort by fine-tuning rules or using predefined exclusions.</p> <p>The CRS team actively maintains a list of exclusions for popular applications such as WordPress, Nextcloud, Drupal, and Cpanel, making it easier to integrate without impacting functionality. The security benefits far outweigh the minimal configuration effort required to address false positives.</p>"},{"location":"features/#available-crs-versions","title":"Available CRS Versions","text":"<p>Select a CRS version to best match your security needs:</p> <ul> <li><code>3</code>: Stable v3.3.7.</li> <li><code>4</code>: Stable v4.17.1 (default).</li> <li><code>nightly</code>: Nightly build offering the latest rule updates.</li> </ul> <p>Nightly Build</p> <p>The nightly build contains the most up-to-date rules, offering the latest protections against emerging threats. However, since it is updated daily and may include experimental or untested changes, it is recommended to first use the nightly build in a staging environment before deploying it in production.</p> <p>Paranoia Levels</p> <p>The OWASP Core Rule Set uses \"paranoia levels\" (PL) to control rule strictness:</p> <ul> <li>PL1 (default): Basic protection with minimal false positives</li> <li>PL2: Tighter security with more strict pattern matching</li> <li>PL3: Enhanced security with stricter validation</li> <li>PL4: Maximum security with very strict rules (may cause many false positives)</li> </ul> <p>You can set the paranoia level by adding a custom configuration file in <code>/etc/bunkerweb/configs/modsec-crs/</code>.</p>"},{"location":"features/#custom-configurations","title":"Custom Configurations","text":"<p>Tuning ModSecurity and the OWASP Core Rule Set (CRS) can be achieved through custom configurations. These configurations allow you to customize behavior at specific stages of the security rules processing:</p> <ul> <li><code>modsec-crs</code>: Applied before the OWASP Core Rule Set is loaded.</li> <li><code>modsec</code>: Applied after the OWASP Core Rule Set is loaded. This is also used if the CRS is not loaded at all.</li> <li><code>crs-plugins-before</code>: Applied before the CRS plugins are loaded.</li> <li><code>crs-plugins-after</code>: Applied after the CRS plugins are loaded.</li> </ul> <p>This structure provides flexibility, allowing you to fine-tune ModSecurity and CRS settings to suit your application's specific needs while maintaining a clear configuration flow.</p>"},{"location":"features/#adding-crs-exclusions-with-modsec-crs","title":"Adding CRS Exclusions with <code>modsec-crs</code>","text":"<p>You can use a custom configuration of type <code>modsec-crs</code> to add exclusions for specific use cases, such as enabling predefined exclusions for WordPress:</p> <pre><code>SecAction \\\n \"id:900130,\\\n  phase:1,\\\n  nolog,\\\n  pass,\\\n  t:none,\\\n  setvar:tx.crs_exclusions_wordpress=1\"\n</code></pre> <p>In this example:</p> <ul> <li>The action is executed in Phase 1 (early in the request lifecycle).</li> <li>It enables WordPress-specific CRS exclusions by setting the variable <code>tx.crs_exclusions_wordpress</code>.</li> </ul>"},{"location":"features/#updating-crs-rules-with-modsec","title":"Updating CRS Rules with <code>modsec</code>","text":"<p>To fine-tune the loaded CRS rules, you can use a custom configuration of type <code>modsec</code>. For example, you can remove specific rules or tags for certain request paths:</p> <pre><code>SecRule REQUEST_FILENAME \"/wp-admin/admin-ajax.php\" \"id:1,ctl:ruleRemoveByTag=attack-xss,ctl:ruleRemoveByTag=attack-rce\"\nSecRule REQUEST_FILENAME \"/wp-admin/options.php\" \"id:2,ctl:ruleRemoveByTag=attack-xss\"\nSecRule REQUEST_FILENAME \"^/wp-json/yoast\" \"id:3,ctl:ruleRemoveById=930120\"\n</code></pre> <p>In this example:</p> <ul> <li>Rule 1: Removes rules tagged as <code>attack-xss</code> and <code>attack-rce</code> for requests to <code>/wp-admin/admin-ajax.php</code>.</li> <li>Rule 2: Removes rules tagged as <code>attack-xss</code> for requests to <code>/wp-admin/options.php</code>.</li> <li>Rule 3: Removes a specific rule (ID <code>930120</code>) for requests matching <code>/wp-json/yoast</code>.</li> </ul> <p>Order of execution</p> <p>The execution order for ModSecurity in BunkerWeb is as follows, ensuring a clear and logical progression of rule application:</p> <ol> <li>OWASP CRS Configuration: Base configuration for the OWASP Core Rule Set.</li> <li>Custom Plugins Configuration (<code>crs-plugins-before</code>): Settings specific to plugins, applied before any CRS rules.</li> <li>Custom Plugin Rules (Before CRS Rules) (<code>crs-plugins-before</code>): Custom rules for plugins executed prior to CRS rules.</li> <li>Downloaded Plugins Configuration: Configuration for externally downloaded plugins.</li> <li>Downloaded Plugin Rules (Before CRS Rules): Rules for downloaded plugins executed before CRS rules.</li> <li>Custom CRS Rules (<code>modsec-crs</code>): User-defined rules applied before loading the CRS rules.</li> <li>OWASP CRS Rules: The core set of security rules provided by OWASP.</li> <li>Custom Plugin Rules (After CRS Rules) (<code>crs-plugins-after</code>): Custom plugin rules executed after CRS rules.</li> <li>Downloaded Plugin Rules (After CRS Rules): Rules for downloaded plugins executed after CRS rules.</li> <li>Custom Rules (<code>modsec</code>): User-defined rules applied after all CRS and plugin rules.</li> </ol> <p>Key Notes:</p> <ul> <li>Pre-CRS customizations (<code>crs-plugins-before</code>, <code>modsec-crs</code>) allow you to define exceptions or preparatory rules before the core CRS rules are loaded.</li> <li>Post-CRS customizations (<code>crs-plugins-after</code>, <code>modsec</code>) are ideal for overriding or extending rules after CRS and plugin rules have been applied.</li> <li>This structure provides maximum flexibility, enabling precise control over rule execution and customization while maintaining a strong security baseline.</li> </ul>"},{"location":"features/#owasp-crs-plugins","title":"OWASP CRS Plugins","text":"<p>The OWASP Core Rule Set also supports a range of plugins designed to extend its functionality and improve compatibility with specific applications or environments. These plugins can help fine-tune the CRS for use with popular platforms such as WordPress, Nextcloud, and Drupal, or even custom setups. For more information and a list of available plugins, refer to the OWASP CRS plugin registry.</p> <p>Plugin download</p> <p>The <code>MODSECURITY_CRS_PLUGINS</code> setting allows you to download and install plugins to extend the functionality of the OWASP Core Rule Set (CRS). This setting accepts a list of plugin names with optional tags or URLs, making it easy to integrate additional security features tailored to your specific needs.</p> <p>Here's a non-exhaustive list of accepted values for the <code>MODSECURITY_CRS_PLUGINS</code> setting:</p> <ul> <li><code>fake-bot</code> - Download the latest release of the plugin.</li> <li><code>wordpress-rule-exclusions/v1.0.0</code> - Download the version 1.0.0 of the plugin.</li> <li><code>https://github.com/coreruleset/dos-protection-plugin-modsecurity/archive/refs/heads/main.zip</code> - Download the plugin directly from the URL.</li> </ul> <p>False Positives</p> <p>Higher security settings may block legitimate traffic. Start with the default settings and monitor logs before increasing security levels. Be prepared to add exclusion rules for your specific application needs.</p>"},{"location":"features/#example-configurations_23","title":"Example Configurations","text":"Basic ConfigurationDetection-Only ModeAdvanced Configuration with PluginsLegacy ConfigurationGlobal ModSecurityNightly Build with Custom Plugins <p>A standard configuration with ModSecurity and CRS v4 enabled:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"4\"\nMODSECURITY_SEC_RULE_ENGINE: \"On\"\n</code></pre> <p>Configuration for monitoring potential threats without blocking:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"4\"\nMODSECURITY_SEC_RULE_ENGINE: \"DetectionOnly\"\nMODSECURITY_SEC_AUDIT_ENGINE: \"On\"\nMODSECURITY_SEC_AUDIT_LOG_PARTS: \"ABIJDEFHZ\"\n</code></pre> <p>Configuration with CRS v4 and plugins enabled for additional protection:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"4\"\nMODSECURITY_SEC_RULE_ENGINE: \"On\"\nUSE_MODSECURITY_CRS_PLUGINS: \"yes\"\nMODSECURITY_CRS_PLUGINS: \"wordpress-rule-exclusions fake-bot\"\nMODSECURITY_REQ_BODY_NO_FILES_LIMIT: \"262144\"\n</code></pre> <p>Configuration using CRS v3 for compatibility with older setups:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"3\"\nMODSECURITY_SEC_RULE_ENGINE: \"On\"\n</code></pre> <p>Configuration applying ModSecurity globally across all HTTP connections:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"4\"\nUSE_MODSECURITY_GLOBAL_CRS: \"yes\"\n</code></pre> <p>Configuration using the nightly build of CRS with custom plugins:</p> <pre><code>USE_MODSECURITY: \"yes\"\nUSE_MODSECURITY_CRS: \"yes\"\nMODSECURITY_CRS_VERSION: \"nightly\"\nUSE_MODSECURITY_CRS_PLUGINS: \"yes\"\nMODSECURITY_CRS_PLUGINS: \"wordpress-rule-exclusions/v1.0.0 https://github.com/coreruleset/dos-protection-plugin-modsecurity/archive/refs/heads/main.zip\"\n</code></pre> <p>Human-readable size values</p> <p>For size settings like <code>MODSECURITY_REQ_BODY_NO_FILES_LIMIT</code>, the suffixes <code>k</code>, <code>m</code>, and <code>g</code> (case-insensitive) are supported and represent kibibytes, mebibytes, and gibibytes (multiples of 1024). Examples: <code>256k</code> = 262144, <code>1m</code> = 1048576, <code>2g</code> = 2147483648.</p>"},{"location":"features/#monitoring-pro","title":"Monitoring  (PRO)","text":"<p>STREAM support </p> <p>BunkerWeb monitoring pro system. This plugin is a prerequisite for some other plugins.</p> Setting Default Context Multiple Description <code>USE_MONITORING</code> <code>yes</code> global no Enable monitoring of BunkerWeb. <code>MONITORING_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the dict to store monitoring metrics. <code>MONITORING_IGNORE_URLS</code> global no List of URLs to ignore when monitoring separated with spaces (e.g. /health)"},{"location":"features/#php","title":"PHP","text":"<p>STREAM support </p> <p>The PHP plugin provides seamless integration with PHP-FPM for BunkerWeb, enabling dynamic PHP processing for your websites. This feature supports both local PHP-FPM instances running on the same machine and remote PHP-FPM servers, giving you flexibility in how you configure your PHP environment.</p> <p>How it works:</p> <ol> <li>When a client requests a PHP file from your website, BunkerWeb routes the request to the configured PHP-FPM instance.</li> <li>For local PHP-FPM, BunkerWeb communicates with the PHP interpreter through a Unix socket file.</li> <li>For remote PHP-FPM, BunkerWeb forwards requests to the specified host and port using the FastCGI protocol.</li> <li>PHP-FPM processes the script and returns the generated content to BunkerWeb, which then delivers it to the client.</li> <li>URL rewriting is automatically configured to support common PHP frameworks and applications that use \"pretty URLs\".</li> </ol>"},{"location":"features/#how-to-use_21","title":"How to Use","text":"<p>Follow these steps to configure and use the PHP feature:</p> <ol> <li>Choose your PHP-FPM setup: Decide whether you'll use a local or remote PHP-FPM instance.</li> <li>Configure the connection: For local PHP, specify the socket path; for remote PHP, provide the hostname and port.</li> <li>Set the document root: Configure the root folder that contains your PHP files using the appropriate path setting.</li> <li>Let BunkerWeb handle the rest: Once configured, BunkerWeb automatically routes PHP requests to your PHP-FPM instance.</li> </ol>"},{"location":"features/#configuration-settings_22","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>REMOTE_PHP</code> multisite no Remote PHP Host: Hostname of the remote PHP-FPM instance. Leave empty to use local PHP. <code>REMOTE_PHP_PATH</code> multisite no Remote Path: Root folder containing files in the remote PHP-FPM instance. <code>REMOTE_PHP_PORT</code> <code>9000</code> multisite no Remote Port: Port of the remote PHP-FPM instance. <code>LOCAL_PHP</code> multisite no Local PHP Socket: Path to the PHP-FPM socket file. Leave empty to use a remote PHP-FPM instance. <code>LOCAL_PHP_PATH</code> multisite no Local Path: Root folder containing files in the local PHP-FPM instance. <p>Local vs. Remote PHP-FPM</p> <p>Choose the setup that best fits your infrastructure:</p> <ul> <li>Local PHP-FPM offers better performance due to socket-based communication and is ideal when PHP runs on the same machine as BunkerWeb.</li> <li>Remote PHP-FPM provides more flexibility and scalability by allowing PHP processing to occur on separate servers.</li> </ul> <p>Path Configuration</p> <p>The <code>REMOTE_PHP_PATH</code> or <code>LOCAL_PHP_PATH</code> must match the actual filesystem path where your PHP files are stored; otherwise, a \"File not found\" error will occur.</p> <p>URL Rewriting</p> <p>The PHP plugin automatically configures URL rewriting to support modern PHP applications. Requests for non-existent files will be directed to <code>index.php</code> with the original request URI available as a query parameter.</p>"},{"location":"features/#example-configurations_24","title":"Example Configurations","text":"Local PHP-FPM ConfigurationRemote PHP-FPM ConfigurationCustom Port ConfigurationWordPress Configuration <p>Configuration for using a local PHP-FPM instance:</p> <pre><code>LOCAL_PHP: \"/var/run/php/php8.1-fpm.sock\"\nLOCAL_PHP_PATH: \"/var/www/html\"\n</code></pre> <p>Configuration for using a remote PHP-FPM instance:</p> <pre><code>REMOTE_PHP: \"php-server.example.com\"\nREMOTE_PHP_PORT: \"9000\"\nREMOTE_PHP_PATH: \"/var/www/html\"\n</code></pre> <p>Configuration for using PHP-FPM on a non-standard port:</p> <pre><code>REMOTE_PHP: \"php-server.example.com\"\nREMOTE_PHP_PORT: \"9001\"\nREMOTE_PHP_PATH: \"/var/www/html\"\n</code></pre> <p>Configuration optimized for WordPress:</p> <pre><code>LOCAL_PHP: \"/var/run/php/php8.1-fpm.sock\"\nLOCAL_PHP_PATH: \"/var/www/html/wordpress\"\n</code></pre>"},{"location":"features/#pro","title":"Pro","text":"<p>STREAM support </p> <p>The Pro plugin bundles advanced features and enhancements for enterprise deployments of BunkerWeb. It unlocks additional capabilities, premium plugins, and extended functionality that complement the core BunkerWeb platform. It delivers enhanced security, performance, and management options for enterprise-grade deployments.</p> <p>How it works:</p> <ol> <li>With a valid Pro license key, BunkerWeb connects to the Pro API server to validate your subscription.</li> <li>Once authenticated, the plugin automatically downloads and installs Pro-exclusive plugins and extensions.</li> <li>Your Pro status is periodically verified to ensure continued access to premium features.</li> <li>Premium plugins are seamlessly integrated with your existing BunkerWeb configuration.</li> <li>All Pro features work harmoniously with the open-source core, enhancing rather than replacing functionality.</li> </ol> <p>Key benefits</p> <ol> <li>Premium Extensions: Access to exclusive plugins and features not available in the community edition.</li> <li>Enhanced Performance: Optimized configurations and advanced caching mechanisms.</li> <li>Enterprise Support: Priority assistance and dedicated support channels.</li> <li>Seamless Integration: Pro features work alongside community features without configuration conflicts.</li> <li>Automatic Updates: Premium plugins are automatically downloaded and kept current.</li> </ol>"},{"location":"features/#how-to-use_22","title":"How to Use","text":"<p>Follow these steps to configure and use the Pro features:</p> <ol> <li>Obtain a license key: Purchase a Pro license from the BunkerWeb Panel.</li> <li>Configure your license key: Use the <code>PRO_LICENSE_KEY</code> setting to configure your license.</li> <li>Let BunkerWeb handle the rest: Once configured with a valid license, Pro plugins are automatically downloaded and activated.</li> <li>Monitor your Pro status: Check the health indicators in the web UI to confirm your Pro subscription status.</li> </ol>"},{"location":"features/#configuration-settings_23","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>PRO_LICENSE_KEY</code> global no Pro License Key: Your BunkerWeb Pro license key for authentication. <p>License Management</p> <p>Your Pro license is tied to your specific deployment environment. If you need to transfer your license or have questions about your subscription, please contact support through the BunkerWeb Panel.</p> <p>Pro Features</p> <p>The specific Pro features available may evolve over time as new capabilities are added. The Pro plugin automatically handles the installation and configuration of all available features.</p> <p>Network Requirements</p> <p>The Pro plugin requires outbound internet access to connect to the BunkerWeb API for license verification and to download premium plugins. Ensure your firewall allows connections to <code>api.bunkerweb.io</code> on port 443 (HTTPS).</p>"},{"location":"features/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Q: What happens if my Pro license expires?</p> <p>A: If your Pro license expires, access to premium features and plugins will be disabled. However, your BunkerWeb installation will continue to operate with all community edition features intact. To regain access to Pro features, simply renew your license.</p> <p>Q: Will Pro features disrupt my existing configuration?</p> <p>A: No, Pro features are designed to integrate seamlessly with your current BunkerWeb setup. They enhance functionality without altering or interfering with your existing configuration, ensuring a smooth and reliable experience.</p> <p>Q: Can I try Pro features before committing to a purchase?</p> <p>A: Absolutely! BunkerWeb offers two Pro plans to suit your needs:</p> <ul> <li>BunkerWeb PRO Standard: Full access to Pro features without technical support.</li> <li>BunkerWeb PRO Enterprise: Full access to Pro features with dedicated technical support.</li> </ul> <p>You can explore Pro features with a free 1-month trial by using the promo code <code>freetrial</code>. Visit the BunkerWeb Panel to activate your trial and learn more about flexible pricing options based on the number of services protected by BunkerWeb PRO.</p>"},{"location":"features/#prometheus-exporter-pro","title":"Prometheus exporter  (PRO)","text":"<p>STREAM support </p> <p>Prometheus exporter for BunkerWeb internal metrics.</p> Setting Default Context Multiple Description <code>USE_PROMETHEUS_EXPORTER</code> <code>no</code> global no Enable the Prometheus export. <code>PROMETHEUS_EXPORTER_IP</code> <code>0.0.0.0</code> global no Listening IP of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_PORT</code> <code>9113</code> global no Listening port of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_URL</code> <code>/metrics</code> global no HTTP URL of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_ALLOW_IP</code> <code>127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16</code> global no List of IP/networks allowed to contact the Prometheus exporter endpoint."},{"location":"features/#real-ip","title":"Real IP","text":"<p>STREAM support </p> <p>The Real IP plugin ensures that BunkerWeb correctly identifies the client\u2019s IP address even when behind proxies. This is essential for applying security rules, rate limiting, and logging properly; without it, all requests would appear to come from your proxy's IP rather than the client's actual IP.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb examines incoming requests for specific headers (like <code>X-Forwarded-For</code>) that contain the client's original IP address.</li> <li>BunkerWeb checks if the incoming IP is in your trusted proxy list (<code>REAL_IP_FROM</code>), ensuring that only legitimate proxies can pass client IPs.</li> <li>The original client IP is extracted from the specified header (<code>REAL_IP_HEADER</code>) and used for all security evaluations and logging.</li> <li>For recursive IP chains, BunkerWeb can trace through multiple proxy hops to determine the originating client IP.</li> <li>Additionally, PROXY protocol support can be enabled to receive client IPs directly from compatible proxies such as HAProxy.</li> <li>Trusted proxy IP lists can be automatically downloaded and updated from external sources via URLs.</li> </ol>"},{"location":"features/#how-to-use_23","title":"How to Use","text":"<p>Follow these steps to configure and use the Real IP feature:</p> <ol> <li>Enable the feature: Set the <code>USE_REAL_IP</code> setting to <code>yes</code> to enable real IP detection.</li> <li>Define trusted proxies: List the IP addresses or networks of your trusted proxies using the <code>REAL_IP_FROM</code> setting.</li> <li>Specify the header: Configure which header contains the real IP using the <code>REAL_IP_HEADER</code> setting.</li> <li>Configure recursion: Decide whether to trace IP chains recursively with the <code>REAL_IP_RECURSIVE</code> setting.</li> <li>Optional URL sources: Set up automatic downloads of trusted proxy lists with <code>REAL_IP_FROM_URLS</code>.</li> <li>PROXY protocol: For direct proxy communication, enable with <code>USE_PROXY_PROTOCOL</code> if your upstream supports it.</li> </ol> <p>PROXY Protocol Warning</p> <p>Enabling <code>USE_PROXY_PROTOCOL</code> without properly configuring your upstream proxy to send PROXY protocol headers will break your application. Only enable this setting if you are certain that your upstream proxy is properly configured to send PROXY protocol information. If your proxy is not sending PROXY protocol headers, all connections to BunkerWeb will fail with protocol errors.</p>"},{"location":"features/#configuration-settings_24","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_REAL_IP</code> <code>no</code> multisite no Enable Real IP: Set to <code>yes</code> to enable retrieving client's real IP from headers or PROXY protocol. <code>REAL_IP_FROM</code> <code>192.168.0.0/16 172.16.0.0/12 10.0.0.0/8</code> multisite no Trusted Proxies: List of trusted IP addresses or networks where proxied requests come from, separated by spaces. <code>REAL_IP_HEADER</code> <code>X-Forwarded-For</code> multisite no Real IP Header: HTTP header containing the real IP or special value <code>proxy_protocol</code> for PROXY protocol. <code>REAL_IP_RECURSIVE</code> <code>yes</code> multisite no Recursive Search: When set to <code>yes</code>, performs a recursive search in header containing multiple IP addresses. <code>REAL_IP_FROM_URLS</code> multisite no IP List URLs: URLs containing trusted proxy IPs/networks to download, separated by spaces. Supports file:// URLs. <code>USE_PROXY_PROTOCOL</code> <code>no</code> global no PROXY Protocol: Set to <code>yes</code> to enable PROXY protocol support for direct proxy-to-BunkerWeb communication. <p>Cloud Provider Networks</p> <p>If you're using a cloud provider like AWS, GCP, or Azure, consider adding their load balancer IP ranges to your <code>REAL_IP_FROM</code> setting to ensure proper client IP identification.</p> <p>Security Considerations</p> <p>Only include trusted proxy IPs in your configuration. Adding untrusted sources could allow IP spoofing attacks, where malicious actors could forge the client IP by manipulating headers.</p> <p>Multiple IP Addresses</p> <p>When <code>REAL_IP_RECURSIVE</code> is enabled and a header contains multiple IPs (e.g., <code>X-Forwarded-For: client, proxy1, proxy2</code>), BunkerWeb will identify the leftmost IP not in your trusted proxy list as the client IP.</p>"},{"location":"features/#example-configurations_25","title":"Example Configurations","text":"Basic ConfigurationCloud Load BalancerPROXY ProtocolMultiple Proxy Sources with URLsCDN ConfigurationBehind Cloudflare <p>A simple configuration for a site behind a reverse proxy:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"192.168.1.0/24 10.0.0.5\"\nREAL_IP_HEADER: \"X-Forwarded-For\"\nREAL_IP_RECURSIVE: \"yes\"\n</code></pre> <p>Configuration for a site behind a cloud load balancer:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"192.168.0.0/16 172.16.0.0/12 10.0.0.0/8\"\nREAL_IP_HEADER: \"X-Forwarded-For\"\nREAL_IP_RECURSIVE: \"yes\"\n</code></pre> <p>Configuration using PROXY protocol with a compatible load balancer:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"192.168.1.0/24\"\nREAL_IP_HEADER: \"proxy_protocol\"\nUSE_PROXY_PROTOCOL: \"yes\"\n</code></pre> <p>Advanced configuration with automatically updated proxy IP lists:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"192.168.0.0/16 172.16.0.0/12 10.0.0.0/8\"\nREAL_IP_HEADER: \"X-Real-IP\"\nREAL_IP_RECURSIVE: \"yes\"\nREAL_IP_FROM_URLS: \"https://example.com/proxy-ips.txt file:///etc/bunkerweb/custom-proxies.txt\"\n</code></pre> <p>Configuration for a website behind a CDN:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"192.168.0.0/16 172.16.0.0/12 10.0.0.0/8\"\nREAL_IP_FROM_URLS: \"https://cdn-provider.com/ip-ranges.txt\"\nREAL_IP_HEADER: \"CF-Connecting-IP\"  # Example for Cloudflare\nREAL_IP_RECURSIVE: \"no\"  # Not needed with single IP headers\n</code></pre> <p>Configuration for a website behind Cloudflare:</p> <pre><code>USE_REAL_IP: \"yes\"\nREAL_IP_FROM: \"\" # We only trust Cloudflare IPs\nREAL_IP_FROM_URLS: \"https://www.cloudflare.com/ips-v4/ https://www.cloudflare.com/ips-v6/\" # Download Cloudflare IPs automatically\nREAL_IP_HEADER: \"CF-Connecting-IP\"  # Cloudflare header for client IP\nREAL_IP_RECURSIVE: \"yes\"\n</code></pre>"},{"location":"features/#redirect","title":"Redirect","text":"<p>STREAM support </p> <p>The Redirect plugin provides simple and efficient HTTP redirection capabilities for your BunkerWeb-protected websites. This feature enables you to easily redirect visitors from one URL to another, supporting both full-domain redirects, specific path redirects and path-preserving redirections.</p> <p>How it works:</p> <ol> <li>When a visitor accesses your website, BunkerWeb verifies whether a redirection is configured.</li> <li>If enabled, BunkerWeb redirects the visitor to the specified destination URL.</li> <li>You can configure whether to preserve the original request path (automatically appending it to the destination URL) or redirect to the exact destination URL.</li> <li>The HTTP status code used for the redirection can be customized between permanent (301) and temporary (302) redirects.</li> <li>This functionality is ideal for domain migrations, establishing canonical domains, or redirecting deprecated URLs.</li> </ol>"},{"location":"features/#how-to-use_24","title":"How to Use","text":"<p>Follow these steps to configure and use the Redirect feature:</p> <ol> <li>Set the source path: Configure the path to redirect from using the <code>REDIRECT_FROM</code> setting (e.g. <code>/</code>, <code>/old-page</code>).</li> <li>Set the destination URL: Configure the target URL where visitors should be redirected using the <code>REDIRECT_TO</code> setting.</li> <li>Choose redirection type: Decide whether to preserve the original request path with the <code>REDIRECT_TO_REQUEST_URI</code> setting.</li> <li>Select status code: Set the appropriate HTTP status code with the <code>REDIRECT_TO_STATUS_CODE</code> setting to indicate permanent or temporary redirection.</li> <li>Let BunkerWeb handle the rest: Once configured, all requests to the site will be automatically redirected based on your settings.</li> </ol>"},{"location":"features/#configuration-settings_25","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>REDIRECT_FROM</code> <code>/</code> multisite yes Path to redirect from: The path that will be redirected. <code>REDIRECT_TO</code> multisite yes Destination URL: The target URL where visitors will be redirected. Leave empty to disable redirection. <code>REDIRECT_TO_REQUEST_URI</code> <code>no</code> multisite yes Preserve Path: When set to <code>yes</code>, appends the original request URI to the destination URL. <code>REDIRECT_TO_STATUS_CODE</code> <code>301</code> multisite yes HTTP Status Code: The HTTP status code to use for redirection. Options: <code>301</code> (permanent) or <code>302</code> (temporary). <p>Choosing the Right Status Code</p> <ul> <li>Use <code>301</code> (Moved Permanently) when the redirect is permanent, such as for domain migrations or establishing canonical URLs. This helps search engines update their indexes.</li> <li>Use <code>302</code> (Found/Temporary Redirect) when the redirect is temporary or if you may want to reuse the original URL in the future.</li> </ul> <p>Path Preservation</p> <p>When <code>REDIRECT_TO_REQUEST_URI</code> is set to <code>yes</code>, BunkerWeb preserves the original request path. For example, if a user visits <code>https://old-domain.com/blog/post-1</code> and you've set up a redirect to <code>https://new-domain.com</code>, they'll be redirected to <code>https://new-domain.com/blog/post-1</code>.</p>"},{"location":"features/#example-configurations_26","title":"Example Configurations","text":"Multiple Paths RedirectSimple Domain RedirectPath-Preserving RedirectTemporary RedirectSubdomain Consolidation <p>A configuration that redirects multiple paths to different destinations:</p> <pre><code># Redirect /blog to a new blog domain\nREDIRECT_FROM: \"/blog/\"\nREDIRECT_TO: \"https://blog.example.com/\"\nREDIRECT_TO_REQUEST_URI: \"yes\"\nREDIRECT_TO_STATUS_CODE: \"301\"\n\n# Redirect /shop to another domain\nREDIRECT_FROM_2: \"/shop/\"\nREDIRECT_TO_2: \"https://shop.example.com/\"\nREDIRECT_TO_REQUEST_URI_2: \"no\"\nREDIRECT_TO_STATUS_CODE_2: \"301\"\n\n# Redirect the rest of the site\nREDIRECT_FROM_3: \"/\"\nREDIRECT_TO_3: \"https://new-domain.com\"\nREDIRECT_TO_REQUEST_URI_3: \"no\"\nREDIRECT_TO_STATUS_CODE_3: \"301\"\n</code></pre> <p>A configuration that redirects all visitors to a new domain:</p> <pre><code>REDIRECT_TO: \"https://new-domain.com\"\nREDIRECT_TO_REQUEST_URI: \"no\"\nREDIRECT_TO_STATUS_CODE: \"301\"\n</code></pre> <p>A configuration that redirects visitors to a new domain while preserving the requested path:</p> <pre><code>REDIRECT_TO: \"https://new-domain.com\"\nREDIRECT_TO_REQUEST_URI: \"yes\"\nREDIRECT_TO_STATUS_CODE: \"301\"\n</code></pre> <p>A configuration for a temporary redirect to a maintenance site:</p> <pre><code>REDIRECT_TO: \"https://maintenance.example.com\"\nREDIRECT_TO_REQUEST_URI: \"no\"\nREDIRECT_TO_STATUS_CODE: \"302\"\n</code></pre> <p>A configuration to redirect a subdomain to a specific path on the main domain:</p> <pre><code>REDIRECT_TO: \"https://example.com/support\"\nREDIRECT_TO_REQUEST_URI: \"yes\"\nREDIRECT_TO_STATUS_CODE: \"301\"\n</code></pre>"},{"location":"features/#redis","title":"Redis","text":"<p>STREAM support </p> <p>The Redis plugin integrates Redis or Valkey into BunkerWeb for caching and fast data retrieval. This feature is essential for deploying BunkerWeb in high-availability environments where session data, metrics, and other shared information must be accessible across multiple nodes.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb establishes a connection to your configured Redis or Valkey server.</li> <li>Critical data such as session information, metrics, and security-related data are stored in Redis/Valkey.</li> <li>Multiple BunkerWeb instances can share this data, enabling seamless clustering and load balancing.</li> <li>The plugin supports various Redis/Valkey deployment options, including standalone servers, password authentication, SSL/TLS encryption, and Redis Sentinel for high availability.</li> <li>Automatic reconnection and configurable timeouts ensure robustness in production environments.</li> </ol>"},{"location":"features/#how-to-use_25","title":"How to Use","text":"<p>Follow these steps to configure and use the Redis plugin:</p> <ol> <li>Enable the feature: Set the <code>USE_REDIS</code> setting to <code>yes</code> to enable Redis/Valkey integration.</li> <li>Configure connection details: Specify your Redis/Valkey server's hostname/IP address and port.</li> <li>Set security options: Configure authentication credentials if your Redis/Valkey server requires them.</li> <li>Configure advanced options: Set the database selection, SSL options, and timeouts as needed.</li> <li>For high availability, configure Sentinel settings if you're using Redis Sentinel.</li> </ol>"},{"location":"features/#configuration-settings_26","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_REDIS</code> <code>no</code> global no Enable Redis: Set to <code>yes</code> to enable Redis/Valkey integration for cluster mode. <code>REDIS_HOST</code> global no Redis/Valkey Server: IP address or hostname of the Redis/Valkey server. <code>REDIS_PORT</code> <code>6379</code> global no Redis/Valkey Port: Port number of the Redis/Valkey server. <code>REDIS_DATABASE</code> <code>0</code> global no Redis/Valkey Database: Database number to use on the Redis/Valkey server (0-15). <code>REDIS_SSL</code> <code>no</code> global no Redis/Valkey SSL: Set to <code>yes</code> to enable SSL/TLS encryption for the Redis/Valkey connection. <code>REDIS_SSL_VERIFY</code> <code>yes</code> global no Redis/Valkey SSL Verify: Set to <code>yes</code> to verify the Redis/Valkey server's SSL certificate. <code>REDIS_TIMEOUT</code> <code>5</code> global no Redis/Valkey Timeout: Connection timeout in seconds for Redis/Valkey operations. <code>REDIS_USERNAME</code> global no Redis/Valkey Username: Username for Redis/Valkey authentication (Redis 6.0+). <code>REDIS_PASSWORD</code> global no Redis/Valkey Password: Password for Redis/Valkey authentication. <code>REDIS_SENTINEL_HOSTS</code> global no Sentinel Hosts: Space-separated list of Redis Sentinel hosts (hostname:port). <code>REDIS_SENTINEL_USERNAME</code> global no Sentinel Username: Username for Redis Sentinel authentication. <code>REDIS_SENTINEL_PASSWORD</code> global no Sentinel Password: Password for Redis Sentinel authentication. <code>REDIS_SENTINEL_MASTER</code> <code>mymaster</code> global no Sentinel Master: Name of the master in Redis Sentinel configuration. <code>REDIS_KEEPALIVE_IDLE</code> <code>300</code> global no Keepalive Idle: Time (in seconds) between TCP keepalive probes for idle connections. <code>REDIS_KEEPALIVE_POOL</code> <code>3</code> global no Keepalive Pool: Maximum number of Redis/Valkey connections kept in the pool. <p>High Availability with Redis Sentinel</p> <p>For production environments requiring high availability, configure Redis Sentinel settings. This provides automatic failover capabilities if the primary Redis server becomes unavailable.</p> <p>Security Considerations</p> <p>When using Redis in production:</p> <ul> <li>Always set strong passwords for both Redis and Sentinel authentication</li> <li>Consider enabling SSL/TLS encryption for Redis connections</li> <li>Ensure your Redis server is not exposed to the public internet</li> <li>Restrict access to the Redis port using firewalls or network segmentation</li> </ul> <p>Cluster Requirements</p> <p>When deploying BunkerWeb in a cluster:</p> <ul> <li>All BunkerWeb instances should connect to the same Redis or Valkey server or Sentinel cluster</li> <li>Configure the same database number across all instances</li> <li>Ensure network connectivity between all BunkerWeb instances and Redis/Valkey servers</li> </ul>"},{"location":"features/#example-configurations_27","title":"Example Configurations","text":"Basic ConfigurationSecure ConfigurationRedis Sentinel ConfigurationAdvanced Tuning <p>A simple configuration for connecting to a Redis or Valkey server on the local machine:</p> <pre><code>USE_REDIS: \"yes\"\nREDIS_HOST: \"localhost\"\nREDIS_PORT: \"6379\"\n</code></pre> <p>Configuration with password authentication and SSL enabled:</p> <pre><code>USE_REDIS: \"yes\"\nREDIS_HOST: \"redis.example.com\"\nREDIS_PORT: \"6379\"\nREDIS_PASSWORD: \"your-strong-password\"\nREDIS_SSL: \"yes\"\nREDIS_SSL_VERIFY: \"yes\"\n</code></pre> <p>Configuration for high availability using Redis Sentinel:</p> <pre><code>USE_REDIS: \"yes\"\nREDIS_SENTINEL_HOSTS: \"sentinel1:26379 sentinel2:26379 sentinel3:26379\"\nREDIS_SENTINEL_MASTER: \"mymaster\"\nREDIS_SENTINEL_PASSWORD: \"sentinel-password\"\nREDIS_PASSWORD: \"redis-password\"\n</code></pre> <p>Configuration with advanced connection parameters for performance optimization:</p> <pre><code>USE_REDIS: \"yes\"\nREDIS_HOST: \"redis.example.com\"\nREDIS_PORT: \"6379\"\nREDIS_PASSWORD: \"your-strong-password\"\nREDIS_DATABASE: \"3\"\nREDIS_TIMEOUT: \"3\"\nREDIS_KEEPALIVE_IDLE: \"60\"\nREDIS_KEEPALIVE_POOL: \"5\"\n</code></pre>"},{"location":"features/#redis-best-practices","title":"Redis Best Practices","text":"<p>When using Redis or Valkey with BunkerWeb, consider these best practices to ensure optimal performance, security, and reliability:</p>"},{"location":"features/#memory-management","title":"Memory Management","text":"<ul> <li>Monitor memory usage: Configure Redis with appropriate <code>maxmemory</code> settings to prevent out-of-memory errors</li> <li>Set an eviction policy: Use <code>maxmemory-policy</code> (e.g., <code>volatile-lru</code> or <code>allkeys-lru</code>) appropriate for your use case</li> <li>Avoid large keys: Ensure individual Redis keys are kept to a reasonable size to prevent performance degradation</li> </ul>"},{"location":"features/#data-persistence","title":"Data Persistence","text":"<ul> <li>Enable RDB snapshots: Configure periodic snapshots for data persistence without significant performance impact</li> <li>Consider AOF: For critical data, enable AOF (Append-Only File) persistence with an appropriate fsync policy</li> <li>Backup strategy: Implement regular Redis backups as part of your disaster recovery plan</li> </ul>"},{"location":"features/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Connection pooling: BunkerWeb already implements this, but ensure other applications follow this practice</li> <li>Pipelining: When possible, use pipelining for bulk operations to reduce network overhead</li> <li>Avoid expensive operations: Be cautious with commands like KEYS in production environments</li> <li>Benchmark your workload: Use redis-benchmark to test your specific workload patterns</li> </ul>"},{"location":"features/#further-resources","title":"Further Resources","text":"<ul> <li>Redis Documentation</li> <li>Redis Security Guide</li> <li>Redis High Availability</li> <li>Redis Persistence</li> </ul>"},{"location":"features/#reporting-pro","title":"Reporting  (PRO)","text":"<p>STREAM support </p> <p>Regular reporting of important data from BunkerWeb (global, attacks, bans, requests, reasons, AS...). Monitoring pro plugin needed to work.</p> Setting Default Context Multiple Description <code>USE_REPORTING_SMTP</code> <code>no</code> global no Enable sending the report via email. <code>USE_REPORTING_WEBHOOK</code> <code>no</code> global no Enable sending the report via webhook. <code>REPORTING_SCHEDULE</code> <code>weekly</code> global no The frequency at which reports are sent. <code>REPORTING_WEBHOOK_URLS</code> global no List of webhook URLs to receive the report in Markdown (separated by spaces). <code>REPORTING_SMTP_EMAILS</code> global no List of email addresses to receive the report in HTML format (separated by spaces). <code>REPORTING_SMTP_HOST</code> global no The host server used for SMTP sending. <code>REPORTING_SMTP_PORT</code> <code>465</code> global no The port used for SMTP. Please note that there are different standards depending on the type of connection (SSL = 465, TLS = 587). <code>REPORTING_SMTP_FROM_EMAIL</code> global no The email address used as the sender. Note that 2FA must be disabled for this email address. <code>REPORTING_SMTP_FROM_USER</code> global no The user authentication value for sending via the from email address. <code>REPORTING_SMTP_FROM_PASSWORD</code> global no The password authentication value for sending via the from email address. <code>REPORTING_SMTP_SSL</code> <code>SSL</code> global no Determine whether or not to use a secure connection for SMTP. <code>REPORTING_SMTP_SUBJECT</code> <code>BunkerWeb Report</code> global no The subject line of the email."},{"location":"features/#reverse-proxy","title":"Reverse proxy","text":"<p>STREAM support </p> <p>The Reverse Proxy plugin provides seamless proxying capabilities for BunkerWeb, allowing you to route requests to backend servers and services. This feature enables BunkerWeb to act as a secure frontend for your applications while providing additional benefits such as SSL termination and security filtering.</p> <p>How it works:</p> <ol> <li>When a client sends a request to BunkerWeb, the Reverse Proxy plugin forwards the request to your configured backend server.</li> <li>BunkerWeb adds security headers, applies WAF rules, and performs other security checks before passing requests to your application.</li> <li>The backend server processes the request and returns a response to BunkerWeb.</li> <li>BunkerWeb applies additional security measures to the response before sending it back to the client.</li> <li>The plugin supports both HTTP and TCP/UDP stream proxying, enabling a wide range of applications, including WebSockets and other non-HTTP protocols.</li> </ol>"},{"location":"features/#how-to-use_26","title":"How to Use","text":"<p>Follow these steps to configure and use the Reverse Proxy feature:</p> <ol> <li>Enable the feature: Set the <code>USE_REVERSE_PROXY</code> setting to <code>yes</code> to enable reverse proxy functionality.</li> <li>Configure your backend servers: Specify the upstream servers using the <code>REVERSE_PROXY_HOST</code> setting.</li> <li>Adjust proxy settings: Fine-tune behavior with optional settings for timeouts, buffer sizes, and other parameters.</li> <li>Configure protocol-specific options: For WebSockets or special HTTP requirements, adjust the corresponding settings.</li> <li>Set up caching (optional): Enable and configure proxy caching to improve performance for frequently accessed content.</li> </ol>"},{"location":"features/#configuration-guide_2","title":"Configuration Guide","text":"Basic ConfigurationConnection SettingsSSL/TLS ConfigurationProtocol SupportHeader ManagementAuthenticationAdvanced ConfigurationCaching Configuration <p>Core Settings</p> <p>The essential configuration settings enable and control the basic functionality of the reverse proxy feature.</p> <p>Benefits of Reverse Proxy</p> <ul> <li>Security Enhancement: All traffic passes through BunkerWeb's security layers before reaching your applications</li> <li>SSL Termination: Manage SSL/TLS certificates centrally while backend services can use unencrypted connections</li> <li>Protocol Handling: Support for HTTP, HTTPS, WebSockets, and other protocols</li> <li>Error Interception: Customize error pages for a consistent user experience</li> </ul> Setting Default Context Multiple Description <code>USE_REVERSE_PROXY</code> <code>no</code> multisite no Enable Reverse Proxy: Set to <code>yes</code> to enable reverse proxy functionality. <code>REVERSE_PROXY_HOST</code> multisite yes Backend Host: Full URL of the proxied resource (proxy_pass). <code>REVERSE_PROXY_URL</code> <code>/</code> multisite yes Location URL: Path that will be proxied to the backend server. <code>REVERSE_PROXY_BUFFERING</code> <code>yes</code> multisite yes Response Buffering: Enable or disable buffering of responses from proxied resource. <code>REVERSE_PROXY_KEEPALIVE</code> <code>no</code> multisite yes Keep-Alive: Enable or disable keepalive connections with the proxied resource. <code>REVERSE_PROXY_CUSTOM_HOST</code> multisite no Custom Host: Override Host header sent to upstream server. <code>REVERSE_PROXY_INTERCEPT_ERRORS</code> <code>yes</code> multisite no Intercept Errors: Whether to intercept and rewrite error responses from the backend. <p>Best Practices</p> <ul> <li>Always specify the full URL in <code>REVERSE_PROXY_HOST</code> including the protocol (http:// or https://)</li> <li>Use <code>REVERSE_PROXY_INTERCEPT_ERRORS</code> to provide consistent error pages across all your services</li> <li>When configuring multiple backends, use the numbered suffix format (e.g., <code>REVERSE_PROXY_HOST_2</code>, <code>REVERSE_PROXY_URL_2</code>)</li> </ul> <p>Connection and Timeout Configuration</p> <p>These settings control connection behavior, buffering, and timeout values for the proxied connections.</p> <p>Benefits</p> <ul> <li>Optimized Performance: Adjust buffer sizes and connection settings based on your application needs</li> <li>Resource Management: Control memory usage through appropriate buffer configurations</li> <li>Reliability: Configure appropriate timeouts to handle slow connections or backend issues</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_CONNECT_TIMEOUT</code> <code>60s</code> multisite yes Connect Timeout: Maximum time to establish a connection to the backend server. <code>REVERSE_PROXY_READ_TIMEOUT</code> <code>60s</code> multisite yes Read Timeout: Maximum time between transmissions of two successive packets from the backend server. <code>REVERSE_PROXY_SEND_TIMEOUT</code> <code>60s</code> multisite yes Send Timeout: Maximum time between transmissions of two successive packets to the backend server. <code>PROXY_BUFFERS</code> multisite no Buffers: Number and size of buffers for reading the response from the backend server. <code>PROXY_BUFFER_SIZE</code> multisite no Buffer Size: Size of the buffer for reading the first part of the response from the backend server. <code>PROXY_BUSY_BUFFERS_SIZE</code> multisite no Busy Buffers Size: Size of buffers that can be busy sending response to the client. <p>Timeout Considerations</p> <ul> <li>Setting timeouts too low may cause legitimate but slow connections to be terminated</li> <li>Setting timeouts too high may leave connections open unnecessarily, potentially exhausting resources</li> <li>For WebSocket applications, increase the read and send timeouts significantly (300s or more recommended)</li> </ul> <p>SSL/TLS Settings for Backend Connections</p> <p>These settings control how BunkerWeb establishes secure connections to backend servers.</p> <p>Benefits</p> <ul> <li>End-to-End Encryption: Maintain encrypted connections from client to backend</li> <li>Certificate Validation: Control how backend server certificates are validated</li> <li>SNI Support: Specify Server Name Indication for backends that host multiple sites</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_SSL_SNI</code> <code>no</code> multisite no SSL SNI: Enable or disable sending SNI (Server Name Indication) to upstream. <code>REVERSE_PROXY_SSL_SNI_NAME</code> multisite no SSL SNI Name: Sets the SNI hostname to send to upstream when SSL SNI is enabled. <p>SNI Explained</p> <p>Server Name Indication (SNI) is a TLS extension that allows a client to specify the hostname it is attempting to connect to during the handshake process. This enables servers to present multiple certificates on the same IP address and port, allowing multiple secure (HTTPS) websites to be served from a single IP address without requiring all those sites to use the same certificate.</p> <p>Protocol-Specific Configuration</p> <p>Configure special protocol handling, particularly for WebSockets and other non-HTTP protocols.</p> <p>Benefits</p> <ul> <li>Protocol Flexibility: Support for WebSockets enables real-time applications</li> <li>Modern Web Applications: Enable interactive features requiring bidirectional communication</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_WS</code> <code>no</code> multisite yes WebSocket Support: Enable WebSocket protocol on the resource. <p>WebSocket Configuration</p> <ul> <li>When enabling WebSockets with <code>REVERSE_PROXY_WS: \"yes\"</code>, consider increasing timeout values</li> <li>WebSocket connections stay open longer than typical HTTP connections</li> <li>For WebSocket applications, a recommended configuration is:   <pre><code>REVERSE_PROXY_WS: \"yes\"\nREVERSE_PROXY_READ_TIMEOUT: \"300s\"\nREVERSE_PROXY_SEND_TIMEOUT: \"300s\"\n</code></pre></li> </ul> <p>HTTP Header Configuration</p> <p>Control which headers are sent to backend servers and to clients, allowing you to add, modify, or preserve HTTP headers.</p> <p>Benefits</p> <ul> <li>Information Control: Precisely manage what information is shared between clients and backends</li> <li>Security Enhancement: Add security-related headers or remove headers that might leak sensitive information</li> <li>Integration Support: Provide necessary headers for authentication and proper backend operation</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_HEADERS</code> multisite yes Custom Headers: HTTP headers to send to backend separated with semicolons. <code>REVERSE_PROXY_HIDE_HEADERS</code> <code>Upgrade</code> multisite yes Hide Headers: HTTP headers to hide from clients when received from the backend. <code>REVERSE_PROXY_HEADERS_CLIENT</code> multisite yes Client Headers: HTTP headers to send to client separated with semicolons. <code>REVERSE_PROXY_UNDERSCORES_IN_HEADERS</code> <code>no</code> multisite no Underscores in Headers: Enable or disable the <code>underscores_in_headers</code> directive. <p>Security Considerations</p> <p>When using the reverse proxy feature, be cautious about what headers you forward to your backend applications. Certain headers might expose sensitive information about your infrastructure or bypass security controls.</p> <p>Header Format Examples</p> <p>Custom headers to backend servers: <pre><code>REVERSE_PROXY_HEADERS: \"X-Real-IP $remote_addr;X-Forwarded-For $proxy_add_x_forwarded_for;X-Forwarded-Proto $scheme\"\n</code></pre></p> <p>Custom headers to clients: <pre><code>REVERSE_PROXY_HEADERS_CLIENT: \"X-Powered-By BunkerWeb;X-Frame-Options SAMEORIGIN\"\n</code></pre></p> <p>External Authentication Configuration</p> <p>Integrate with external authentication systems to centralize authorization logic across your applications.</p> <p>Benefits</p> <ul> <li>Centralized Authentication: Implement a single authentication point for multiple applications</li> <li>Consistent Security: Apply uniform authentication policies across different services</li> <li>Enhanced Control: Forward authentication details to backend applications via headers or variables</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_AUTH_REQUEST</code> multisite yes Auth Request: Enable authentication using an external provider. <code>REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL</code> multisite yes Sign-in URL: Redirect clients to sign-in URL when authentication fails. <code>REVERSE_PROXY_AUTH_REQUEST_SET</code> multisite yes Auth Request Set: Variables to set from the authentication provider. <p>Authentication Integration</p> <ul> <li>The auth request feature enables implementation of centralized authentication microservices</li> <li>Your authentication service should return a 200 status code for successful authentication or 401/403 for failures</li> <li>Use the auth_request_set directive to extract and forward information from the authentication service</li> </ul> <p>Additional Configuration Options</p> <p>These settings provide further customization of the reverse proxy behavior for specialized scenarios.</p> <p>Benefits</p> <ul> <li>Customization: Include additional configuration snippets for complex requirements</li> <li>Performance Optimization: Fine-tune request handling for specific use cases</li> <li>Flexibility: Adapt to unique application requirements with specialized configurations</li> </ul> Setting Default Context Multiple Description <code>REVERSE_PROXY_INCLUDES</code> multisite yes Additional Configurations: Include additional configs in location block. <code>REVERSE_PROXY_PASS_REQUEST_BODY</code> <code>yes</code> multisite yes Pass Request Body: Enable or disable passing the request body. <p>Security Considerations</p> <p>Be careful when including custom configuration snippets as they may override BunkerWeb's security settings or introduce vulnerabilities if not properly configured.</p> <p>Response Caching Settings</p> <p>Improve performance by caching responses from backend servers, reducing load and improving response times.</p> <p>Benefits</p> <ul> <li>Performance: Reduce load on backend servers by serving cached content</li> <li>Reduced Latency: Faster response times for frequently requested content</li> <li>Bandwidth Savings: Minimize internal network traffic by caching responses</li> <li>Customization: Configure exactly what, when, and how content is cached</li> </ul> Setting Default Context Multiple Description <code>USE_PROXY_CACHE</code> <code>no</code> multisite no Enable Caching: Set to <code>yes</code> to enable caching of backend responses. <code>PROXY_CACHE_PATH_LEVELS</code> <code>1:2</code> global no Cache Path Levels: How to structure the cache directory hierarchy. <code>PROXY_CACHE_PATH_ZONE_SIZE</code> <code>10m</code> global no Cache Zone Size: Size of the shared memory zone used for cache metadata. <code>PROXY_CACHE_PATH_PARAMS</code> <code>max_size=100m</code> global no Cache Path Parameters: Additional parameters for the cache path. <code>PROXY_CACHE_METHODS</code> <code>GET HEAD</code> multisite no Cache Methods: HTTP methods that can be cached. <code>PROXY_CACHE_MIN_USES</code> <code>2</code> multisite no Cache Min Uses: Minimum number of requests before a response is cached. <code>PROXY_CACHE_KEY</code> <code>$scheme$host$request_uri</code> multisite no Cache Key: The key used to uniquely identify a cached response. <code>PROXY_CACHE_VALID</code> <code>200=24h 301=1h 302=24h</code> multisite no Cache Valid: How long to cache specific response codes. <code>PROXY_NO_CACHE</code> <code>$http_pragma $http_authorization</code> multisite no No Cache: Conditions for not caching responses even if normally cacheable. <code>PROXY_CACHE_BYPASS</code> <code>0</code> multisite no Cache Bypass: Conditions under which to bypass the cache. <p>Caching Best Practices</p> <ul> <li>Cache only content that doesn't change frequently or isn't personalized</li> <li>Use appropriate cache durations based on content type (static assets can be cached longer)</li> <li>Configure <code>PROXY_NO_CACHE</code> to avoid caching sensitive or personalized content</li> <li>Monitor cache hit rates and adjust settings accordingly</li> </ul> <p>Docker Compose Users - NGINX Variables</p> <p>When using Docker Compose with NGINX variables in your configurations, you must escape the dollar sign (<code>$</code>) by using double dollar signs (<code>$$</code>). This applies to all settings that contain NGINX variables like <code>$remote_addr</code>, <code>$proxy_add_x_forwarded_for</code>, etc.</p> <p>Without this escaping, Docker Compose will try to substitute these variables with environment variables, which typically don't exist, resulting in empty values in your NGINX configuration.</p>"},{"location":"features/#example-configurations_28","title":"Example Configurations","text":"Basic HTTP ProxyWebSocket ApplicationMultiple LocationsCaching ConfigurationAdvanced Header ManagementAuthentication Integration <p>A simple configuration for proxying HTTP requests to a backend application server:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\nREVERSE_PROXY_HOST: \"http://application:8080\"\nREVERSE_PROXY_URL: \"/\"\nREVERSE_PROXY_CONNECT_TIMEOUT: \"10s\"\nREVERSE_PROXY_SEND_TIMEOUT: \"60s\"\nREVERSE_PROXY_READ_TIMEOUT: \"60s\"\n</code></pre> <p>Configuration optimized for a WebSocket application with longer timeouts:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\nREVERSE_PROXY_HOST: \"http://websocket-app:8080\"\nREVERSE_PROXY_URL: \"/\"\nREVERSE_PROXY_WS: \"yes\"\nREVERSE_PROXY_CONNECT_TIMEOUT: \"10s\"\nREVERSE_PROXY_SEND_TIMEOUT: \"300s\"\nREVERSE_PROXY_READ_TIMEOUT: \"300s\"\n</code></pre> <p>Configuration for routing different paths to different backend services:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\n\n# API Backend\nREVERSE_PROXY_HOST: \"http://api-server:8080\"\nREVERSE_PROXY_URL: \"/api/\"\n\n# Admin Backend\nREVERSE_PROXY_HOST_2: \"http://admin-server:8080\"\nREVERSE_PROXY_URL_2: \"/admin/\"\n\n# Frontend App\nREVERSE_PROXY_HOST_3: \"http://frontend:3000\"\nREVERSE_PROXY_URL_3: \"/\"\n</code></pre> <p>Configuration with proxy caching enabled for better performance:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\nREVERSE_PROXY_HOST: \"http://application:8080\"\nREVERSE_PROXY_URL: \"/\"\nUSE_PROXY_CACHE: \"yes\"\nPROXY_CACHE_VALID: \"200=24h 301=1h 302=24h\"\nPROXY_CACHE_METHODS: \"GET HEAD\"\nPROXY_NO_CACHE: \"$http_authorization\"\n</code></pre> <p>Configuration with custom header manipulation:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\nREVERSE_PROXY_HOST: \"http://application:8080\"\nREVERSE_PROXY_URL: \"/\"\n\n# Custom headers to backend\nREVERSE_PROXY_HEADERS: \"X-Real-IP $remote_addr;X-Forwarded-For $proxy_add_x_forwarded_for;X-Forwarded-Proto $scheme\"\n\n# Custom headers to client\nREVERSE_PROXY_HEADERS_CLIENT: \"X-Powered-By BunkerWeb;X-Frame-Options SAMEORIGIN\"\n</code></pre> <p>Configuration with external authentication:</p> <pre><code>USE_REVERSE_PROXY: \"yes\"\nREVERSE_PROXY_HOST: \"http://application:8080\"\nREVERSE_PROXY_URL: \"/\"\n\n# Authentication configuration\nREVERSE_PROXY_AUTH_REQUEST: \"/auth\"\nREVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL: \"https://login.example.com\"\nREVERSE_PROXY_AUTH_REQUEST_SET: \"$auth_user $upstream_http_x_user;$auth_role $upstream_http_x_role\"\n\n# Auth service backend\nREVERSE_PROXY_HOST_2: \"http://auth-service:8080\"\nREVERSE_PROXY_URL_2: \"/auth\"\n</code></pre>"},{"location":"features/#reverse-scan","title":"Reverse scan","text":"<p>STREAM support </p> <p>The Reverse Scan plugin robustly protects against proxy bypass attempts by scanning clients' ports to detect whether they are running proxy servers or other network services. This feature helps identify and block potential threats from clients that may be attempting to hide their true identity or origin, thereby enhancing your website's security posture.</p> <p>How it works:</p> <ol> <li>When a client connects to your server, BunkerWeb attempts to scan specific ports on the client's IP address.</li> <li>The plugin checks if any common proxy ports (such as 80, 443, 8080, etc.) are open on the client side.</li> <li>If open ports are detected, indicating that the client may be running a proxy server, the connection is denied.</li> <li>This adds an extra layer of security against automated tools, bots, and malicious users attempting to mask their identity.</li> </ol> <p>Key benefits</p> <ol> <li>Enhanced Security: Identifies clients potentially running proxy servers that could be used for malicious purposes.</li> <li>Proxy Detection: Helps detect and block clients attempting to hide their true identity.</li> <li>Configurable Settings: Customize which ports to scan based on your specific security requirements.</li> <li>Performance Optimized: Intelligent scanning with configurable timeouts to minimize impact on legitimate users.</li> <li>Seamless Integration: Works transparently with your existing security layers.</li> </ol>"},{"location":"features/#how-to-use_27","title":"How to Use","text":"<p>Follow these steps to configure and use the Reverse Scan feature:</p> <ol> <li>Enable the feature: Set the <code>USE_REVERSE_SCAN</code> setting to <code>yes</code> to enable client port scanning.</li> <li>Configure ports to scan: Customize the <code>REVERSE_SCAN_PORTS</code> setting to specify which client ports should be checked.</li> <li>Set scan timeout: Adjust the <code>REVERSE_SCAN_TIMEOUT</code> to balance thorough scanning with performance.</li> <li>Monitor scan activity: Check logs and the web UI to review scan results and potential security incidents.</li> </ol>"},{"location":"features/#configuration-settings_27","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_REVERSE_SCAN</code> <code>no</code> multisite no Enable Reverse Scan: Set to <code>yes</code> to enable scanning of clients ports. <code>REVERSE_SCAN_PORTS</code> <code>22 80 443 3128 8000 8080</code> multisite no Ports to Scan: Space-separated list of ports to check on the client side. <code>REVERSE_SCAN_TIMEOUT</code> <code>500</code> multisite no Scan Timeout: Maximum time in milliseconds allowed for scanning a port. <p>Performance Considerations</p> <p>Scanning multiple ports can add latency to client connections. Use an appropriate timeout value and limit the number of ports scanned to maintain good performance.</p> <p>Common Proxy Ports</p> <p>The default configuration includes common ports used by proxy servers (80, 443, 8080, 3128) and SSH (22). You may want to customize this list based on your threat model.</p>"},{"location":"features/#example-configurations_29","title":"Example Configurations","text":"Basic ConfigurationComprehensive ScanningPerformance-Optimized ConfigurationHigh-Security Configuration <p>A simple configuration for enabling client port scanning:</p> <pre><code>USE_REVERSE_SCAN: \"yes\"\nREVERSE_SCAN_TIMEOUT: \"500\"\nREVERSE_SCAN_PORTS: \"80 443 8080\"\n</code></pre> <p>A more thorough configuration that checks additional ports:</p> <pre><code>USE_REVERSE_SCAN: \"yes\"\nREVERSE_SCAN_TIMEOUT: \"1000\"\nREVERSE_SCAN_PORTS: \"22 80 443 3128 8080 8000 8888 1080 3333 8081\"\n</code></pre> <p>Configuration tuned for better performance by checking fewer ports with lower timeout:</p> <pre><code>USE_REVERSE_SCAN: \"yes\"\nREVERSE_SCAN_TIMEOUT: \"250\"\nREVERSE_SCAN_PORTS: \"80 443 8080\"\n</code></pre> <p>Configuration focused on maximum security with extended scanning:</p> <pre><code>USE_REVERSE_SCAN: \"yes\"\nREVERSE_SCAN_TIMEOUT: \"1500\"\nREVERSE_SCAN_PORTS: \"22 25 80 443 1080 3128 3333 4444 5555 6588 6666 7777 8000 8080 8081 8800 8888 9999\"\n</code></pre>"},{"location":"features/#robotstxt","title":"Robots.txt","text":"<p>STREAM support </p> <p>The Robots.txt plugin manages the robots.txt file for your website. This file tells web crawlers and robots which parts of your site they can or cannot access.</p> <p>How it works:</p> <p>When enabled, BunkerWeb dynamically generates the <code>/robots.txt</code> file at the root of your website. The rules within this file are aggregated from multiple sources in the following order:</p> <ol> <li>DarkVisitors API: If <code>ROBOTSTXT_DARKVISITORS_TOKEN</code> is provided, rules are fetched from the DarkVisitors API, allowing dynamic blocking of malicious bots and AI crawlers based on configured agent types and disallowed user agents.</li> <li>Community Lists: Rules from pre-defined, community-maintained <code>robots.txt</code> lists (specified by <code>ROBOTSTXT_COMMUNITY_LISTS</code>) are included.</li> <li>Custom URLs: Rules are fetched from user-provided URLs (specified by <code>ROBOTSTXT_URLS</code>).</li> <li>Manual Rules: Rules defined directly via <code>ROBOTSTXT_RULE</code> environment variables are added.</li> </ol> <p>All rules from these sources are combined. After aggregation, <code>ROBOTSTXT_IGNORE_RULES</code> are applied to filter out any unwanted rules using PCRE regex patterns. Finally, if no rules remain after this entire process, a default <code>User-agent: *</code> and <code>Disallow: /</code> rule is automatically applied to ensure a basic level of protection. Optional sitemap URLs (specified by <code>ROBOTSTXT_SITEMAP</code>) are also included in the final <code>robots.txt</code> output.</p>"},{"location":"features/#dynamic-bot-circumvention-with-darkvisitors-api","title":"Dynamic Bot Circumvention with DarkVisitors API","text":"<p>DarkVisitors is a service that provides a dynamic <code>robots.txt</code> file to help block known malicious bots and AI crawlers. By integrating with DarkVisitors, BunkerWeb can automatically fetch and serve an up-to-date <code>robots.txt</code> that helps protect your site from unwanted automated traffic.</p> <p>To enable this, you need to sign up at darkvisitors.com and obtain a bearer token.</p>"},{"location":"features/#how-to-use_28","title":"How to Use","text":"<ol> <li>Enable the feature: Set the <code>USE_ROBOTSTXT</code> setting to <code>yes</code>.</li> <li>Configure rules: Choose one or more methods to define your <code>robots.txt</code> rules:<ul> <li>DarkVisitors API: Provide <code>ROBOTSTXT_DARKVISITORS_TOKEN</code> and optionally <code>ROBOTSTXT_DARKVISITORS_AGENT_TYPES</code> and <code>ROBOTSTXT_DARKVISITORS_DISALLOW</code>.</li> <li>Community Lists: Specify <code>ROBOTSTXT_COMMUNITY_LISTS</code> (space-separated IDs).</li> <li>Custom URLs: Provide <code>ROBOTSTXT_URLS</code> (space-separated URLs).</li> <li>Manual Rules: Use <code>ROBOTSTXT_RULE</code> for individual rules (multiple rules can be specified with <code>ROBOTSTXT_RULE_N</code>).</li> </ul> </li> <li>Filter rules (optional): Use <code>ROBOTSTXT_IGNORE_RULES_N</code> to exclude specific rules by regex pattern.</li> <li>Add sitemaps (optional): Use <code>ROBOTSTXT_SITEMAP_N</code> for sitemap URLs.</li> <li>Obtain the generated robots.txt file: Once BunkerWeb is running with the above settings, you can access the dynamically generated <code>robots.txt</code> file by making an HTTP GET request to <code>http(s)://your-domain.com/robots.txt</code>.</li> </ol>"},{"location":"features/#configuration-settings_28","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_ROBOTSTXT</code> <code>no</code> multisite No Enables or disables the <code>robots.txt</code> feature. <code>ROBOTSTXT_DARKVISITORS_TOKEN</code> multisite No Bearer token for the DarkVisitors API. <code>ROBOTSTXT_DARKVISITORS_AGENT_TYPES</code> multisite No Comma-separated list of agent types (e.g., <code>AI Data Scraper</code>) to include from DarkVisitors. <code>ROBOTSTXT_DARKVISITORS_DISALLOW</code> <code>/</code> multisite No A string specifying which URLs are disallowed. This value will be sent as the disallow field when contacting the DarkVisitors API. <code>ROBOTSTXT_COMMUNITY_LISTS</code> multisite No Space-separated list of community-maintained rule set IDs to include. <code>ROBOTSTXT_URLS</code> multisite No Space-separated list of URLs to fetch additional <code>robots.txt</code> rules from. Supports <code>file://</code> and basic auth (<code>http://user:pass@url</code>). <code>ROBOTSTXT_RULE</code> multisite Yes A single rule for <code>robots.txt</code>. <code>ROBOTSTXT_HEADER</code> multisite Yes Header for <code>robots.txt</code> file (before rules). Can be Base64 encoded. <code>ROBOTSTXT_FOOTER</code> multisite Yes Footer for <code>robots.txt</code> file (after rules). Can be Base64 encoded. <code>ROBOTSTXT_IGNORE_RULES</code> multisite Yes A single PCRE regex pattern to ignore rules. <code>ROBOTSTXT_SITEMAP</code> multisite Yes A single sitemap URL."},{"location":"features/#example-configurations_30","title":"Example Configurations","text":"<p>Basic Manual Rules</p> <pre><code>USE_ROBOTSTXT: \"yes\"\nROBOTSTXT_RULE: \"User-agent: *\"\nROBOTSTXT_RULE_1: \"Disallow: /private\"\nROBOTSTXT_SITEMAP: \"https://example.com/sitemap.xml\"\n</code></pre> <p>Using Dynamic Sources (DarkVisitors &amp; Community List)</p> <pre><code>USE_ROBOTSTXT: \"yes\"\nROBOTSTXT_DARKVISITORS_TOKEN: \"your-darkvisitors-token-here\"\nROBOTSTXT_DARKVISITORS_AGENT_TYPES: \"AI Data Scraper\"\nROBOTSTXT_COMMUNITY_LISTS: \"robots-disallowed\"\nROBOTSTXT_IGNORE_RULES: \"User-agent: Googlebot-Image\"\n</code></pre> <p>Combined Configuration</p> <pre><code>USE_ROBOTSTXT: \"yes\"\nROBOTSTXT_DARKVISITORS_TOKEN: \"your-darkvisitors-token-here\"\nROBOTSTXT_COMMUNITY_LISTS: \"ai-robots-txt\"\nROBOTSTXT_URLS: \"https://example.com/my-custom-rules.txt\"\nROBOTSTXT_RULE: \"User-agent: MyOwnBot\"\nROBOTSTXT_RULE_1: \"Disallow: /admin\"\nROBOTSTXT_IGNORE_RULES: \"User-agent: Googlebot-Image\"\nROBOTSTXT_SITEMAP: \"https://example.com/sitemap.xml\"\n</code></pre> <p>With Header and Footer</p> <pre><code>USE_ROBOTSTXT: \"yes\"\nROBOTSTXT_HEADER: \"# This is a custom header\"\nROBOTSTXT_RULE: \"User-agent: *\"\nROBOTSTXT_RULE_1: \"Disallow: /private\"\nROBOTSTXT_FOOTER: \"# This is a custom footer\"\nROBOTSTXT_SITEMAP: \"https://example.com/sitemap.xml\"\n</code></pre> <p>For more information, see the robots.txt documentation.</p>"},{"location":"features/#ssl","title":"SSL","text":"<p>STREAM support </p> <p>The SSL plugin provides robust SSL/TLS encryption capabilities for your BunkerWeb-protected websites. This core component enables secure HTTPS connections by configuring and optimizing cryptographic protocols, ciphers, and related security settings to protect data in transit between clients and your web services.</p> <p>How it works:</p> <ol> <li>When a client initiates an HTTPS connection to your website, BunkerWeb handles the SSL/TLS handshake using your configured settings.</li> <li>The plugin enforces modern encryption protocols and strong cipher suites while disabling known vulnerable options.</li> <li>Optimized SSL session parameters improve connection performance without sacrificing security.</li> <li>Certificate presentation is configured according to best practices to ensure compatibility and security.</li> </ol> <p>Security Benefits</p> <ul> <li>Data Protection: Encrypts data in transit, preventing eavesdropping and man-in-the-middle attacks</li> <li>Authentication: Verifies the identity of your server to clients</li> <li>Integrity: Ensures data hasn't been tampered with during transmission</li> <li>Modern Standards: Configured for compliance with industry best practices and security standards</li> </ul>"},{"location":"features/#how-to-use_29","title":"How to Use","text":"<p>Follow these steps to configure and use the SSL feature:</p> <ol> <li>Configure protocols: Choose which SSL/TLS protocol versions to support using the <code>SSL_PROTOCOLS</code> setting.</li> <li>Select cipher suites: Specify the encryption strength using the <code>SSL_CIPHERS_LEVEL</code> setting or provide custom ciphers with <code>SSL_CIPHERS_CUSTOM</code>.</li> <li>Configure HTTP to HTTPS redirection: Set up automatic redirection using the <code>AUTO_REDIRECT_HTTP_TO_HTTPS</code> or <code>REDIRECT_HTTP_TO_HTTPS</code> settings.</li> </ol>"},{"location":"features/#configuration-settings_29","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>REDIRECT_HTTP_TO_HTTPS</code> <code>no</code> multisite no Redirect HTTP to HTTPS: When set to <code>yes</code>, all HTTP requests are redirected to HTTPS. <code>AUTO_REDIRECT_HTTP_TO_HTTPS</code> <code>yes</code> multisite no Auto Redirect HTTP to HTTPS: When set to <code>yes</code>, automatically redirects HTTP to HTTPS if HTTPS is detected. <code>SSL_PROTOCOLS</code> <code>TLSv1.2 TLSv1.3</code> multisite no SSL Protocols: Space-separated list of SSL/TLS protocols to support. <code>SSL_CIPHERS_LEVEL</code> <code>modern</code> multisite no SSL Ciphers Level: Preset security level for cipher suites (<code>modern</code>, <code>intermediate</code>, or <code>old</code>). <code>SSL_CIPHERS_CUSTOM</code> multisite no Custom SSL Ciphers: Colon-separated list of cipher suites to use for SSL/TLS connections (overrides level). <p>SSL Labs Testing</p> <p>After configuring your SSL settings, use the Qualys SSL Labs Server Test to verify your configuration and check for potential security issues. A proper BunkerWeb SSL configuration should achieve an A+ rating.</p> <p>Protocol Selection</p> <p>Support for older protocols like SSLv3, TLSv1.0, and TLSv1.1 is intentionally disabled by default due to known vulnerabilities. Only enable these protocols if you absolutely need to support legacy clients and understand the security implications of doing so.</p>"},{"location":"features/#example-configurations_31","title":"Example Configurations","text":"Modern Security (Default)Maximum SecurityLegacy CompatibilityCustom Ciphers <p>The default configuration that provides strong security while maintaining compatibility with modern browsers:</p> <pre><code>LISTEN_HTTPS: \"yes\"\nSSL_PROTOCOLS: \"TLSv1.2 TLSv1.3\"\nSSL_CIPHERS_LEVEL: \"modern\"\nAUTO_REDIRECT_HTTP_TO_HTTPS: \"yes\"\nREDIRECT_HTTP_TO_HTTPS: \"no\"\n</code></pre> <p>Configuration focused on maximum security, potentially with reduced compatibility for older clients:</p> <pre><code>LISTEN_HTTPS: \"yes\"\nSSL_PROTOCOLS: \"TLSv1.3\"\nSSL_CIPHERS_LEVEL: \"modern\"\nAUTO_REDIRECT_HTTP_TO_HTTPS: \"yes\"\nREDIRECT_HTTP_TO_HTTPS: \"yes\"\n</code></pre> <p>Configuration with broader compatibility for older clients (use only if necessary):</p> <pre><code>LISTEN_HTTPS: \"yes\"\nSSL_PROTOCOLS: \"TLSv1.2 TLSv1.3\"\nSSL_CIPHERS_LEVEL: \"old\"\nAUTO_REDIRECT_HTTP_TO_HTTPS: \"no\"\n</code></pre> <p>Configuration using custom cipher specification:</p> <pre><code>LISTEN_HTTPS: \"yes\"\nSSL_PROTOCOLS: \"TLSv1.2 TLSv1.3\"\nSSL_CIPHERS_CUSTOM: \"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305\"\nAUTO_REDIRECT_HTTP_TO_HTTPS: \"yes\"\n</code></pre>"},{"location":"features/#securitytxt","title":"Security.txt","text":"<p>STREAM support </p> <p>The Security.txt plugin implements the Security.txt standard (RFC 9116) for your website. This feature helps security researchers access your security policies and provides a standardized way for them to report security vulnerabilities they discover in your systems.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb creates a <code>/.well-known/security.txt</code> file at the root of your website.</li> <li>This file contains information about your security policies, contacts, and other relevant details.</li> <li>Security researchers and automated tools can easily find this file at the standard location.</li> <li>The content is configured using simple settings that allow you to specify contact information, encryption keys, policies, and acknowledgments.</li> <li>BunkerWeb automatically formats the file in accordance with RFC 9116.</li> </ol>"},{"location":"features/#how-to-use_30","title":"How to Use","text":"<p>Follow these steps to configure and use the Security.txt feature:</p> <ol> <li>Enable the feature: Set the <code>USE_SECURITYTXT</code> setting to <code>yes</code> to enable the security.txt file.</li> <li>Configure contact information: Specify at least one contact method using the <code>SECURITYTXT_CONTACT</code> setting.</li> <li>Set additional information: Configure optional fields like expiration date, encryption, acknowledgments, and policy URLs.</li> <li>Let BunkerWeb handle the rest: Once configured, BunkerWeb will automatically create and serve the security.txt file at the standard location.</li> </ol>"},{"location":"features/#configuration-settings_30","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>USE_SECURITYTXT</code> <code>no</code> multisite no Enable Security.txt: Set to <code>yes</code> to enable the security.txt file. <code>SECURITYTXT_URI</code> <code>/.well-known/security.txt</code> multisite no Security.txt URI: Indicates the URI where the security.txt file will be accessible. <code>SECURITYTXT_CONTACT</code> multisite yes Contact Information: How security researchers can contact you (e.g., <code>mailto:security@example.com</code>). <code>SECURITYTXT_EXPIRES</code> multisite no Expiration Date: When this security.txt file should be considered expired (ISO 8601 format). <code>SECURITYTXT_ENCRYPTION</code> multisite yes Encryption: URL pointing to encryption keys to be used for secure communication. <code>SECURITYTXT_ACKNOWLEDGEMENTS</code> multisite yes Acknowledgements: URL where security researchers are recognized for their reports. <code>SECURITYTXT_POLICY</code> multisite yes Security Policy: URL pointing to the security policy describing how to report vulnerabilities. <code>SECURITYTXT_HIRING</code> multisite yes Security Jobs: URL pointing to security-related job openings. <code>SECURITYTXT_CANONICAL</code> multisite yes Canonical URL: The canonical URI(s) for this security.txt file. <code>SECURITYTXT_PREFERRED_LANG</code> <code>en</code> multisite no Preferred Language: The language(s) used in communications. Specified as an ISO 639-1 language code. <code>SECURITYTXT_CSAF</code> multisite yes CSAF: Link to the provider-metadata.json of your Common Security Advisory Framework provider. <p>Expiration Date Required</p> <p>According to RFC 9116, the <code>Expires</code> field is required. If you don't provide a value for <code>SECURITYTXT_EXPIRES</code>, BunkerWeb automatically sets the expiration date to one year from the current date.</p> <p>Contact Information Is Essential</p> <p>The <code>Contact</code> field is the most important part of the security.txt file. You should provide at least one way for security researchers to contact you. This can be an email address, a web form, a phone number, or any other method that works for your organization.</p> <p>URLs Must Use HTTPS</p> <p>According to RFC 9116, all URLs in the security.txt file (except for <code>mailto:</code> and <code>tel:</code> links) MUST use HTTPS. Non-HTTPS URLs will automatically be converted to HTTPS by BunkerWeb to ensure compliance with the standard.</p>"},{"location":"features/#example-configurations_32","title":"Example Configurations","text":"Basic ConfigurationComprehensive ConfigurationMultiple Contacts Configuration <p>A minimal configuration with just contact information:</p> <pre><code>USE_SECURITYTXT: \"yes\"\nSECURITYTXT_CONTACT: \"mailto:security@example.com\"\nSECURITYTXT_POLICY: \"https://example.com/security-policy\"\n</code></pre> <p>A more complete configuration with all fields:</p> <pre><code>USE_SECURITYTXT: \"yes\"\nSECURITYTXT_CONTACT: \"mailto:security@example.com\"\nSECURITYTXT_CONTACT_2: \"https://example.com/security-contact-form\"\nSECURITYTXT_EXPIRES: \"2023-12-31T23:59:59+00:00\"\nSECURITYTXT_ENCRYPTION: \"https://example.com/pgp-key.txt\"\nSECURITYTXT_ACKNOWLEDGEMENTS: \"https://example.com/hall-of-fame\"\nSECURITYTXT_POLICY: \"https://example.com/security-policy\"\nSECURITYTXT_HIRING: \"https://example.com/jobs/security\"\nSECURITYTXT_CANONICAL: \"https://example.com/.well-known/security.txt\"\nSECURITYTXT_PREFERRED_LANG: \"en\"\nSECURITYTXT_CSAF: \"https://example.com/provider-metadata.json\"\n</code></pre> <p>Configuration with multiple contact methods:</p> <pre><code>USE_SECURITYTXT: \"yes\"\nSECURITYTXT_CONTACT: \"mailto:security@example.com\"\nSECURITYTXT_CONTACT_2: \"tel:+1-201-555-0123\"\nSECURITYTXT_CONTACT_3: \"https://example.com/security-form\"\nSECURITYTXT_POLICY: \"https://example.com/security-policy\"\nSECURITYTXT_EXPIRES: \"2024-06-30T23:59:59+00:00\"\n</code></pre>"},{"location":"features/#self-signed-certificate","title":"Self-signed certificate","text":"<p>STREAM support </p> <p>The Self-signed Certificate plugin automatically generates and manages SSL/TLS certificates directly within BunkerWeb, enabling secure HTTPS connections without requiring an external certificate authority. This feature is particularly useful in development environments, internal networks, or whenever you need to quickly deploy HTTPS without configuring external certificates.</p> <p>How it works:</p> <ol> <li>When enabled, BunkerWeb automatically generates a self-signed SSL/TLS certificate for your configured domains.</li> <li>The certificate includes all server names defined in your configuration, ensuring proper SSL validation for each domain.</li> <li>Certificates are stored securely and used to encrypt all HTTPS traffic to your websites.</li> <li>The certificate is automatically renewed before expiration, ensuring continuous HTTPS availability.</li> </ol> <p>Browser Security Warnings</p> <p>Browsers will display security warnings when users visit sites using self-signed certificates, as these certificates aren't validated by a trusted certificate authority. For production environments, consider using Let's Encrypt instead.</p>"},{"location":"features/#how-to-use_31","title":"How to Use","text":"<p>Follow these steps to configure and use the Self-signed Certificate feature:</p> <ol> <li>Enable the feature: Set the <code>GENERATE_SELF_SIGNED_SSL</code> setting to <code>yes</code> to enable self-signed certificate generation.</li> <li>Choose cryptographic algorithm: Select your preferred algorithm using the <code>SELF_SIGNED_SSL_ALGORITHM</code> setting.</li> <li>Configure validity period: Optionally set how long the certificate should be valid using the <code>SELF_SIGNED_SSL_EXPIRY</code> setting.</li> <li>Set certificate subject: Configure the certificate subject using the <code>SELF_SIGNED_SSL_SUBJ</code> setting.</li> <li>Let BunkerWeb handle the rest: Once configured, certificates are automatically generated and applied to your domains.</li> </ol> <p>Stream Mode Configuration</p> <p>For stream mode, configure the <code>LISTEN_STREAM_PORT_SSL</code> setting to specify the SSL/TLS listening port. This step is essential for proper operation in stream mode.</p>"},{"location":"features/#configuration-settings_31","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>GENERATE_SELF_SIGNED_SSL</code> <code>no</code> multisite no Enable Self-signed: Set to <code>yes</code> to enable automatic self-signed certificate generation. <code>SELF_SIGNED_SSL_ALGORITHM</code> <code>ec-prime256v1</code> multisite no Certificate Algorithm: Algorithm used for certificate generation: <code>ec-prime256v1</code>, <code>ec-secp384r1</code>, <code>rsa-2048</code>, or <code>rsa-4096</code>. <code>SELF_SIGNED_SSL_EXPIRY</code> <code>365</code> multisite no Certificate Validity: Number of days the self-signed certificate should be valid (default: 1 year). <code>SELF_SIGNED_SSL_SUBJ</code> <code>/CN=www.example.com/</code> multisite no Certificate Subject: Subject field for the certificate that identifies the domain. <p>Development Environments</p> <p>Self-signed certificates are ideal for development and testing environments where you need HTTPS but do not require certificates trusted by public browsers.</p> <p>Certificate Information</p> <p>The generated self-signed certificates use the specified algorithm (defaulting to Elliptic Curve cryptography with the prime256v1 curve) and include the configured subject, ensuring proper functionality for your domains.</p>"},{"location":"features/#example-configurations_33","title":"Example Configurations","text":"Basic ConfigurationShort-lived CertificatesTesting with RSA Certificates <p>A simple configuration using self-signed certificates with default settings:</p> <pre><code>GENERATE_SELF_SIGNED_SSL: \"yes\"\nSELF_SIGNED_SSL_ALGORITHM: \"ec-prime256v1\"\nSELF_SIGNED_SSL_EXPIRY: \"365\"\nSELF_SIGNED_SSL_SUBJ: \"/CN=mysite.local/\"\n</code></pre> <p>Configuration with certificates that expire more frequently (useful for regularly testing certificate renewal processes):</p> <pre><code>GENERATE_SELF_SIGNED_SSL: \"yes\"\nSELF_SIGNED_SSL_ALGORITHM: \"ec-prime256v1\"\nSELF_SIGNED_SSL_EXPIRY: \"90\"\nSELF_SIGNED_SSL_SUBJ: \"/CN=dev.example.com/\"\n</code></pre> <p>Configuration for a testing environment where a domain uses self-signed RSA certificates:</p> <pre><code>SERVER_NAME: \"test.example.com\"\nGENERATE_SELF_SIGNED_SSL: \"yes\"\nSELF_SIGNED_SSL_ALGORITHM: \"rsa-4096\"\nSELF_SIGNED_SSL_EXPIRY: \"365\"\nSELF_SIGNED_SSL_SUBJ: \"/CN=test.example.com/\"\n</code></pre>"},{"location":"features/#sessions","title":"Sessions","text":"<p>STREAM support </p> <p>The Sessions plugin provides robust HTTP session management for BunkerWeb, enabling secure and reliable user session tracking across requests. This core feature is essential for maintaining user state, authentication persistence, and supporting other features that require identity continuity, such as anti\u2011bot protection and user authentication systems.</p> <p>How it works:</p> <ol> <li>When a user first interacts with your website, BunkerWeb creates a unique session identifier.</li> <li>This identifier is securely stored in a cookie on the user's browser.</li> <li>On subsequent requests, BunkerWeb retrieves the session identifier from the cookie and uses it to access the user's session data.</li> <li>Session data can be stored locally or in Redis for distributed environments with multiple BunkerWeb instances.</li> <li>Sessions are automatically managed with configurable timeouts, ensuring security while maintaining usability.</li> <li>The cryptographic security of sessions is ensured through a secret key that is used to sign session cookies.</li> </ol>"},{"location":"features/#how-to-use_32","title":"How to Use","text":"<p>Follow these steps to configure and use the Sessions feature:</p> <ol> <li>Configure session security: Set a strong, unique <code>SESSIONS_SECRET</code> to ensure session cookies cannot be forged. (The default value is \"random\" which triggers BunkerWeb to generate a random secret key.)</li> <li>Choose a session name: Optionally customize the <code>SESSIONS_NAME</code> to define what your session cookie will be called in the browser. (The default value is \"random\" which triggers BunkerWeb to generate a random name.)</li> <li>Set session timeouts: Configure how long sessions remain valid with the timeout settings (<code>SESSIONS_IDLING_TIMEOUT</code>, <code>SESSIONS_ROLLING_TIMEOUT</code>, <code>SESSIONS_ABSOLUTE_TIMEOUT</code>).</li> <li>Configure Redis integration: For distributed environments, set <code>USE_REDIS</code> to \"yes\" and configure your Redis connection to share session data across multiple BunkerWeb nodes.</li> <li>Let BunkerWeb handle the rest: Once configured, session management happens automatically for your website.</li> </ol>"},{"location":"features/#configuration-settings_32","title":"Configuration Settings","text":"Setting Default Context Multiple Description <code>SESSIONS_SECRET</code> <code>random</code> global no Session Secret: Cryptographic key used to sign session cookies. Should be a strong, random string unique to your site. <code>SESSIONS_NAME</code> <code>random</code> global no Cookie Name: The name of the cookie that will store the session identifier. <code>SESSIONS_IDLING_TIMEOUT</code> <code>1800</code> global no Idling Timeout: Maximum time (in seconds) of inactivity before the session is invalidated. <code>SESSIONS_ROLLING_TIMEOUT</code> <code>3600</code> global no Rolling Timeout: Maximum time (in seconds) before a session must be renewed. <code>SESSIONS_ABSOLUTE_TIMEOUT</code> <code>86400</code> global no Absolute Timeout: Maximum time (in seconds) before a session is destroyed regardless of activity. <code>SESSIONS_CHECK_IP</code> <code>yes</code> global no Check IP: When set to <code>yes</code>, destroys the session if the client IP address changes. <code>SESSIONS_CHECK_USER_AGENT</code> <code>yes</code> global no Check User-Agent: When set to <code>yes</code>, destroys the session if the client User-Agent changes. <p>Security Considerations</p> <p>The <code>SESSIONS_SECRET</code> setting is critical for security. In production environments:</p> <ol> <li>Use a strong, random value (at least 32 characters)</li> <li>Keep this value confidential</li> <li>Use the same value across all BunkerWeb instances in a cluster</li> <li>Consider using environment variables or secrets management to avoid storing this in plain text</li> </ol> <p>Clustered Environments</p> <p>If you're running multiple BunkerWeb instances behind a load balancer:</p> <ol> <li>Set <code>USE_REDIS</code> to <code>yes</code> and configure your Redis connection</li> <li>Ensure all instances use the exact same <code>SESSIONS_SECRET</code> and <code>SESSIONS_NAME</code></li> <li>This ensures users maintain their session regardless of which BunkerWeb instance handles their requests</li> </ol>"},{"location":"features/#example-configurations_34","title":"Example Configurations","text":"Basic ConfigurationEnhanced SecurityClustered Environment with RedisLong-lived Sessions <p>A simple configuration for a single BunkerWeb instance:</p> <pre><code>SESSIONS_SECRET: \"your-strong-random-secret-key-here\"\nSESSIONS_NAME: \"myappsession\"\nSESSIONS_IDLING_TIMEOUT: \"1800\"\nSESSIONS_ROLLING_TIMEOUT: \"3600\"\nSESSIONS_ABSOLUTE_TIMEOUT: \"86400\"\n</code></pre> <p>Configuration with increased security settings:</p> <pre><code>SESSIONS_SECRET: \"your-very-strong-random-secret-key-here\"\nSESSIONS_NAME: \"securesession\"\nSESSIONS_IDLING_TIMEOUT: \"900\"  # 15 minutes\nSESSIONS_ROLLING_TIMEOUT: \"1800\"  # 30 minutes\nSESSIONS_ABSOLUTE_TIMEOUT: \"43200\"  # 12 hours\nSESSIONS_CHECK_IP: \"yes\"\nSESSIONS_CHECK_USER_AGENT: \"yes\"\n</code></pre> <p>Configuration for multiple BunkerWeb instances sharing session data:</p> <pre><code>SESSIONS_SECRET: \"your-strong-random-secret-key-here\"\nSESSIONS_NAME: \"clustersession\"\nSESSIONS_IDLING_TIMEOUT: \"1800\"\nSESSIONS_ROLLING_TIMEOUT: \"3600\"\nSESSIONS_ABSOLUTE_TIMEOUT: \"86400\"\nUSE_REDIS: \"yes\"\n# Ensure Redis connection is configured correctly\n</code></pre> <p>Configuration for applications requiring extended session persistence:</p> <pre><code>SESSIONS_SECRET: \"your-strong-random-secret-key-here\"\nSESSIONS_NAME: \"persistentsession\"\nSESSIONS_IDLING_TIMEOUT: \"86400\"  # 1 day\nSESSIONS_ROLLING_TIMEOUT: \"172800\"  # 2 days\nSESSIONS_ABSOLUTE_TIMEOUT: \"604800\"  # 7 days\n</code></pre>"},{"location":"features/#ui","title":"UI","text":"<p>STREAM support </p> <p>Integrate easily the BunkerWeb UI.</p> Setting Default Context Multiple Description <code>USE_UI</code> <code>no</code> multisite no Use UI <code>UI_HOST</code> global no Address of the web UI used for initial setup"},{"location":"features/#user-manager-pro","title":"User Manager  (PRO)","text":"<p>STREAM support </p> <p>Add the possibility to manage users on the web interface</p> Setting Default Context Multiple Description <code>USERS_REQUIRE_2FA</code> <code>no</code> global no Require two-factor authentication for all users"},{"location":"features/#whitelist","title":"Whitelist","text":"<p>STREAM support </p> <p>The Whitelist plugin lets you define a list of trusted IP addresses that bypass other security filters. For blocking unwanted clients instead, refer to the Blacklist plugin.</p> <p>The Whitelist plugin provides a comprehensive approach to explicitly allow access to your website based on various client attributes. This feature provides a security mechanism: visitors matching specific criteria are granted immediate access, while all others must pass regular security checks.</p> <p>How it works:</p> <ol> <li>You define criteria for visitors who should be \"whitelisted\" (IP addresses, networks, rDNS, ASN, User-Agent, or URI patterns).</li> <li>When a visitor attempts to access your site, BunkerWeb checks whether they match any of these whitelist criteria.</li> <li>If a visitor matches any whitelist rule (and doesn't match any ignore rule), they are granted access to your site and bypass all other security checks.</li> <li>If a visitor doesn't match any whitelist criteria, they proceed through all normal security checks as usual.</li> <li>Whitelists can be automatically updated from external sources on a regular schedule.</li> </ol>"},{"location":"features/#how-to-use_33","title":"How to Use","text":"<p>Follow these steps to configure and use the Whitelist feature:</p> <ol> <li>Enable the feature: The Whitelist feature is disabled by default. Set the <code>USE_WHITELIST</code> setting to <code>yes</code> to enable it.</li> <li>Configure allow rules: Define which IPs, networks, rDNS patterns, ASNs, User-Agents, or URIs should be whitelisted.</li> <li>Set up ignore rules: Specify any exceptions that should bypass the whitelist checks.</li> <li>Add external sources: Configure URLs for automatically downloading and updating whitelist data.</li> <li>Monitor access: Check the web UI to see which visitors are being allowed or denied.</li> </ol> <p>stream mode</p> <p>When using stream mode, only IP, rDNS, and ASN checks are performed.</p>"},{"location":"features/#configuration-settings_33","title":"Configuration Settings","text":"<p>General</p> Setting Default Context Multiple Description <code>USE_WHITELIST</code> <code>no</code> multisite no Enable Whitelist: Set to <code>yes</code> to enable the whitelist feature. IP AddressReverse DNSASNUser AgentURI <p>What this does: Whitelists visitors based on their IP address or network. These visitors will bypass all security checks.</p> Setting Default Context Multiple Description <code>WHITELIST_IP</code> multisite no IP Whitelist: List of IP addresses or networks (CIDR notation) to allow, separated by spaces. <code>WHITELIST_IGNORE_IP</code> multisite no IP Ignore List: List of IP addresses or networks that should bypass IP whitelist checks. <code>WHITELIST_IP_URLS</code> multisite no IP Whitelist URLs: List of URLs containing IP addresses or networks to whitelist, separated by spaces. <code>WHITELIST_IGNORE_IP_URLS</code> multisite no IP Ignore List URLs: List of URLs containing IP addresses or networks to ignore. <p>What this does: Whitelists visitors based on their domain name (in reverse). This is useful for allowing access to visitors from specific organizations or networks by their domain.</p> Setting Default Context Multiple Description <code>WHITELIST_RDNS</code> multisite no rDNS Whitelist: List of reverse DNS suffixes to allow, separated by spaces. <code>WHITELIST_RDNS_GLOBAL</code> <code>yes</code> multisite no rDNS Global Only: Only perform rDNS whitelist checks on global IP addresses when set to <code>yes</code>. <code>WHITELIST_IGNORE_RDNS</code> multisite no rDNS Ignore List: List of reverse DNS suffixes that should bypass rDNS whitelist checks. <code>WHITELIST_RDNS_URLS</code> multisite no rDNS Whitelist URLs: List of URLs containing reverse DNS suffixes to whitelist, separated by spaces. <code>WHITELIST_IGNORE_RDNS_URLS</code> multisite no rDNS Ignore List URLs: List of URLs containing reverse DNS suffixes to ignore. <p>What this does: Whitelists visitors from specific network providers using Autonomous System Numbers. ASNs identify which provider or organization an IP belongs to.</p> Setting Default Context Multiple Description <code>WHITELIST_ASN</code> multisite no ASN Whitelist: List of Autonomous System Numbers to allow, separated by spaces. <code>WHITELIST_IGNORE_ASN</code> multisite no ASN Ignore List: List of ASNs that should bypass ASN whitelist checks. <code>WHITELIST_ASN_URLS</code> multisite no ASN Whitelist URLs: List of URLs containing ASNs to whitelist, separated by spaces. <code>WHITELIST_IGNORE_ASN_URLS</code> multisite no ASN Ignore List URLs: List of URLs containing ASNs to ignore. <p>What this does: Whitelists visitors based on what browser or tool they claim to be using. This is effective for allowing access to specific known tools or services.</p> Setting Default Context Multiple Description <code>WHITELIST_USER_AGENT</code> multisite no User-Agent Whitelist: List of User-Agent patterns (PCRE regex) to allow, separated by spaces. <code>WHITELIST_IGNORE_USER_AGENT</code> multisite no User-Agent Ignore List: List of User-Agent patterns that should bypass User-Agent whitelist checks. <code>WHITELIST_USER_AGENT_URLS</code> multisite no User-Agent Whitelist URLs: List of URLs containing User-Agent patterns to whitelist. <code>WHITELIST_IGNORE_USER_AGENT_URLS</code> multisite no User-Agent Ignore List URLs: List of URLs containing User-Agent patterns to ignore. <p>What this does: Whitelists requests to specific URLs on your site. This is helpful for allowing access to specific endpoints regardless of other factors.</p> Setting Default Context Multiple Description <code>WHITELIST_URI</code> multisite no URI Whitelist: List of URI patterns (PCRE regex) to allow, separated by spaces. <code>WHITELIST_IGNORE_URI</code> multisite no URI Ignore List: List of URI patterns that should bypass URI whitelist checks. <code>WHITELIST_URI_URLS</code> multisite no URI Whitelist URLs: List of URLs containing URI patterns to whitelist, separated by spaces. <code>WHITELIST_IGNORE_URI_URLS</code> multisite no URI Ignore List URLs: List of URLs containing URI patterns to ignore. <p>URL Format Support</p> <p>All <code>*_URLS</code> settings support HTTP/HTTPS URLs as well as local file paths using the <code>file:///</code> prefix. Basic authentication is supported using the <code>http://user:pass@url</code> format.</p> <p>Regular Updates</p> <p>Whitelists from URLs are automatically downloaded and updated hourly to ensure your protection remains current with the latest trusted sources.</p> <p>Security Bypass</p> <p>Whitelisted visitors will completely bypass all other security checks in BunkerWeb, including WAF rules, rate limiting, bad bot detection, and any other security mechanisms. Only use the whitelist for trusted sources you're absolutely confident in.</p>"},{"location":"features/#example-configurations_35","title":"Example Configurations","text":"Basic Organization AccessAdvanced ConfigurationUsing Local FilesAPI Access PatternWell-Known Crawlers <p>A simple configuration that whitelists company office IPs:</p> <pre><code>USE_WHITELIST: \"yes\"\nWHITELIST_IP: \"192.168.1.0/24 10.0.0.0/8 203.0.113.42\"\n</code></pre> <p>A more comprehensive configuration with multiple whitelist criteria:</p> <pre><code>USE_WHITELIST: \"yes\"\n\n# Company and trusted partner assets\nWHITELIST_IP: \"192.168.1.0/24 203.0.113.0/24\"\nWHITELIST_RDNS: \".company.com .partner-company.org\"\nWHITELIST_ASN: \"12345 67890\"  # Company and partner ASNs\nWHITELIST_USER_AGENT: \"(?:\\b)CompanyBot(?:\\b) (?:\\b)PartnerCrawler(?:\\b)\"\n\n# External trusted sources\nWHITELIST_IP_URLS: \"https://example.com/trusted-networks.txt\"\nWHITELIST_USER_AGENT_URLS: \"https://example.com/trusted-crawlers.txt\"\n</code></pre> <p>Configuration using local files for whitelists:</p> <pre><code>USE_WHITELIST: \"yes\"\nWHITELIST_IP_URLS: \"file:///path/to/ip-whitelist.txt\"\nWHITELIST_RDNS_URLS: \"file:///path/to/rdns-whitelist.txt\"\nWHITELIST_ASN_URLS: \"file:///path/to/asn-whitelist.txt\"\nWHITELIST_USER_AGENT_URLS: \"file:///path/to/user-agent-whitelist.txt\"\nWHITELIST_URI_URLS: \"file:///path/to/uri-whitelist.txt\"\n</code></pre> <p>A configuration focused on allowing access to only specific API endpoints:</p> <pre><code>USE_WHITELIST: \"yes\"\nWHITELIST_URI: \"^/api/v1/public/ ^/api/v1/status\"\nWHITELIST_IP: \"192.168.1.0/24\"  # Internal network for all endpoints\n</code></pre> <p>A configuration that whitelists common search engine and social media crawlers:</p> <pre><code>USE_WHITELIST: \"yes\"\n\n# Verification with reverse DNS for added security\nWHITELIST_RDNS: \".googlebot.com .search.msn.com .crawl.yahoo.net .yandex.com .baidu.com .facebook.com\"\nWHITELIST_RDNS_GLOBAL: \"yes\"  # Only check global IPs\n</code></pre> <p>This configuration allows legitimate crawlers to index your site without being subject to rate limiting or other security measures that might block them. The rDNS checks help verify that crawlers are actually coming from their claimed companies.</p>"},{"location":"integrations/","title":"Integrations","text":""},{"location":"integrations/#bunkerweb-cloud","title":"BunkerWeb Cloud","text":"BunkerWeb Cloud <p>BunkerWeb Cloud will be the easiest way to get started with BunkerWeb. It offers you a fully managed BunkerWeb service with no hassle. Think of it as a BunkerWeb-as-a-Service!</p> <p>Try our BunkerWeb Cloud offer and get access to:</p> <ul> <li>A fully managed BunkerWeb instance hosted in our cloud</li> <li>All BunkerWeb features, including PRO ones</li> <li>A monitoring platform with dashboards and alerts</li> <li>Technical support to assist you with configuration</li> </ul> <p>If you are interested in the BunkerWeb Cloud offering, don't hesitate to contact us so we can discuss your needs.</p>"},{"location":"integrations/#all-in-one-aio-image","title":"All-In-One (AIO) Image","text":"BunkerWeb All-In-One Architecture (AIO)"},{"location":"integrations/#deployment","title":"Deployment","text":"<p>To deploy the all-in-one container, all you have to do is run the following command:</p> <pre><code>docker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>By default, the container exposes:</p> <ul> <li>8080/tcp for HTTP</li> <li>8443/tcp for HTTPS</li> <li>8443/udp for QUIC</li> <li>7000/tcp for the web UI access without BunkerWeb in front (not recommended for production)</li> </ul> <p>The All-In-One image comes with several built-in services, which can be controlled using environment variables:</p> <ul> <li><code>SERVICE_UI=yes</code> (default) - Enables the web UI service</li> <li><code>SERVICE_SCHEDULER=yes</code> (default) - Enables the Scheduler service</li> <li><code>SERVICE_AUTOCONF=no</code> (default) - Enables the autoconf service</li> <li><code>USE_REDIS=yes</code> (default) - Enables the built-in Redis instance</li> <li><code>USE_CROWDSEC=no</code> (default) - CrowdSec integration is disabled by default</li> </ul>"},{"location":"integrations/#accessing-the-setup-wizard","title":"Accessing the Setup wizard","text":"<p>By default, the setup wizard is automagically launched when you run the AIO container for the first time. To access it, follow these steps:</p> <ol> <li>Start the AIO container as above, ensuring <code>SERVICE_UI=yes</code> (default).</li> <li>Access the UI via your main BunkerWeb endpoint, e.g. <code>https://your-domain</code>.</li> </ol> <p>Follow the next steps in the Quickstart guide to set up the Web UI.</p>"},{"location":"integrations/#redis-integration","title":"Redis Integration","text":"<p>The BunkerWeb All-In-One image includes Redis out-of-the-box for the persistence of bans and reports. To manage Redis:</p> <ul> <li>To disable Redis, set <code>USE_REDIS=no</code> or point <code>REDIS_HOST</code> to an external host.</li> <li>Redis logs appear with <code>[REDIS]</code> prefix in Docker logs and <code>/var/log/bunkerweb/redis.log</code>.</li> </ul>"},{"location":"integrations/#crowdsec-integration","title":"CrowdSec Integration","text":"<p>The BunkerWeb All-In-One Docker image comes with CrowdSec fully integrated\u2014no extra containers or manual setup required. Follow the steps below to enable, configure, and extend CrowdSec in your deployment.</p> <p>By default, CrowdSec is disabled. To turn it on, simply add the <code>USE_CROWDSEC</code> environment variable:</p> <pre><code>docker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -e USE_CROWDSEC=yes \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <ul> <li> <p>When <code>USE_CROWDSEC=yes</code>, the entrypoint will:</p> <ol> <li>Register and start the local CrowdSec agent (via <code>cscli</code>).</li> <li>Install or upgrade default collections &amp; parsers.</li> <li>Configure the <code>crowdsec-bunkerweb-bouncer/v1.6</code> bouncer.</li> </ol> </li> </ul>"},{"location":"integrations/#default-collections-parsers","title":"Default Collections &amp; Parsers","text":"<p>On first startup (or after upgrading), these assets are automatically installed and kept up to date:</p> Type Name Purpose Collection <code>crowdsecurity/nginx</code> Defend Nginx servers against a broad array of HTTP-based attacks, from brute-force to injection attempts. Collection <code>crowdsecurity/appsec-virtual-patching</code> Delivers a dynamically updated WAF-style rule set targeting known CVEs, automatically patched daily to shield web applications from newly discovered vulnerabilities. Collection <code>crowdsecurity/appsec-generic-rules</code> Complements <code>crowdsecurity/appsec-virtual-patching</code> with heuristics for generic application-layer attack patterns\u2014such as enumeration, path traversal, and automated probes\u2014filling gaps where CVE-specific rules don\u2019t yet exist. Parser <code>crowdsecurity/geoip-enrich</code> Enriches events with GeoIP context How it works internally  The entrypoint script invokes:  <pre><code>cscli install collection crowdsecurity/nginx\ncscli install collection crowdsecurity/appsec-virtual-patching\ncscli install collection crowdsecurity/appsec-generic-rules\ncscli install parser     crowdsecurity/geoip-enrich\n</code></pre>"},{"location":"integrations/#adding-extra-collections","title":"Adding Extra Collections","text":"<p>Need more coverage? Define <code>CROWDSEC_EXTRA_COLLECTIONS</code> with a space-separated list of Hubb collections:</p> <pre><code>docker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -e USE_CROWDSEC=yes \\\n  -e CROWDSEC_EXTRA_COLLECTIONS=\"crowdsecurity/apache2 crowdsecurity/mysql\" \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>How it works internally</p> <p>The script loops through each name and installs or upgrades as needed\u2014no manual steps required.</p>"},{"location":"integrations/#appsec-toggle","title":"AppSec Toggle","text":"<p>CrowdSec AppSec features\u2014powered by the <code>appsec-virtual-patching</code> and <code>appsec-generic-rules</code> collections\u2014are enabled by default.</p> <p>To disable all AppSec (WAF/virtual-patching) functionality, set:</p> <pre><code>-e CROWDSEC_APPSEC_URL=\"\"\n</code></pre> <p>This effectively turns off the AppSec endpoint so no rules are applied.</p>"},{"location":"integrations/#external-crowdsec-api","title":"External CrowdSec API","text":"<p>If you operate a remote CrowdSec instance, point the container to your API:</p> <pre><code>docker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -e USE_CROWDSEC=yes \\\n  -e CROWDSEC_API=\"https://crowdsec.example.com:8000\" \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <ul> <li>Local registration is skipped when <code>CROWDSEC_API</code> is not <code>127.0.0.1</code> or <code>localhost</code>.</li> <li>AppSec is disabled by default when using an external API. To enable it, set <code>CROWDSEC_APPSEC_URL</code> to your desired endpoint.</li> <li>Bouncer registration still occurs against the remote API.</li> <li>To reuse an existing bouncer key, supply <code>CROWDSEC_API_KEY</code> with your pre-generated token.</li> </ul> <p>More options</p> <p>For full coverage of all CrowdSec options (custom scenarios, logs, troubleshooting, and more), see the BunkerWeb CrowdSec plugin docs or visit the official CrowdSec website.</p>"},{"location":"integrations/#docker","title":"Docker","text":"Docker integration <p>Using BunkerWeb as a Docker container offers a convenient and straightforward approach for testing and utilizing the solution, particularly if you are already familiar with Docker technology.</p> <p>To facilitate your Docker deployment, we provide readily available prebuilt images on Docker Hub, supporting multiple architectures. These prebuilt images are optimized and prepared for use on the following architectures:</p> <ul> <li>x64 (64-bit)</li> <li>x86</li> <li>armv8 (ARM 64-bit)</li> <li>armv7 (ARM 32-bit)</li> </ul> <p>By accessing these prebuilt images from Docker Hub, you can quickly pull and run BunkerWeb within your Docker environment, eliminating the need for extensive configuration or setup processes. This streamlined approach allows you to focus on leveraging the capabilities of BunkerWeb without unnecessary complexities.</p> <p>Whether you're conducting tests, developing applications, or deploying BunkerWeb in production, the Docker containerization option provides flexibility and ease of use. Embracing this method empowers you to take full advantage of BunkerWeb's features while leveraging the benefits of Docker technology.</p> <pre><code>docker pull bunkerity/bunkerweb:1.6.4\n</code></pre> <p>Docker images are also available on GitHub packages and can be downloaded using the <code>ghcr.io</code> repository address:</p> <pre><code>docker pull ghcr.io/bunkerity/bunkerweb:1.6.4\n</code></pre> <p>Key concepts for Docker integration include:</p> <ul> <li>Environment variables: Configure BunkerWeb easily using environment variables. These variables allow you to customize various aspects of BunkerWeb's behavior, such as network settings, security options, and other parameters.</li> <li>Scheduler container: Manage configuration and execute jobs using a dedicated container called the scheduler.</li> <li>Networks: Docker networks play a vital role in the integration of BunkerWeb. These networks serve two main purposes: exposing ports to clients and connecting to upstream web services. By exposing ports, BunkerWeb can accept incoming requests from clients, allowing them to access the protected web services. Additionally, by connecting to upstream web services, BunkerWeb can efficiently route and manage traffic, providing enhanced security and performance.</li> </ul> <p>Database backend</p> <p>Please note that our instructions assume you are using SQLite as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, other database backends are also supported. See the docker-compose files in the misc/integrations folder of the repository for more information.</p>"},{"location":"integrations/#environment-variables","title":"Environment variables","text":"<p>Settings are passed to the Scheduler using Docker environment variables:</p> <pre><code>...\nservices:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      - MY_SETTING=value\n      - ANOTHER_SETTING=another value\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n...\n</code></pre> <p>Full list</p> <p>For the complete list of environment variables, see the settings section of the documentation.</p>"},{"location":"integrations/#using-docker-secrets","title":"Using Docker secrets","text":"<p>Instead of passing sensitive settings via environment variables, you can store them as Docker secrets. For each setting you want to secure, create a Docker secret with the name matching the setting key (in uppercase). BunkerWeb's entrypoint scripts automatically load secrets from <code>/run/secrets</code> and export them as environment variables.</p> <p>Example: <pre><code># Create a Docker secret for ADMIN_PASSWORD\necho \"S3cr3tP@ssw0rd\" | docker secret create ADMIN_PASSWORD -\n</code></pre></p> <p>Mount the secrets when deploying: <pre><code>services:\n  bw-ui:\n    secrets:\n      - ADMIN_PASSWORD\n...\nsecrets:\n  ADMIN_PASSWORD:\n    external: true\n</code></pre></p> <p>This ensures sensitive settings are kept out of the environment and logs.</p>"},{"location":"integrations/#scheduler","title":"Scheduler","text":"<p>The scheduler runs in its own container, which is also available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-scheduler:1.6.4\n</code></pre> <p>BunkerWeb settings</p> <p>Since version <code>1.6.0</code>, the Scheduler container is where you define the settings for BunkerWeb. The Scheduler then pushes the configuration to the BunkerWeb container.</p> <p>\u26a0 Important: All API-related settings (like <code>API_HTTP_PORT</code>, <code>API_LISTEN_IP</code>, <code>API_SERVER_NAME</code>, and <code>API_WHITELIST_IP</code>) must also be defined in the BunkerWeb container. (The settings must be mirrored in both containers; otherwise, the BunkerWeb container will not accept API requests from the Scheduler).</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_HTTP_PORT: \"5000\" # Default value\n  API_LISTEN_IP: \"0.0.0.0\" # Default value\n  API_SERVER_NAME: \"bwapi\" # Default value\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\" # Set this according to your network settings\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    environment:\n      # This will set the API settings for the BunkerWeb container\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      # This will set the API settings for the Scheduler container\n      &lt;&lt;: *bw-api-env\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n...\n</code></pre> <p>A volume is needed to store the SQLite database and backups used by the scheduler:</p> <pre><code>...\nservices:\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    volumes:\n      - bw-storage:/data\n...\nvolumes:\n  bw-storage:\n</code></pre> <p>Using a local folder for persistent data</p> <p>The scheduler runs as an unprivileged user with UID 101 and GID 101 inside the container. This enhances security: in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges.</p> <p>However, if you use a local folder for persistent data, you must set the correct permissions so the unprivileged user can write data to it. For example:</p> <pre><code>mkdir bw-data &amp;&amp; \\\nchown root:101 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Alternatively, if the folder already exists:</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>If you are using Docker in rootless mode or Podman, UIDs and GIDs in the container will be mapped to different ones on the host. You will first need to check your initial subuid and subgid:</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100):</p> <pre><code>mkdir bw-data &amp;&amp; \\\nsudo chgrp 100100 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Or if the folder already exists:</p> <pre><code>sudo chgrp -R 100100 bw-data &amp;&amp; \\\nsudo chmod -R 770 bw-data\n</code></pre>"},{"location":"integrations/#networks","title":"Networks","text":"<p>By default, the BunkerWeb container listens (inside the container) on 8080/tcp for HTTP, 8443/tcp for HTTPS, and 8443/udp for QUIC.</p> <p>Privileged ports in rootless mode or when using Podman</p> <p>If you are using Docker in rootless mode and want to redirect privileged ports (&lt; 1024) like 80 and 443 to BunkerWeb, please refer to the prerequisites here.</p> <p>If you are using Podman, you can lower the minimum number for unprivileged ports: <pre><code>sudo sysctl net.ipv4.ip_unprivileged_port_start=1\n</code></pre></p> <p>The typical BunkerWeb stack when using Docker integration contains the following containers:</p> <ul> <li>BunkerWeb</li> <li>Scheduler</li> <li>Your services</li> </ul> <p>For defense-in-depth purposes, we strongly recommend creating at least three different Docker networks:</p> <ul> <li><code>bw-services</code>: for BunkerWeb and your web services</li> <li><code>bw-universe</code>: for BunkerWeb and the scheduler</li> <li><code>bw-db</code>: for the database (if you are using one)</li> </ul> <p>To secure communication between the scheduler and the BunkerWeb API, it is important to authorize API calls. You can use the <code>API_WHITELIST_IP</code> setting to specify allowed IP addresses and subnets.</p> <p>It is strongly recommended to use a static subnet for the <code>bw-universe</code> network to enhance security. By implementing these measures, you can ensure that only authorized sources can access the BunkerWeb API, reducing the risk of unauthorized access or malicious activities:</p> <pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-services\n      - bw-universe\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n...\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Static subnet so only authorized sources can access the BunkerWeb API\n  bw-services:\n    name: bw-services\n</code></pre>"},{"location":"integrations/#full-compose-file","title":"Full compose file","text":"<pre><code>x-bw-api-env: &amp;bw-api-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-api-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    depends_on:\n      - bunkerweb\n    environment:\n      &lt;&lt;: *bw-api-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # This setting is mandatory to specify the BunkerWeb instance\n      SERVER_NAME: \"www.example.com\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Static subnet so only authorized sources can access the BunkerWeb API\n  bw-services:\n    name: bw-services\n</code></pre>"},{"location":"integrations/#build-from-source","title":"Build from source","text":"<p>Alternatively, if you prefer a more hands-on approach, you have the option to build the Docker image directly from the source. Building the image from source gives you greater control and customization over the deployment process. However, please note that this method may take some time to complete, depending on your hardware configuration (you can take a coffee \u2615 if needed).</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t bw -f src/bw/Dockerfile . &amp;&amp; \\\ndocker build -t bw-scheduler -f src/scheduler/Dockerfile . &amp;&amp; \\\ndocker build -t bw-autoconf -f src/autoconf/Dockerfile . &amp;&amp; \\\ndocker build -t bw-ui -f src/ui/Dockerfile .\n</code></pre>"},{"location":"integrations/#linux","title":"Linux","text":"Linux integration <p>Supported Linux distributions for BunkerWeb (amd64/x86_64 and arm64/aarch64 architectures) include:</p> <ul> <li>Debian 12 \"Bookworm\"</li> <li>Debian 13 \"Trixie\"</li> <li>Ubuntu 22.04 \"Jammy\"</li> <li>Ubuntu 24.04 \"Noble\"</li> <li>Fedora 41 and 42</li> <li>Red Hat Enterprise Linux (RHEL) 8, 9 and 10</li> </ul>"},{"location":"integrations/#easy-installation-script","title":"Easy installation script","text":"<p>For a simplified installation experience, BunkerWeb provides an easy install script that automatically handles the entire setup process, including NGINX installation, repository configuration, and service setup.</p>"},{"location":"integrations/#quick-start","title":"Quick start","text":"<p>To get started, download the installation script and its checksum, then verify the script's integrity before running it.</p> <pre><code># Download the script and its checksum\nwget https://github.com/bunkerity/bunkerweb/releases/download/v1.6.4/install-bunkerweb.sh\nwget https://github.com/bunkerity/bunkerweb/releases/download/v1.6.4/install-bunkerweb.sh.sha256\n\n# Verify the checksum\nsha256sum -c install-bunkerweb.sh.sha256\n\n# If the check is successful, run the script\nchmod +x install-bunkerweb.sh\nsudo ./install-bunkerweb.sh\n</code></pre> <p>Security Notice</p> <p>Always verify the integrity of the installation script before running it.</p> <p>Download the checksum file and use a tool like <code>sha256sum</code> to confirm the script has not been altered or tampered with.</p> <p>If the checksum verification fails, do not execute the script\u2014it may be unsafe.</p>"},{"location":"integrations/#how-it-works","title":"How It Works","text":"<p>The easy install script is a powerful tool designed to streamline the setup of BunkerWeb on a fresh Linux system. It automates the following key steps:</p> <ol> <li>System Analysis: Detects your operating system and verifies it against the list of supported distributions.</li> <li>Installation Customization: In interactive mode, it prompts you to choose an installation type (All-In-One, Manager, Worker, etc.) and decide whether to enable the web-based setup wizard.</li> <li>Optional Integrations: Offers to automatically install and configure the CrowdSec Security Engine.</li> <li>Dependency Management: Installs the correct version of NGINX required by BunkerWeb from official sources and locks the version to prevent unintended upgrades.</li> <li>BunkerWeb Installation: Adds the BunkerWeb package repository, installs the necessary packages, and locks the version.</li> <li>Service Configuration: Sets up and enables the <code>systemd</code> services corresponding to your chosen installation type.</li> <li>Post-install Guidance: Provides clear next steps to help you get started with your new BunkerWeb instance.</li> </ol>"},{"location":"integrations/#interactive-installation","title":"Interactive Installation","text":"<p>When run without any options, the script enters an interactive mode that guides you through the setup process. You will be asked to make the following choices:</p> <ol> <li>Installation Type: Select the components you want to install.<ul> <li>Full Stack (default): An all-in-one installation including BunkerWeb, the Scheduler, and the Web UI.</li> <li>Manager: Installs the Scheduler and Web UI, intended to manage one or more remote BunkerWeb workers.</li> <li>Worker: Installs only the BunkerWeb instance, which can be managed by a remote Manager.</li> <li>Scheduler Only: Installs only the Scheduler component.</li> <li>Web UI Only: Installs only the Web UI component.</li> </ul> </li> <li>Setup Wizard: Choose whether to enable the web-based configuration wizard. This is highly recommended for first-time users.</li> <li>CrowdSec Integration: Opt-in to install the CrowdSec security engine for advanced, real-time threat protection.</li> <li>CrowdSec AppSec: If you choose to install CrowdSec, you can also enable the Application Security (AppSec) component, which adds WAF capabilities.</li> </ol> <p>Manager and Scheduler installations</p> <p>If you choose the Manager or Scheduler Only installation type, you will also be prompted to provide the IP addresses or hostnames of your BunkerWeb worker instances.</p>"},{"location":"integrations/#command-line-options","title":"Command-Line Options","text":"<p>For non-interactive or automated setups, the script can be controlled with command-line flags:</p> <p>General Options:</p> Option Description <code>-v, --version VERSION</code> Specifies the BunkerWeb version to install (e.g., <code>1.6.4</code>). <code>-w, --enable-wizard</code> Enables the setup wizard. <code>-n, --no-wizard</code> Disables the setup wizard. <code>-y, --yes</code> Runs in non-interactive mode using default answers for all prompts. <code>-f, --force</code> Forces the installation to proceed even on an unsupported OS version. <code>-q, --quiet</code> Silent installation (suppress output). <code>-h, --help</code> Displays the help message with all available options. <code>--dry-run</code> Show what would be installed without doing it. <p>Installation Types:</p> Option Description <code>--full</code> Full stack installation (BunkerWeb, Scheduler, UI). This is the default. <code>--manager</code> Installs the Scheduler and UI to manage remote workers. <code>--worker</code> Installs only the BunkerWeb instance. <code>--scheduler-only</code> Installs only the Scheduler component. <code>--ui-only</code> Installs only the Web UI component. <p>Security Integrations:</p> Option Description <code>--crowdsec</code> Install and configure CrowdSec security engine. <code>--no-crowdsec</code> Skip CrowdSec installation. <code>--crowdsec-appsec</code> Install CrowdSec with AppSec component (includes WAF capabilities). <p>Advanced Options:</p> Option Description <code>--instances \"IP1 IP2\"</code> Space-separated list of BunkerWeb instances (required for manager/scheduler modes). <p>Example Usage:</p> <pre><code># Run in interactive mode (recommended for most users)\nsudo ./install-bunkerweb.sh\n\n# Non-interactive installation with defaults (full stack, wizard enabled)\nsudo ./install-bunkerweb.sh --yes\n\n# Install a Worker node without the setup wizard\nsudo ./install-bunkerweb.sh --worker --no-wizard\n\n# Install a specific version\nsudo ./install-bunkerweb.sh --version 1.6.4\n\n# Manager setup with remote worker instances (instances required)\nsudo ./install-bunkerweb.sh --manager --instances \"192.168.1.10 192.168.1.11\"\n\n# Full installation with CrowdSec and AppSec\nsudo ./install-bunkerweb.sh --crowdsec-appsec\n\n# Silent non-interactive installation\nsudo ./install-bunkerweb.sh --quiet --yes\n\n# Preview installation without executing\nsudo ./install-bunkerweb.sh --dry-run\n\n# Error: CrowdSec cannot be used with worker installations\n# sudo ./install-bunkerweb.sh --worker --crowdsec  # This will fail\n\n# Error: Instances required for manager in non-interactive mode\n# sudo ./install-bunkerweb.sh --manager --yes  # This will fail without --instances\n</code></pre> <p>Important Notes on Option Compatibility</p> <p>CrowdSec Limitations: - CrowdSec options (<code>--crowdsec</code>, <code>--crowdsec-appsec</code>) are only compatible with <code>--full</code> (default) and <code>--manager</code> installation types - They cannot be used with <code>--worker</code>, <code>--scheduler-only</code>, or <code>--ui-only</code> installations</p> <p>Instances Requirements: - The <code>--instances</code> option is only valid with <code>--manager</code> and <code>--scheduler-only</code> installation types - When using <code>--manager</code> or <code>--scheduler-only</code> with <code>--yes</code> (non-interactive mode), the <code>--instances</code> option is mandatory - Format: <code>--instances \"192.168.1.10 192.168.1.11 192.168.1.12\"</code></p> <p>Interactive vs Non-Interactive: - Interactive mode (default) will prompt for missing required values - Non-interactive mode (<code>--yes</code>) requires all necessary options to be provided via command line</p> <pre><code>#### CrowdSec Integration with the Script\n\nIf you opt to install CrowdSec during the interactive setup, the script fully automates its integration with BunkerWeb:\n\n- It adds the official CrowdSec repository and installs the agent.\n- It creates a new acquisition file to make CrowdSec parse BunkerWeb's logs (`access.log`, `error.log`, and `modsec_audit.log`).\n- It installs essential collections (`crowdsecurity/nginx`) and parsers (`crowdsecurity/geoip-enrich`).\n- It registers a bouncer for BunkerWeb and automatically configures the API key in `/etc/bunkerweb/variables.env`.\n- If you also select the **AppSec Component**, it installs the `appsec-virtual-patching` and `appsec-generic-rules` collections and configures the AppSec endpoint for BunkerWeb.\n\nThis provides a seamless, out-of-the-box integration for powerful intrusion prevention.\n\n#### RHEL considerations\n\n!!! warning \"External database support on RHEL-based systems\"\n    If you plan to use an external database (recommended for production), you must install the appropriate database client package:\n\n    ```bash\n    # For MariaDB\n    sudo dnf install mariadb\n\n    # For MySQL\n    sudo dnf install mysql\n\n    # For PostgreSQL\n    sudo dnf install postgresql\n    ```\n\n    This is required for the BunkerWeb Scheduler to connect to your external database.\n\n#### After installation\n\nDepending on your choices during installation:\n\n**With setup wizard enabled:**\n\n1. Access the setup wizard at: `https://your-server-ip/setup`\n2. Follow the guided configuration to set up your first protected service\n3. Configure SSL/TLS certificates and other security settings\n\n**Without setup wizard:**\n\n1. Edit `/etc/bunkerweb/variables.env` to configure BunkerWeb manually\n2. Add your server settings and protected services\n3. Restart the scheduler: `sudo systemctl restart bunkerweb-scheduler`\n\n### Installation using package manager\n\nPlease ensure that you have **NGINX 1.28.0 installed before installing BunkerWeb**. For all distributions, except Fedora, it is mandatory to use prebuilt packages from the [official NGINX repository](https://nginx.org/en/linux_packages.html). Compiling NGINX from source or using packages from different repositories will not work with the official prebuilt packages of BunkerWeb. However, you have the option to build BunkerWeb from source.\n\n=== \"Debian Bookworm/Trixie\"\n\n    The first step is to add NGINX official repository:\n\n    ```shell\n    sudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring &amp;&amp; \\\n    curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\n    echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/debian `lsb_release -cs` nginx\" \\\n    | sudo tee /etc/apt/sources.list.d/nginx.list\n    ```\n\n    You should now be able to install NGINX 1.28.0:\n\n    ```shell\n    sudo apt update &amp;&amp; \\\n    sudo apt install -y --allow-downgrades nginx=1.28.0-1~$(lsb_release -cs)\n    ```\n\n    !!! warning \"Testing/dev version\"\n        If you use the `testing` or `dev` version, you will need to add the `force-bad-version` directive to your `/etc/dpkg/dpkg.cfg` file before installing BunkerWeb.\n\n        ```shell\n        echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n        ```\n\n    !!! example \"Disable the setup wizard\"\n        If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable:\n\n        ```shell\n        export UI_WIZARD=no\n        ```\n\n    And finally install BunkerWeb 1.6.4:\n\n    ```shell\n    curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\n    sudo apt update &amp;&amp; \\\n    sudo -E apt install -y --allow-downgrades bunkerweb=1.6.4\n    ```\n\n    To prevent upgrading NGINX and/or BunkerWeb packages when executing `apt upgrade`, you can use the following command:\n\n    ```shell\n    sudo apt-mark hold nginx bunkerweb\n    ```\n\n=== \"Ubuntu\"\n\n    The first step is to add NGINX official repository:\n\n    ```shell\n    sudo apt install -y curl gnupg2 ca-certificates lsb-release ubuntu-keyring &amp;&amp; \\\n    curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\n    echo \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n    | sudo tee /etc/apt/sources.list.d/nginx.list\n    ```\n\n    You should now be able to install NGINX 1.28.0:\n\n    ```shell\n    sudo apt update &amp;&amp; \\\n    sudo apt install -y --allow-downgrades nginx=1.28.0-1~$(lsb_release -cs)\n    ```\n\n    !!! warning \"Testing/dev version\"\n        If you use the `testing` or `dev` version, you will need to add the `force-bad-version` directive to your `/etc/dpkg/dpkg.cfg` file before installing BunkerWeb.\n\n        ```shell\n        echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n        ```\n\n    !!! example \"Disable the setup wizard\"\n        If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable:\n\n        ```shell\n        export UI_WIZARD=no\n        ```\n\n    And finally install BunkerWeb 1.6.4:\n\n    ```shell\n    curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\n    sudo apt update &amp;&amp; \\\n    sudo -E apt install -y --allow-downgrades bunkerweb=1.6.4\n    ```\n\n    To prevent upgrading NGINX and/or BunkerWeb packages when executing `apt upgrade`, you can use the following command:\n\n    ```shell\n    sudo apt-mark hold nginx bunkerweb\n    ```\n\n=== \"Fedora\"\n\n    !!! info \"Fedora Update Testing\"\n        If you can't find the NGINX version listed in the stable repository, you can enable the `updates-testing` repository:\n\n        ```shell\n        sudo dnf config-manager setopt updates-testing.enabled=1\n        ```\n\n    Fedora already provides NGINX 1.28.0 that we support\n\n    ```shell\n    sudo dnf install -y --allowerasing nginx-1.28.0\n    ```\n\n    !!! example \"Disable the setup wizard\"\n        If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable:\n\n        ```shell\n        export UI_WIZARD=no\n        ```\n\n    And finally install BunkerWeb 1.6.4:\n\n    ```shell\n    curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\n    sudo dnf makecache &amp;&amp; \\\n    sudo -E dnf install -y --allowerasing bunkerweb-1.6.4\n    ```\n\n    To prevent upgrading NGINX and/or BunkerWeb packages when executing `dnf upgrade`, you can use the following command:\n\n    ```shell\n    sudo dnf versionlock add nginx &amp;&amp; \\\n    sudo dnf versionlock add bunkerweb\n    ```\n\n=== \"RedHat\"\n\n    The first step is to add NGINX official repository. Create the following file at `/etc/yum.repos.d/nginx.repo`:\n\n    ```conf\n    [nginx-stable]\n    name=nginx stable repo\n    baseurl=http://nginx.org/packages/centos/$releasever/$basearch/\n    gpgcheck=1\n    enabled=1\n    gpgkey=https://nginx.org/keys/nginx_signing.key\n    module_hotfixes=true\n\n    [nginx-mainline]\n    name=nginx mainline repo\n    baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\n    gpgcheck=1\n    enabled=0\n    gpgkey=https://nginx.org/keys/nginx_signing.key\n    module_hotfixes=true\n    ```\n\n    You should now be able to install NGINX 1.28.0:\n\n    ```shell\n    sudo dnf install --allowerasing nginx-1.28.0\n    ```\n\n    !!! example \"Disable the setup wizard\"\n        If you don't want to use the setup wizard of the web UI when BunkerWeb is installed, export the following variable:\n\n        ```shell\n        export UI_WIZARD=no\n        ```\n\n    And finally install BunkerWeb 1.6.4:\n\n    ```shell\n    curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\n    sudo dnf check-update &amp;&amp; \\\n    sudo -E dnf install -y --allowerasing bunkerweb-1.6.4\n    ```\n\n    To prevent upgrading NGINX and/or BunkerWeb packages when executing `dnf upgrade`, you can use the following command:\n\n    ```shell\n    sudo dnf versionlock add nginx &amp;&amp; \\\n    sudo dnf versionlock add bunkerweb\n    ```\n\n### Configuration and service\n\nManual configuration of BunkerWeb is done by editing the `/etc/bunkerweb/variables.env` file:\n\n```conf\nMY_SETTING_1=value1\nMY_SETTING_2=value2\n...\n</code></pre> <p>When installed, BunkerWeb comes with three services <code>bunkerweb</code>, <code>bunkerweb-scheduler</code> and <code>bunkerweb-ui</code> that you can manage using <code>systemctl</code>.</p> <p>If you manually edit the BunkerWeb configuration using <code>/etc/bunkerweb/variables.env</code> a restart of the <code>bunkerweb-scheduler</code> service will be enough to generate and reload the configuration without any downtime. But depending on the case (such as changing listening ports) you might need to restart the <code>bunkerweb</code> service.</p>"},{"location":"integrations/#high-availability","title":"High availability","text":"<p>The scheduler can be detached from the BunkerWeb instance to provide high availability. In this case, the scheduler will be installed on a separate server and will be able to manage multiple BunkerWeb instances.</p> <p>Manager</p> <p>To install only the scheduler on a server, you can export the following variables before executing the BunkerWeb installation:</p> <pre><code>export MANAGER_MODE=yes\nexport UI_WIZARD=no\n</code></pre> <p>Alternatively, you can also export the following variables to only enable the scheduler:</p> <pre><code>export SERVICE_SCHEDULER=yes\nexport SERVICE_BUNKERWEB=no\nexport SERVICE_UI=no\n</code></pre> <p>Worker</p> <p>On another server, to install only BunkerWeb, you can export the following variables before executing the BunkerWeb installation:</p> <pre><code>export WORKER_MODE=yes\n</code></pre> <p>Alternatively, you can also export the following variables to only enable BunkerWeb:</p> <pre><code>export SERVICE_BUNKERWEB=yes\nexport SERVICE_SCHEDULER=no\nexport SERVICE_UI=no\n</code></pre> <p>Web UI</p> <p>The Web UI can be installed on a separate server to provide a dedicated interface for managing BunkerWeb instances. To install only the Web UI, you can export the following variables before executing the BunkerWeb installation:</p> <pre><code>export SERVICE_BUNKERWEB=no\nexport SERVICE_SCHEDULER=no\nexport SERVICE_UI=yes\n</code></pre>"},{"location":"integrations/#docker-autoconf","title":"Docker autoconf","text":"Docker autoconf integration <p>Docker integration</p> <p>The Docker autoconf integration is an \"evolution\" of the Docker one. Please read the Docker integration section first if needed.</p> <p>An alternative approach is available to address the inconvenience of recreating the container every time there is an update. By utilizing another image called autoconf, you can automate the real-time reconfiguration of BunkerWeb without the need for container recreation.</p> <p>To leverage this functionality, instead of defining environment variables for the BunkerWeb container, you can add labels to your web application containers. The autoconf image will then listen for Docker events and seamlessly handle the configuration updates for BunkerWeb.</p> <p>This \"automagical\" process simplifies the management of BunkerWeb configurations. By adding labels to your web application containers, you can delegate the reconfiguration tasks to autoconf without the manual intervention of container recreation. This streamlines the update process and enhances convenience.</p> <p>By adopting this approach, you can enjoy real-time reconfiguration of BunkerWeb without the hassle of container recreation, making it more efficient and user-friendly.</p> <p>Multisite mode</p> <p>The Docker autoconf integration implies the use of multisite mode. Please refer to the multisite section of the documentation for more information.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>To enable automated configuration updates, include an additional container called <code>bw-autoconf</code> in the stack. This container hosts the autoconf service, which manages dynamic configuration changes for BunkerWeb.</p> <p>To support this functionality, use a dedicated \"real\" database backend (e.g., MariaDB, MySQL, or PostgreSQL) for synchronized configuration storage. By integrating <code>bw-autoconf</code> and a suitable database backend, you establish the infrastructure for seamless automated configuration management in BunkerWeb.</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both containers\n  AUTOCONF_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # Mandatory label for the autoconf service to identify the BunkerWeb instance\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>Database in the <code>bw-db</code> network</p> <p>The database container is intentionally not included in the <code>bw-universe</code> network. It is used by the <code>bw-autoconf</code> and <code>bw-scheduler</code> containers rather than directly by BunkerWeb. Therefore, the database container is part of the <code>bw-db</code> network, which enhances security by making external access to the database more challenging. This deliberate design choice helps safeguard the database and strengthens the overall security perspective of the system.</p> <p>Using Docker in rootless mode</p> <p>If you are using Docker in rootless mode, you will need to replace the mount of the docker socket with the following value: <code>$XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock:ro</code>.</p>"},{"location":"integrations/#autoconf-services","title":"Autoconf services","text":"<p>Once the stack is set up, you will be able to create the web application container and add the settings as labels using the \"bunkerweb.\" prefix in order to automatically set up BunkerWeb:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.MY_SETTING_1=value1\"\n      - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"integrations/#namespaces","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's Autoconf stacks now support namespaces. This feature enables you to manage multiple \"clusters\" of BunkerWeb instances and services on the same Docker host. To take advantage of namespaces, simply set the <code>NAMESPACE</code> label on your services. Here's an example:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    labels:\n      - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the service\n      - \"bunkerweb.MY_SETTING_1=value1\"\n      - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bw-autoconf</code> service:</p> <pre><code>...\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    labels:\n      - \"bunkerweb.INSTANCE=yes\"\n      - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the BunkerWeb instance so the autoconf service can detect it\n  ...\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    environment:\n      ...\n      NAMESPACES: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> label to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#kubernetes","title":"Kubernetes","text":"Kubernetes integration <p>To automate the configuration of BunkerWeb instances in a Kubernetes environment, the autoconf service serves as an Ingress controller. It configures the BunkerWeb instances based on Ingress resources and also monitors other Kubernetes objects, such as ConfigMap, for custom configurations.</p> <p>For an optimal setup, it is recommended to define BunkerWeb as a DaemonSet, which ensures that a pod is created on all nodes, while the autoconf and scheduler are defined as single replicated Deployment.</p> <p>Given the presence of multiple BunkerWeb instances, it is necessary to establish a shared data store implemented as a Redis or Valkey service. This service will be utilized by the instances to cache and share data among themselves. Further information about the Redis/Valkey settings can be found here.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>Clustered database backends setup are out-of-the-scope of this documentation.</p> <p>Please ensure that the autoconf services have access to the Kubernetes API. It is recommended to utilize RBAC authorization for this purpose.</p> <p>Custom CA for Kubernetes API</p> <p>If you use a custom CA for your Kubernetes API, you can mount a bundle file containing your intermediate(s) and root certificates on the ingress controller and set the <code>KUBERNETES_SSL_CA_CERT</code> environment value to the path of the bundle inside the container. Alternatively, even if it's not recommended, you can disable certificate verification by setting the <code>KUBERNETES_SSL_VERIFY</code> environment variable of the ingress controller to <code>no</code> (default is <code>yes</code>).</p> <p>Additionally, it is crucial to set the <code>KUBERNETES_MODE</code> environment variable to <code>yes</code> when utilizing the Kubernetes integration. This variable is mandatory for proper functionality.</p>"},{"location":"integrations/#installation-methods","title":"Installation methods","text":""},{"location":"integrations/#using-helm-chart-recommended","title":"Using helm chart (recommended)","text":"<p>The recommended way to install Kubernetes is to use the Helm chart available at <code>https://repo.bunkerweb.io/charts</code>:</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\n</code></pre> <p>You can then use the bunkerweb helm chart from that repository:</p> <pre><code>helm install -f myvalues.yaml mybunkerweb bunkerweb/bunkerweb\n</code></pre> <p>The full list of values are listed in the charts/bunkerweb/values.yaml file of the bunkerity/bunkerweb-helm repository.</p>"},{"location":"integrations/#full-yaml-files","title":"Full YAML files","text":"<p>Instead of using the helm chart, you can also use the YAML boilerplates inside the misc/integrations folder of the GitHub repository. Please note that we highly recommend to use the helm chart instead.</p>"},{"location":"integrations/#ingress-resources","title":"Ingress resources","text":"<p>Once the BunkerWeb Kubernetes stack is successfully set up and operational (refer to the autoconf logs for detailed information), you can proceed with deploying web applications within the cluster and declaring your Ingress resource.</p> <p>It is important to note that the BunkerWeb settings need to be specified as annotations for the Ingress resource. For the domain part, please use the special value <code>bunkerweb.io</code>. By including the appropriate annotations, you can configure BunkerWeb accordingly for the Ingress resource.</p> <p>TLS support</p> <p>BunkerWeb ingress controller fully supports custom HTTPS certificates using the tls spec as shown in the example. Configuring solutions such as <code>cert-manager</code> to automatically generate tls secrets is out of the scope of this documentation.</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  annotations:\n    # Will be applied to all host in this ingress\n    bunkerweb.io/MY_SETTING: \"value\"\n    # Will only be applied to the www.example.com host\n    bunkerweb.io/www.example.com_MY_SETTING: \"value\"\nspec:\n  # TLS is optional, you can also use builtin Let's Encrypt for example\n  # tls:\n  #   - hosts:\n  #       - www.example.com\n  #     secretName: secret-example-tls\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-my-app\n                port:\n                  number: 8000\n...\n</code></pre>"},{"location":"integrations/#namespaces_1","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's autoconf stacks now support namespaces. This feature enables you to manage multiple clusters of BunkerWeb instances and services on the same Kubernetes cluster. To take advantage of namespaces, simply set the <code>namespace</code> metadata field on your BunkerWeb instances and services. Here's an example:</p> <pre><code>apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: bunkerweb\n  namespace: my-namespace # Set the namespace for the BunkerWeb instance\n...\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bunkerweb-controller</code> deployment:</p> <pre><code>...\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bunkerweb-controller\n  namespace: my-namespace # Set the namespace for the Controller\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: bunkerweb-controller\n  template:\n    metadata:\n      labels:\n        app: bunkerweb-controller\n    spec:\n      serviceAccountName: sa-bunkerweb\n      containers:\n        - name: bunkerweb-controller\n          image: bunkerity/bunkerweb-autoconf:1.6.4\n          imagePullPolicy: Always\n          env:\n            - name: NAMESPACES\n              value: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n            ...\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> annotation to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#ingress-class","title":"Ingress class","text":"<p>When installed using the official methods in the documentation, BunkerWeb comes with the following <code>IngressClass</code> definition:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  name: bunkerweb\nspec:\n  controller: bunkerweb.io/ingress-controller\n</code></pre> <p>In order to restrict the <code>Ingress</code> resources monitored by the ingress controller, you can set the <code>KUBERNETES_INGRESS_CLASS</code> environment variable with the value <code>bunkerweb</code>. Then, you can leverage the <code>ingressClassName</code> directive in your <code>Ingress</code> definitions:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  annotations:\n    bunkerweb.io/MY_SETTING: \"value\"\n    bunkerweb.io/www.example.com_MY_SETTING: \"value\"\nspec:\n  ingressClassName: bunkerweb\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-my-app\n                port:\n                  number: 8000\n</code></pre>"},{"location":"integrations/#custom-domain-name","title":"Custom domain name","text":"<p>If you use a custom domain name for your Kubernetes cluster different than the default <code>kubernetes.local</code> one, you can set the value using the <code>KUBERNETES_DOMAIN_NAME</code> environment variable on the scheduler container.</p>"},{"location":"integrations/#use-with-existing-ingress-controller","title":"Use with existing ingress controller","text":"<p>Keeping both existing ingress controller and BunkerWeb</p> <p>This is a use-case where you want to keep an existing ingress controller such as the nginx one. Typical traffic flow will be: Load Balancer =&gt; Ingress Controller =&gt; BunkerWeb =&gt; Application.</p> <p>nginx ingress controller install</p> <p>Install ingress nginx helm repo:</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\n</code></pre> <p>Install nginx ingress controller with default values (might not work on your own cluster out-of-the-box, please check the documentation):</p> <pre><code>helm install --namespace nginx --create-namespace nginx ingress-nginx/ingress-nginx\n</code></pre> <p>Extract IP address of LB:</p> <pre><code>kubectl get svc nginx-ingress-nginx-controller -n nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre> <p>Setup DNS entries to IP of LB (e.g <code>bunkerweb</code> subdomain for BW UI and <code>myapp</code> for application):</p> <pre><code>$ nslookup bunkerweb.example.com\nServer:         172.26.112.1\nAddress:        172.26.112.1#53\n\nNon-authoritative answer:\nName:   bunkerweb.example.com\nAddress: 1.2.3.4\n$ nslookup myapp.example.com\nServer:         172.26.112.1\nAddress:        172.26.112.1#53\n\nNon-authoritative answer:\nName:   myapp.example.com\nAddress: 1.2.3.4\n</code></pre> <p>BunkerWeb install</p> <p>Install BunkerWeb helm repo:</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\nhelm repo update\n</code></pre> <p>Create <code>values.yaml</code> file:</p> <pre><code># Here we will setup the values needed to setup BunkerWeb behind an existing ingress controller\n# Traffic flow with BW: LB =&gt; existing Ingress Controller =&gt; BunkerWeb =&gt; Service\n# Traffic flow without BW: LB =&gt; existing Ingress Controller =&gt; Service\n\n# Global settings\nsettings:\n  misc:\n    # Replace with your DNS resolver\n    # to get it: kubectl exec in a random pod then cat /etc/resolv.conf\n    # if you have an IP as nameserver then do a reverse DNS lookup: nslookup &lt;IP&gt;\n    # most of the time it's coredns.kube-system.svc.cluster.local or kube-dns.kube-system.svc.cluster.local\n    dnsResolvers: \"kube-dns.kube-system.svc.cluster.local\"\n  kubernetes:\n    # We only consider Ingress resources with ingressClass bunkerweb to avoid conflicts with existing ingress controller\n    ingressClass: \"bunkerweb\"\n    # Optional: you can choose namespace(s) where BunkerWeb will listen for Ingress/ConfigMap changes\n    # Default (blank value) is all namespaces\n    namespaces: \"\"\n\n# Override the bunkerweb-external service type to ClusterIP\n# Since we don't need to expose it to the outside world\n# We will use the existing ingress controller to route traffic to BunkerWeb\nservice:\n  type: ClusterIP\n\n# BunkerWeb settings\nbunkerweb:\n  tag: 1.6.4\n\n# Scheduler settings\nscheduler:\n  tag: 1.6.4\n  extraEnvs:\n    # Enable real IP module to get real IP of clients\n    - name: USE_REAL_IP\n      value: \"yes\"\n\n# Controller settings\ncontroller:\n  tag: 1.6.4\n\n# UI settings\nui:\n  tag: 1.6.4\n</code></pre> <p>Install BunkerWeb with custom values:</p> <pre><code>helm install --namespace bunkerweb --create-namespace -f values.yaml bunkerweb bunkerweb/bunkerweb\n</code></pre> <p>Check logs and wait until everything is ready.</p> <p>Web UI install</p> <p>Setup the following ingress (assuming nginx controller is installed):</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ui-bunkerweb\n  # Replace with your namespace of BW if needed\n  namespace: bunkerweb\n  annotations:\n    # HTTPS is mandatory for web UI even if traffic is internal\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\n    # We must set SNI so BW can serve the right vhost\n    # Replace with your domain\n    nginx.ingress.kubernetes.io/proxy-ssl-name: \"bunkerweb.example.com\"\n    nginx.ingress.kubernetes.io/proxy-ssl-server-name: \"on\"\nspec:\n  # Only served by nginx controller and not BW\n  ingressClassName: nginx\n  # Uncomment and edit if you want to use your own certificate\n  # tls:\n  # - hosts:\n  #   - bunkerweb.example.com\n  #   secretName: tls-secret\n  rules:\n  # Replace with your domain\n  - host: bunkerweb.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            # Created by Helm chart\n            name: bunkerweb-external\n            port:\n              # Using HTTPS port is mandatory for UI\n              number: 443\n</code></pre> <p>And you can now proceed to the setup wizard by browsing to <code>https://bunkerweb.example.com/setup</code>.</p> <p>Protecting existing application</p> <p>First of all, you will need to go to Global Config, select the SSL plugin and then disable the Auto redirect HTTP to HTTPS. Please note that you only need to do it one time.</p> <p>Let's assume that you have an application in the <code>myapp</code> namespace which is accessible using the <code>myapp-service</code> service on port <code>5000</code>.</p> <p>You will need to add a new service on the web UI and fill the required information:</p> <ul> <li>Server name: the public facing domain of your application (e.g. <code>myapp.example.com</code>)</li> <li>SSL/TLS: your ingress controller takes care of that part so don't enable it on BunkerWeb since traffic is internal within the cluster</li> <li>Reverse proxy host: the full URL of your application within the cluster (e.g. <code>http://myapp-service.myapp.svc.cluster.local:5000</code>)</li> </ul> <p>Once the new service has been added, you can now declare an Ingress resource for that service and route it to the BunkerWeb service on HTTP port:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp\n  # Replace with your namespace of BW if needed\n  namespace: bunkerweb\nspec:\n  # Only served by nginx controller and not BW\n  ingressClassName: nginx\n  # Uncomment and edit if you want to use your own certificate\n  # tls:\n  # - hosts:\n  #   - myapp.example.com\n  #   secretName: tls-secret\n  rules:\n  # Replace with your domain\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            # Created by Helm chart\n            name: bunkerweb-external\n            port:\n              number: 80\n</code></pre> <p>You can visit <code>http(s)://myapp.example.com</code>, which is now protected with BunkerWeb \ud83d\udee1\ufe0f</p>"},{"location":"integrations/#swarm","title":"Swarm","text":"Docker Swarm integration <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>PRO support</p> <p>If you need Swarm support, please contact us at contact@bunkerity.com or via the contact form.</p> <p>Docker autoconf</p> <p>The Swarm integration is similar to the Docker autoconf one (but with services instead of containers). Please read the Docker autoconf integration section first if needed.</p> <p>To enable automatic configuration of BunkerWeb instances, the autoconf service requires access to the Docker API. This service listens for Docker Swarm events, such as service creation or deletion, and seamlessly configures the BunkerWeb instances in real-time without any downtime. It also monitors other Swarm objects, such as configs, for custom configurations.</p> <p>Similar to the Docker autoconf integration, configuration for web services is defined using labels that start with the bunkerweb  prefix.</p> <p>For an optimal setup, it is recommended to schedule the BunkerWeb service as a global service on all nodes, while the autoconf, scheduler, and Docker API proxy services should be scheduled as single replicated services. Please note that the Docker API proxy service needs to be scheduled on a manager node unless you configure it to use a remote API (which is not covered in the documentation).</p> <p>Since multiple instances of BunkerWeb are running, a shared data store implemented as a Redis or Valkey service must be created. These instances will utilize the Redis/Valkey service to cache and share data. Further details regarding the Redis/Valkey settings can be found here.</p> <p>As for the database volume, the documentation does not specify a specific approach. Choosing either a shared folder or a specific driver for the database volume is dependent on your unique use-case and is left as an exercise for the reader.</p> <p>Database backend</p> <p>Please be aware that our instructions assume you are using MariaDB as the default database backend, as configured by the <code>DATABASE_URI</code> setting. However, we understand that you may prefer to utilize alternative backends for your Docker integration. If that is the case, rest assured that other database backends are still possible. See docker-compose files in the misc/integrations folder of the repository for more information.</p> <p>Clustered database backends setup are out-of-the-scope of this documentation.</p> <p>Here is the stack boilerplate that you can deploy using <code>docker stack deploy</code>:</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  SWARM_MODE: \"yes\"\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # QUIC\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\" # Mandatory label for the autoconf service to identify the BunkerWeb instance\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    environment:\n      SWARM_MODE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # The Docker socket\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\n  bw-redis:\n    image: redis:7-alpine\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre> <p>Swarm mandatory setting</p> <p>Please note that the <code>SWARM_MODE: \"yes\"</code> environment variable is mandatory when using the Swarm integration.</p>"},{"location":"integrations/#swarm-services","title":"Swarm services","text":"<p>Once the BunkerWeb Swarm stack is set up and running (see autoconf and scheduler logs for more information), you will be able to deploy web applications in the cluster and use labels to dynamically configure BunkerWeb:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.MY_SETTING_1=value1\"\n        - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"integrations/#namespaces_2","title":"Namespaces","text":"<p>Starting from version <code>1.6.0</code>, BunkerWeb's Autoconf stacks now support namespaces. This feature enables you to manage multiple \"clusters\" of BunkerWeb instances and services on the same Docker host. To take advantage of namespaces, simply set the <code>NAMESPACE</code> label on your services. Here's an example:</p> <pre><code>services:\n  myapp:\n    image: mywebapp:4.2\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n        - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the service\n        - \"bunkerweb.MY_SETTING_1=value1\"\n        - \"bunkerweb.MY_SETTING_2=value2\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Namespace behavior</p> <p>By default all Autoconf stacks listen to all namespaces. If you want to restrict a stack to specific namespaces, you can set the <code>NAMESPACES</code> environment variable in the <code>bw-autoconf</code> service:</p> <pre><code>...\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ...\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n        - \"bunkerweb.NAMESPACE=my-namespace\" # Set the namespace for the BunkerWeb instance\n  ...\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    environment:\n      NAMESPACES: \"my-namespace my-other-namespace\" # Only listen to these namespaces\n      ...\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == worker\"\n...\n</code></pre> <p>Keep in mind that the <code>NAMESPACES</code> environment variable is a space-separated list of namespaces.</p> <p>Namespace specifications</p> <p>There can only be one database and one Scheduler per namespace. If you try to create multiple databases or Schedulers in the same namespace, the configurations will end up conflicting with each other.</p> <p>The Scheduler doesn't need the <code>NAMESPACE</code> label to work properly. It will only need the <code>DATABASE_URI</code> setting properly configured so that it can access the same database as the autoconf service.</p>"},{"location":"integrations/#microsoft-azure","title":"Microsoft Azure","text":"Azure integration <p>Recommended VM size</p> <p>Please be aware while you choose the SKU of the VM. You must select a SKU compatible with Gen2 VM and we recommend starting at B2s or Ds2 series for optimal use.</p> <p>You can easily deploy BunkerWeb on your Azure subscription in several ways:</p> <ul> <li>Azure CLI in Cloud Shell</li> <li>Azure ARM Template</li> <li>Azure portal via the Marketplace</li> </ul> Cloud ShellARM TemplateMarketplace <p>Create a resource group. Replace value <code>RG_NAME</code></p> <pre><code>az group create --name \"RG_NAME\" --location \"LOCATION\"\n</code></pre> <p>Create a VM with <code>Standard_B2s</code> SKU in the location of the resource group. Replace values <code>RG_NAME</code>, <code>VM_NAME</code>, <code>VNET_NAME</code>, <code>SUBNET_NAME</code></p> <pre><code>az vm create --resource-group \"RG_NAME\" --name \"VM_NAME\" --image bunkerity:bunkerweb:bunkerweb:latest --accept-term --generate-ssh-keys --vnet-name \"VNET_NAME\" --size Standard_B2s --subnet \"SUBNET_NAME\"\n</code></pre> <p>Full command. Replace values <code>RG_NAME</code>, <code>VM_NAME</code>, <code>LOCATION</code>, <code>HOSTNAME</code>, <code>USERNAME</code>, <code>PUBLIC_IP</code>, <code>VNET_NAME</code>, <code>SUBNET_NAME</code>, <code>NSG_NAME</code></p> <pre><code>az vm create --resource-group \"RG_NAME\" --name \"VM_NAME\" --location \"LOCATION\" --image bunkerity:bunkerweb:bunkerweb:latest --accept-term --generate-ssh-keys --computer-name \"HOSTNAME\" --admin-username \"USERNAME\" --public-ip-address \"PUBLIC_IP\" --public-ip-address-allocation Static --size Standard_B2s --public-ip-sku Standard --os-disk-delete-option Delete --nic-delete-option Delete --vnet-name \"VNET_NAME\" --subnet \"SUBNET_NAME\" --nsg \"NSG_NAME\"\n</code></pre> <p>Permissions requirement</p> <p>To deploy a ARM template, you need write access on the resources you're deploying and access to all operations on the Microsoft.Resources/deployments resource type. To deploy a virtual machine, you need Microsoft.Compute/virtualMachines/write and Microsoft.Resources/deployments/* permissions. The what-if operation has the same permission requirements.</p> <p>Deploy the ARM Template:</p> <p></p> <p>Login in Azure portal.</p> <p>Get BunkerWeb from the Create resource menu.</p> <p>You can also go through the Marketplace.</p> <p>You can access the setup wizard by browsing the <code>https://your-ip-address/setup</code> URI of your virtual machine.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>BunkerWeb comes with a plugin system making it possible to easily add new features. Once a plugin is installed, you can manage it using additional settings defined by the plugin.</p>"},{"location":"plugins/#official-plugins","title":"Official plugins","text":"<p>Here is the list of \"official\" plugins that we maintain (see the bunkerweb-plugins repository for more information) :</p> Name Version Description Link ClamAV 1.9 Automatically scans uploaded files with the ClamAV antivirus engine and denies the request when a file is detected as malicious. bunkerweb-plugins/clamav Coraza 1.9 Inspect requests using the Coraza WAF (alternative of ModSecurity). bunkerweb-plugins/coraza Discord 1.9 Send security notifications to a Discord channel using a Webhook. bunkerweb-plugins/discord Slack 1.9 Send security notifications to a Slack channel using a Webhook. bunkerweb-plugins/slack VirusTotal 1.9 Automatically scans uploaded files with the VirusTotal API and denies the request when a file is detected as malicious. bunkerweb-plugins/virustotal WebHook 1.9 Send security notifications to a custom HTTP endpoint using a  Webhook. bunkerweb-plugins/webhook"},{"location":"plugins/#how-to-use-a-plugin","title":"How to use a plugin","text":""},{"location":"plugins/#automatic","title":"Automatic","text":"<p>If you want to quickly install external plugins, you can use the <code>EXTERNAL_PLUGIN_URLS</code> setting. It takes a list of URLs separated by spaces, each pointing to a compressed (zip format) archive containing one or more plugins.</p> <p>You can use the following value if you want to automatically install the official plugins : <code>EXTERNAL_PLUGIN_URLS=https://github.com/bunkerity/bunkerweb-plugins/archive/refs/tags/v1.9.zip</code></p>"},{"location":"plugins/#manual","title":"Manual","text":"<p>The first step is to install the plugin by placing its files inside the corresponding <code>plugins</code> data folder. The procedure depends on your integration :</p> DockerDocker autoconfSwarmKubernetesLinux <p>When using the Docker integration, plugins must be placed in the volume mounted on <code>/data/plugins</code> in the scheduler container.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p ./bw-data/plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* ./bw-data/plugins\n</code></pre> <p>Using local folder for persistent data</p> <p>The scheduler runs as an unprivileged user with UID 101 and GID 101 inside the container. The reason behind this is security : in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges. But there is a downside : if you use a local folder for the persistent data, you will need to set the correct permissions so the unprivileged user can write data to it. Something like that should do the trick :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nchown root:101 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Alternatively, if the folder already exists :</p> <pre><code>chown -R root:101 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>If you are using Docker in rootless mode or podman, UIDs and GIDs in the container will be mapped to different ones in the host. You will first need to check your initial subuid and subgid :</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100) :</p> <pre><code>mkdir bw-data &amp;&amp; \\\nsudo chgrp 100100 bw-data &amp;&amp; \\\nchmod 770 bw-data\n</code></pre> <p>Or if the folder already exists :</p> <pre><code>sudo chgrp -R 100100 bw-data &amp;&amp; \\\nchmod -R 770 bw-data\n</code></pre> <p>Then you can mount the volume when starting your Docker stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    volumes:\n      - ./bw-data:/data\n...\n</code></pre> <p>When using the Docker autoconf integration, plugins must be placed in the volume mounted on <code>/data/plugins</code> in the scheduler container.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p ./bw-data/plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* ./bw-data/plugins\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R 101:101 ./bw-data\n</code></pre> <p>Then you can mount the volume when starting your Docker stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    volumes:\n      - ./bw-data:/data\n...\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>When using the Swarm integration, plugins must be placed in the volume mounted on <code>/data/plugins</code> in the scheduler container.</p> <p>Swarm volume</p> <p>Configuring a Swarm volume that will persist when the scheduler service is running on different nodes is not covered is in this documentation. We will assume that you have a shared folder mounted on <code>/shared</code> across all nodes.</p> <p>The first thing to do is to create the plugins folder :</p> <pre><code>mkdir -p /shared/bw-plugins\n</code></pre> <p>Then, you can drop the plugins of your choice into that folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* /shared/bw-plugins\n</code></pre> <p>Because the scheduler runs as an unprivileged user with UID and GID 101, you will need to edit the permissions :</p> <pre><code>chown -R 101:101 /shared/bw-plugins\n</code></pre> <p>Then you can mount the volume when starting your Swarm stack :</p> <pre><code>services:\n...\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    volumes:\n      - /shared/bw-plugins:/data/plugins\n...\n</code></pre> <p>When using the Kubernetes integration, plugins must be placed in the volume mounted on <code>/data/plugins</code> in the scheduler container.</p> <p>The first thing to do is to declare a PersistentVolumeClaim that will contain our plugins data :</p> <pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc-bunkerweb-plugins\nspec:\n  accessModes:\n    - ReadWriteOnce\nresources:\n  requests:\n    storage: 5Gi\n</code></pre> <p>You can now add the volume mount and an init container to automatically provision the volume :</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bunkerweb-scheduler\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: bunkerweb-scheduler\n  template:\n    metadata:\n      labels:\n        app: bunkerweb-scheduler\n    spec:\n      serviceAccountName: sa-bunkerweb\n      containers:\n        - name: bunkerweb-scheduler\n          image: bunkerity/bunkerweb-scheduler:1.6.4\n          imagePullPolicy: Always\n          env:\n            - name: KUBERNETES_MODE\n              value: \"yes\"\n            - name: \"DATABASE_URI\"\n              value: \"mariadb+pymysql://bunkerweb:changeme@svc-bunkerweb-db:3306/db\"\n          volumeMounts:\n            - mountPath: \"/data/plugins\"\n              name: vol-plugins\n      initContainers:\n        - name: bunkerweb-scheduler-init\n          image: alpine/git\n          command: [\"/bin/sh\", \"-c\"]\n          args: [\"git clone https://github.com/bunkerity/bunkerweb-plugins /data/plugins &amp;&amp; chown -R 101:101 /data/plugins\"]\n          volumeMounts:\n            - mountPath: \"/data/plugins\"\n              name: vol-plugins\n      volumes:\n        - name: vol-plugins\n          persistentVolumeClaim:\n            claimName: pvc-bunkerweb-plugins\n</code></pre> <p>When using the Linux integration, plugins must be written to the <code>/etc/bunkerweb/plugins</code> folder :</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb-plugins &amp;&amp; \\\ncp -rp ./bunkerweb-plugins/* /etc/bunkerweb/plugins &amp;&amp; \\\nchown -R nginx:nginx /etc/bunkerweb/plugins\n</code></pre>"},{"location":"plugins/#writing-a-plugin","title":"Writing a plugin","text":""},{"location":"plugins/#structure","title":"Structure","text":"<p>Existing plugins</p> <p>If the documentation is not enough, you can have a look at the existing source code of official plugins and the core plugins (already included in BunkerWeb but they are plugins, technically speaking).</p> <p>What a plugin structure looks like: <pre><code>plugin /\n    confs / conf_type / conf_name.conf\n    ui / actions.py\n         hooks.py\n         template.html\n         blueprints / &lt;blueprint_file(s)&gt;\n              templates / &lt;blueprint_template(s)&gt;\n    jobs / my-job.py\n    templates / my-template.json\n          my-template / configs / conf_type / conf_name.conf\n    plugin.lua\n    plugin.json\n</code></pre></p> <ul> <li> <p>conf_name.conf : Add custom NGINX configurations (as Jinja2 templates).</p> </li> <li> <p>actions.py : Script to execute on the Flask server. This script runs in a Flask context, giving you access to libraries and utilities like <code>jinja2</code> and <code>requests</code>.</p> </li> <li> <p>hooks.py : Custom Python file that contains flask's hooks and will be executed when the plugin is loaded.</p> </li> <li> <p>template.html : Custom plugin page accessed via the UI.</p> </li> <li> <p>blueprints folder (within ui):   This folder is used to override existing Flask blueprints or create new ones. Inside, you can include blueprint files and an optional templates subfolder for blueprint-specific templates.</p> </li> <li> <p>jobs py file : Custom Python files executed as jobs by the scheduler.</p> </li> <li> <p>my-template.json : Add custom templates to override the default values of settings and apply custom configurations easily.</p> </li> <li> <p>plugin.lua : Code executed on NGINX using the NGINX LUA module.</p> </li> <li> <p>plugin.json : Metadata, settings, and job definitions for your plugin.</p> </li> </ul>"},{"location":"plugins/#getting-started","title":"Getting started","text":"<p>The first step is to create a folder that will contain the plugin :</p> <pre><code>mkdir myplugin &amp;&amp; \\\ncd myplugin\n</code></pre>"},{"location":"plugins/#metadata","title":"Metadata","text":"<p>A file named plugin.json and written at the root of the plugin folder must contain metadata about the plugin. Here is an example :</p> <pre><code>{\n  \"id\": \"myplugin\",\n  \"name\": \"My Plugin\",\n  \"description\": \"Just an example plugin.\",\n  \"version\": \"1.0\",\n  \"stream\": \"partial\",\n  \"settings\": {\n    \"DUMMY_SETTING\": {\n      \"context\": \"multisite\",\n      \"default\": \"1234\",\n      \"help\": \"Here is the help of the setting.\",\n      \"id\": \"dummy-id\",\n      \"label\": \"Dummy setting\",\n      \"regex\": \"^.*$\",\n      \"type\": \"text\"\n    }\n  },\n  \"jobs\": [\n    {\n      \"name\": \"my-job\",\n      \"file\": \"my-job.py\",\n      \"every\": \"hour\"\n    }\n  ]\n}\n</code></pre> <p>Here are the details of the fields :</p> Field Mandatory Type Description <code>id</code> yes string Internal ID for the plugin : must be unique among other plugins (including \"core\" ones) and contain only lowercase chars. <code>name</code> yes string Name of your plugin. <code>description</code> yes string Description of your plugin. <code>version</code> yes string Version of your plugin. <code>stream</code> yes string Information about stream support : <code>no</code>, <code>yes</code> or <code>partial</code>. <code>settings</code> yes dict List of the settings of your plugin. <code>jobs</code> no list List of the jobs of your plugin. <p>Each setting has the following fields (the key is the ID of the settings used in a configuration) :</p> Field Mandatory Type Description <code>context</code> yes string Context of the setting : <code>multisite</code> or <code>global</code>. <code>default</code> yes string The default value of the setting. <code>help</code> yes string Help text about the plugin (shown in web UI). <code>id</code> yes string Internal ID used by the web UI for HTML elements. <code>label</code> yes string Label shown by the web UI. <code>regex</code> yes string The regex used to validate the value provided by the user. <code>type</code> yes string The type of the field : <code>text</code>, <code>check</code>, <code>select</code> or <code>password</code>. <code>multiple</code> no string Unique ID to group multiple settings with numbers as suffix. <code>select</code> no list List of possible string values when <code>type</code> is <code>select</code>. <p>Each job has the following fields :</p> Field Mandatory Type Description <code>name</code> yes string Name of the job. <code>file</code> yes string Name of the file inside the jobs folder. <code>every</code> yes string Job scheduling frequency : <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code> or <code>once</code> (no frequency, only once before (re)generating the configuration)."},{"location":"plugins/#configurations","title":"Configurations","text":"<p>You can add custom NGINX configurations by adding a folder named confs with content similar to the custom configurations. Each subfolder inside the confs will contain jinja2 templates that will be generated and loaded at the corresponding context (<code>http</code>, <code>server-http</code>, <code>default-server-http</code>, <code>stream</code>, <code>server-stream</code>, <code>modsec</code>, <code>modsec-crs</code>, <code>crs-plugins-before</code> and <code>crs-plugins-after</code>).</p> <p>Here is an example for a configuration template file inside the confs/server-http folder named example.conf :</p> <pre><code>location /setting {\n    default_type 'text/plain';\n    content_by_lua_block {\n        ngx.say('{{ DUMMY_SETTING }}')\n    }\n}\n</code></pre> <p><code>{{ DUMMY_SETTING }}</code> will be replaced by the value of the <code>DUMMY_SETTING</code> chosen by the user of the plugin.</p>"},{"location":"plugins/#templates","title":"Templates","text":"<p>Check the templates documentation for more information.</p>"},{"location":"plugins/#lua","title":"LUA","text":""},{"location":"plugins/#main-script","title":"Main script","text":"<p>Under the hood, BunkerWeb is using the NGINX LUA module to execute code within NGINX. Plugins that need to execute code must provide a lua file at the root directory of the plugin folder using the <code>id</code> value of plugin.json as its name. Here is an example named myplugin.lua :</p> <pre><code>local class     = require \"middleclass\"\nlocal plugin    = require \"bunkerweb.plugin\"\nlocal utils     = require \"bunkerweb.utils\"\n\n\nlocal myplugin = class(\"myplugin\", plugin)\n\n\nfunction myplugin:initialize(ctx)\n    plugin.initialize(self, \"myplugin\", ctx)\n    self.dummy = \"dummy\"\nend\n\nfunction myplugin:init()\n    self.logger:log(ngx.NOTICE, \"init called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:set()\n    self.logger:log(ngx.NOTICE, \"set called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:access()\n    self.logger:log(ngx.NOTICE, \"access called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log()\n    self.logger:log(ngx.NOTICE, \"log called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log_default()\n    self.logger:log(ngx.NOTICE, \"log_default called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:preread()\n    self.logger:log(ngx.NOTICE, \"preread called\")\n    return self:ret(true, \"success\")\nend\n\nfunction myplugin:log_stream()\n    self.logger:log(ngx.NOTICE, \"log_stream called\")\n    return self:ret(true, \"success\")\nend\n\nreturn myplugin\n</code></pre> <p>The declared functions are automatically called during specific contexts. Here are the details of each function :</p> Function Context Description Return value <code>init</code> init_by_lua Called when NGINX just started or received a reload order. the typical use case is to prepare any data that will be used by your plugin. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>set</code> set_by_lua Called before each request received by the server.The typical use case is for computing before access phase. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>access</code> access_by_lua Called on each request received by the server. The typical use case is to do the security checks here and deny the request if needed. <code>ret</code>, <code>msg</code>,<code>status</code>,<code>redirect</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li><li><code>status</code> (number) : interrupt current process and return HTTP status</li><li><code>redirect</code> (URL) : if set will redirect to given URL</li></ul> <code>log</code> log_by_lua Called when a request has finished (and before it gets logged to the access logs). The typical use case is to make stats or compute counters for example. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>log_default</code> log_by_lua Same as <code>log</code> but only called on the default server. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul> <code>preread</code> preread_by_lua Similar to the <code>access</code> function but for stream mode. <code>ret</code>, <code>msg</code>,<code>status</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li><li><code>status</code> (number) : interrupt current process and return status</li></ul> <code>log_stream</code> log_by_lua Similar to the <code>log</code> function but for stream mode. <code>ret</code>, <code>msg</code><ul><li><code>ret</code> (boolean) : true if no error or else false</li><li><code>msg</code> (string) : success or error message</li></ul>"},{"location":"plugins/#libraries","title":"Libraries","text":"<p>All directives from NGINX LUA module and are available and NGINX stream LUA module. On top of that, you can use the LUA libraries included within BunkerWeb : see this script for the complete list.</p> <p>If you need additional libraries, you can put them in the root folder of the plugin and access them by prefixing them with your plugin ID. Here is an example file named mylibrary.lua :</p> <pre><code>local _M = {}\n\n_M.dummy = function ()\n    return \"dummy\"\nend\n\nreturn _M\n</code></pre> <p>And here is how you can use it from the myplugin.lua file :</p> <pre><code>local mylibrary = require \"myplugin.mylibrary\"\n\n...\n\nmylibrary.dummy()\n\n...\n</code></pre>"},{"location":"plugins/#helpers","title":"Helpers","text":"<p>Some helpers modules provide common helpful helpers :</p> <ul> <li><code>self.variables</code> : allows to access and store plugins' attributes</li> <li><code>self.logger</code> : print logs</li> <li><code>bunkerweb.utils</code> : various useful functions</li> <li><code>bunkerweb.datastore</code> : access the global shared data on one instance (key/value store)</li> <li><code>bunkerweb.clusterstore</code> : access a Redis data store shared between BunkerWeb instances (key/value store)</li> </ul> <p>To access the functions, you first need to require the modules :</p> <pre><code>local utils       = require \"bunkerweb.utils\"\nlocal datastore   = require \"bunkerweb.datastore\"\nlocal clustestore = require \"bunkerweb.clustertore\"\n</code></pre> <p>Retrieve a setting value :</p> <pre><code>local myvar = self.variables[\"DUMMY_SETTING\"]\nif not myvar then\n    self.logger:log(ngx.ERR, \"can't retrieve setting DUMMY_SETTING\")\nelse\n    self.logger:log(ngx.NOTICE, \"DUMMY_SETTING = \" .. value)\nend\n</code></pre> <p>Store something in the local cache :</p> <pre><code>local ok, err = self.datastore:set(\"plugin_myplugin_something\", \"somevalue\")\nif not ok then\n    self.logger:log(ngx.ERR, \"can't save plugin_myplugin_something into datastore : \" .. err)\nelse\n    self.logger:log(ngx.NOTICE, \"successfully saved plugin_myplugin_something into datastore\")\nend\n</code></pre> <p>Check if an IP address is global :</p> <pre><code>local ret, err = utils.ip_is_global(ngx.ctx.bw.remote_addr)\nif ret == nil then\n    self.logger:log(ngx.ERR, \"error while checking if IP \" .. ngx.ctx.bw.remote_addr .. \" is global or not : \" .. err)\nelseif not ret then\n    self.logger:log(ngx.NOTICE, \"IP \" .. ngx.ctx.bw.remote_addr .. \" is not global\")\nelse\n    self.logger:log(ngx.NOTICE, \"IP \" .. ngx.ctx.bw.remote_addr .. \" is global\")\nend\n</code></pre> <p>More examples</p> <p>If you want to see the full list of available functions, you can have a look at the files present in the lua directory of the repository.</p>"},{"location":"plugins/#jobs","title":"Jobs","text":"<p>BunkerWeb uses an internal job scheduler for periodic tasks like renewing certificates with certbot, downloading blacklists, downloading MMDB files, ... You can add tasks of your choice by putting them inside a subfolder named jobs and listing them in the plugin.json metadata file. Don't forget to add the execution permissions for everyone to avoid any problems when a user is cloning and installing your plugin.</p>"},{"location":"plugins/#plugin-page","title":"Plugin page","text":"<p>Everything related to the web UI is located inside the subfolder ui as we seen in the previous structure section..</p>"},{"location":"plugins/#prerequisites","title":"Prerequisites","text":"<p>When you want to create a plugin page, you need two files :</p> <ul> <li> <p>template.html that will be accessible with a GET /plugins/&lt;plugin_id&gt;.</p> </li> <li> <p>actions.py where you can add some scripting and logic with a POST /plugins/&lt;plugin_id&gt;. Notice that this file need a function with the same name as the plugin to work. This file is needed even if the function is empty.</p> </li> </ul>"},{"location":"plugins/#basic-example","title":"Basic example","text":"<p>Jinja 2 template</p> <p>The template.html file is a Jinja2 template, please refer to the Jinja2 documentation if needed.</p> <p>We can put aside the actions.py file and start only using the template on a GET situation. The template can access app context and libs, so you can use Jinja, request or flask utils.</p> <p>For example, you can get the request arguments in your template like this :</p> <pre><code>&lt;p&gt;request args : {{ request.args.get() }}.&lt;/p&gt;\n</code></pre>"},{"location":"plugins/#actionspy","title":"Actions.py","text":"<p>CSRF Token</p> <p>Please note that every form submission is protected via a CSRF token, you will need to include the following snippet into your forms : <pre><code>&lt;input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\" /&gt;\n</code></pre></p> <p>You can power-up your plugin page with additional scripting with the actions.py file when sending a POST /plugins/&lt;plugin_id&gt;.</p> <p>You have two functions by default in actions.py :</p> <p>pre_render function</p> <p>This allows you to retrieve data when you GET the template, and to use the data with the pre_render variable available in Jinja to display content more dynamically.</p> <pre><code>def pre_render(**kwargs)\n  return &lt;pre_render_data&gt;\n</code></pre> <p>BunkerWeb will send you this type of response :</p> <pre><code>return jsonify({\"status\": \"ok|ko\", \"code\" : XXX, \"data\": &lt;pre_render_data&gt;}), 200\n</code></pre> <p>&lt;plugin_id&gt; function</p> <p>This allows you to retrieve data when you make a POST from the template endpoint, which must be used in AJAX.</p> <pre><code>def myplugin(**kwargs)\n  return &lt;plugin_id_data&gt;\n</code></pre> <p>BunkerWeb will send you this type of response :</p> <pre><code>return jsonify({\"message\": \"ok\", \"data\": &lt;plugin_id_data&gt;}), 200\n</code></pre> <p>What you can access from action.py</p> <p>Here are the arguments that are passed and access on action.py functions:</p> <pre><code>function(app=app, args=request.args.to_dict() or request.json or None)\n</code></pre> <p>Python libraries</p> <p>In addition, you can use Python libraries that are already available like : <code>Flask</code>, <code>Flask-Login</code>, <code>Flask-WTF</code>, <code>beautifulsoup4</code>, <code>docker</code>, <code>Jinja2</code>, <code>python-magic</code> and <code>requests</code>. To see the full list, you can have a look at the Web UI requirements.txt. If you need external libraries, you can install them inside the ui folder of your plugin and then use the classical import directive.</p> <p>Some examples</p> <ul> <li>Retrieve form submitted data</li> </ul> <pre><code>from flask import request\n\ndef myplugin(**kwargs) :\n    my_form_value = request.form[\"my_form_input\"]\n  return my_form_value\n</code></pre> <ul> <li>Access app config</li> </ul> <p>action.py <pre><code>from flask import request\n\ndef pre_render(**kwargs) :\n    config = kwargs['app'].config[\"CONFIG\"].get_config(methods=False)\n  return config\n</code></pre></p> <p>template <pre><code>&lt;!-- metadata + config --&gt;\n&lt;div&gt;{{ pre_render }}&lt;/div&gt;\n</code></pre></p>"},{"location":"plugins/#hookspy","title":"Hooks.py","text":"<p>This documentation outlines the lifecycle hooks used for managing different stages of a request within the application. Each hook is associated with a specific phase.</p> before_requestafter_requestteardown_requestcontext_processor <p>These hooks are executed before processing an incoming request. They are typically used for pre-processing tasks such as authentication, validation, or logging.</p> <p>If the hook returns a response object, Flask will skip the request handling and return the response directly. This can be useful for short-circuiting the request processing pipeline.</p> <p>Example:</p> <pre><code>from flask import request, Response\n\ndef before_request():\n    print(\"Before-request: Validating request...\", flush=True)\n    # Perform authentication, validation, or logging here\n    if not is_valid_request(request): # We are in the app context\n        return Response(\"Invalid request!\", status=400)\n\ndef is_valid_request(request):\n    # Dummy validation logic\n    return \"user\" in request\n</code></pre> <p>These hooks that run after the request has been processed. They are ideal for post-processing tasks such as cleanup, additional logging, or modifying the response before it is sent back.</p> <p>They receive the response object as an argument and can modify it before returning it. The first after_request hook to return a response will be used as the final response.</p> <p>Example:</p> <pre><code>from flask import request\n\ndef after_request(response):\n    print(\"After-request: Logging response...\", flush=True)\n    # Perform logging, cleanup, or response modifications here\n    log_response(response)\n    return response\n\ndef log_response(response):\n    # Dummy logging logic\n    print(\"Response logged:\", response, flush=True)\n</code></pre> <p>These hooks are invoked when the request context is being torn down. These hooks are used for releasing resources or handling errors that occurred during the request lifecycle.</p> <p>Example:</p> <pre><code>def teardown_request(error=None):\n    print(\"Teardown-request: Cleaning up resources...\", flush=True)\n    # Perform cleanup, release resources, or handle errors here\n    if error:\n        handle_error(error)\n    cleanup_resources()\n\ndef handle_error(error):\n    # Dummy error handling logic\n    print(\"Error encountered:\", error, flush=True)\n\ndef cleanup_resources():\n    # Dummy resource cleanup logic\n    print(\"Resources have been cleaned up.\", flush=True)\n</code></pre> <p>These hooks are used to inject additional context into templates or views. They enrich the runtime context by passing common data (like user information or configuration settings) to the templates.</p> <p>If a context processor returns a dictionary, the keys and values will be added to the context for all templates. This allows you to share data across multiple views or templates.</p> <p>Example:</p> <pre><code>def context_processor() -&gt; dict:\n    print(\"Context-processor: Injecting context data...\", flush=True)\n    # Return a dictionary containing context data for templates/views\n    return {\n        \"current_user\": \"John Doe\",\n        \"app_version\": \"1.0.0\",\n        \"feature_flags\": {\"new_ui\": True}\n    }\n</code></pre> <p>This lifecycle hook design provides a modular and systematic approach to managing various aspects of a request's lifecycle:</p> <ul> <li>Modularity: Each hook is responsible for a distinct phase, ensuring that concerns are separated.</li> <li>Maintainability: Developers can easily add, modify, or remove hook implementations without impacting other parts of the request lifecycle.</li> <li>Extensibility: The framework is flexible, allowing for additional hooks or enhancements as application requirements evolve.</li> </ul> <p>By clearly defining the responsibilities of each hook and their associated logging prefixes, the system ensures that each stage of request processing is transparent and manageable.</p>"},{"location":"plugins/#blueprints","title":"Blueprints","text":"<p>In Flask, blueprints serve as a modular way to organize related components\u2014such as views, templates, and static files\u2014within your application. They allow you to group functionality logically and can be used to create new sections of your app or override existing ones.</p>"},{"location":"plugins/#creating-a-blueprint","title":"Creating a Blueprint","text":"<p>To define a blueprint, you create an instance of the <code>Blueprint</code> class, specifying its name and import path. You then define routes and views associated with this blueprint.</p> <p>Example: Defining a New Blueprint</p> <pre><code>from os.path import dirname\nfrom flask import Blueprint, render_template\n\n# Define the blueprint\nmy_blueprint = Blueprint('my_blueprint', __name__, template_folder=dirname(__file__) + '/templates') # The template_folder is set to avoid conflicts with the original blueprint\n\n# Define a route within the blueprint\n@my_blueprint.route('/my_blueprint')\ndef my_blueprint_page():\n    return render_template('my_blueprint.html')\n</code></pre> <p>In this example, a blueprint named <code>my_blueprint</code> is created, and a route <code>/my_blueprint</code> is defined within it.</p>"},{"location":"plugins/#overriding-an-existing-blueprint","title":"Overriding an Existing Blueprint","text":"<p>Blueprints can also override existing ones to modify or extend functionality. To do this, ensure that the new blueprint has the same name as the one you're overriding and register it after the original.</p> <p>Example: Overriding an Existing Blueprint</p> <pre><code>from os.path import dirname\nfrom flask import Flask, Blueprint\n\n# Original blueprint\ninstances = Blueprint('instances', __name__, template_folder=dirname(__file__) + '/templates') # The template_folder is set to avoid conflicts with the original blueprint\n\n@instances.route('/instances')\ndef override_instances():\n    return \"My new instances page\"\n</code></pre> <p>In this scenario, accessing the URL <code>/instances</code> will display \"My new instances page\" because the <code>instances</code> blueprint, registered last, overrides the original <code>instances</code> blueprint.</p> <p>About overriding</p> <p>Be cautious when overriding existing blueprints, as it can impact the behavior of the application. Ensure that the changes align with the application's requirements and do not introduce unexpected side effects.</p> <p>All existing routes will be removed from he original blueprint, so you will need to re-implement them if needed.</p>"},{"location":"plugins/#naming-conventions","title":"Naming Conventions","text":"<p>Important</p> <p>Ensure the blueprint\u2019s name matches the blueprint variable name, else it will not be considered as a valid blueprint and will not be registered.</p> <p>For consistency and clarity, it's advisable to follow these naming conventions:</p> <ul> <li> <p>Blueprint Names: Use short, all-lowercase names. Underscores can be used for readability, e.g., <code>user_auth</code>.</p> </li> <li> <p>File Names: Match the filename to the blueprint name, ensuring it's all lowercase with underscores as needed, e.g., <code>user_auth.py</code>.</p> </li> </ul> <p>This practice aligns with Python's module naming conventions and helps maintain a clear project structure.</p> <p>Example: Blueprint and File Naming</p> <pre><code>plugin /\n    ui / blueprints / user_auth.py\n                      templates / user_auth.html\n</code></pre> <p>In this structure, <code>user_auth.py</code> contains the <code>user_auth</code> blueprint, and <code>user_auth.html</code> is the associated template, adhering to the recommended naming conventions.</p>"},{"location":"professional-services/","title":"Professional services","text":""},{"location":"professional-services/#why-should-i-get-professional-services","title":"Why should I get professional services?","text":"<p>Since BunkerWeb is a free (as in freedom) software, you have the right to use it freely as long as you respect the AGPLv3 license.</p> <p>You can also upgrade BunkerWeb to the PRO version at any time. By doing so, you will get an enhanced experience to assist you in the security of your web services. Our goal is to help you focus on your business needs. The PRO version is updated regularly and we try our best to gather feedback from enterprises to include the needed features.</p> <p>But dedicating time to a specific technology may not be easy depending on your business priorities. Not to mention that cybersecurity is a complex domain where being both judge and jury is not recommended.</p> <p>Getting professional services in addition to the open-source or PRO version is the ideal solution to cover your business needs. You can focus on your top priorities and rely on a trusted partner when it comes to web security.</p> <p>Please note that professional services are directly offered by Bunkerity, the company maintaining the BunkerWeb project, through our BunkerWeb Panel online platform.</p>"},{"location":"professional-services/#which-professional-services-do-you-offer","title":"Which professional services do you offer?","text":"<p>We offer technical support and consulting around the BunkerWeb solution. By using this service, we will assist you on the technical issues (installation, configuration, false positive, ...). We can also offer custom SLA depending on your needs.</p> <p>According to your needs you have the choice between \"one time\" and subscription offers.</p>"},{"location":"professional-services/#how-can-i-get-more-information","title":"How can I get more information?","text":"<p>You will find more information by visiting the BunkerWeb Panel, our dedicated platform for professional services.</p> <p>Don't hesitate to contact us if you have any questions, we will be more than happy to respond to your needs.</p>"},{"location":"quickstart-guide/","title":"Quickstart guide","text":"<p>Prerequisites</p> <p>We expect that you're already familiar with the core concepts and have followed the integrations instructions for your environment.</p> <p>This quickstart guide assumes that BunkerWeb is accessible from the Internet and that you have configured at least two domains: one for the web UI and one for your web service.</p> <p>System requirements</p> <p>The minimum recommended specifications for BunkerWeb are a machine with 2 (v)CPUs and 8 GB of RAM. Please note that this should be sufficient for testing environments or setups with very few services.</p> <p>For production environments with many services to protect, we recommend at least 4 (v)CPUs and 16 GB of RAM. Resources should be adjusted based on your use case, network traffic, and potential DDoS attacks you may face.</p> <p>It is highly recommended to enable global loading of CRS rules (by setting the <code>USE_MODSECURITY_GLOBAL_CRS</code> parameter to <code>yes</code>) if you are in environments with limited RAM or in production with many services. More details can be found in the advanced usages section of the documentation.</p> <p>This quickstart guide will help you to quickly install BunkerWeb and secure a web service using the web User Interface.</p> <p>Protecting existing web applications already accessible with the HTTP(S) protocol is the main goal of BunkerWeb: it will act as a classical reverse proxy with extra security features.</p> <p>See the examples folder of the repository to get real-world examples.</p>"},{"location":"quickstart-guide/#basic-setup","title":"Basic setup","text":"All-in-oneLinuxDockerDocker autoconfKubernetesSwarm <p>To deploy the all-in-one container, run the following command:</p> <pre><code>docker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>By default, the container exposes:</p> <ul> <li>8080/tcp for HTTP</li> <li>8443/tcp for HTTPS</li> <li>8443/udp for QUIC</li> <li>7000/tcp for the web UI access without BunkerWeb in front (not recommended for production)</li> </ul> <p>The All-In-One image comes with several built-in services, which can be controlled using environment variables. See the All-In-One (AIO) Image section of the integrations page for more details.</p> <p>Please ensure that you have NGINX 1.28.0 installed before installing BunkerWeb. For all distributions, except Fedora, it is mandatory to use prebuilt packages from the official NGINX repository. Compiling NGINX from source or using packages from different repositories will not work with the official prebuilt packages of BunkerWeb. However, you have the option to build BunkerWeb from source.</p> Debian Bookworm/TrixieUbuntuFedoraRedHat <p>The first step is to add the official NGINX repository:</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/debian `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.28.0:</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.28.0-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>And finally install BunkerWeb 1.6.4:</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.4\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command:</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>The first step is to add the official NGINX repository:</p> <pre><code>sudo apt install -y curl gnupg2 ca-certificates lsb-release ubuntu-keyring &amp;&amp; \\\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n| sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null &amp;&amp; \\\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\nhttp://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n| sudo tee /etc/apt/sources.list.d/nginx.list\n</code></pre> <p>You should now be able to install NGINX 1.28.0:</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y nginx=1.28.0-1~$(lsb_release -cs)\n</code></pre> <p>Testing/dev version</p> <p>If you use the <code>testing</code> or <code>dev</code> version, you need to add the <code>force-bad-version</code> directive to your <code>/etc/dpkg/dpkg.cfg</code> file before installing BunkerWeb.</p> <pre><code>echo \"force-bad-version\" | sudo tee -a /etc/dpkg/dpkg.cfg\n</code></pre> <p>And finally install BunkerWeb 1.6.4:</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.deb.sh | sudo bash &amp;&amp; \\\nsudo apt update &amp;&amp; \\\nsudo -E apt install -y bunkerweb=1.6.4\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>apt upgrade</code>, you can use the following command:</p> <pre><code>sudo apt-mark hold nginx bunkerweb\n</code></pre> <p>Fedora Update Testing</p> <p>If you cannot find the NGINX version listed in the stable repository, you can enable the <code>updates-testing</code> repository:</p> <pre><code>sudo dnf config-manager setopt updates-testing.enabled=1\n</code></pre> <p>Fedora already provides NGINX 1.28.0 that we support</p> <pre><code>sudo dnf install -y nginx-1.28.0\n</code></pre> <p>And finally install BunkerWeb 1.6.4:</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf makecache &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.4\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command:</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre> <p>The first step is to add the NGINX official repository. Create the following file at <code>/etc/yum.repos.d/nginx.repo</code>:</p> <pre><code>[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n</code></pre> <p>You should now be able to install NGINX 1.28.0:</p> <pre><code>sudo dnf install nginx-1.28.0\n</code></pre> <p>And finally install BunkerWeb 1.6.4:</p> <pre><code>curl -s https://repo.bunkerweb.io/install/script.rpm.sh | sudo bash &amp;&amp; \\\nsudo dnf check-update &amp;&amp; \\\nsudo -E dnf install -y bunkerweb-1.6.4\n</code></pre> <p>To prevent upgrading NGINX and/or BunkerWeb packages when executing <code>dnf upgrade</code>, you can use the following command:</p> <pre><code>sudo dnf versionlock add nginx &amp;&amp; \\\nsudo dnf versionlock add bunkerweb\n</code></pre> <p>Here is the full docker compose file that you can use; please note that we will later connect the web service to the <code>bw-services</code> network:</p> <pre><code>x-bw-env: &amp;bw-env\n  # We use an anchor to avoid repeating the same settings for both services\n  API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    # This is the name that will be used to identify the instance in the Scheduler\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      &lt;&lt;: *bw-env # We use the anchor to avoid repeating the same settings for all services\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"\"\n      MULTISITE: \"yes\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    # We set the max allowed packet size to avoid issues with large queries\n    command: --max-allowed-packet=67108864\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  redis: # Redis service for the persistence of reports/bans/stats\n    image: redis:7-alpine\n    command: &gt;\n      redis-server\n      --maxmemory 256mb\n      --maxmemory-policy allkeys-lru\n      --save 60 1000\n      --appendonly yes\n    volumes:\n      - redis-data:/data\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-data:\n  bw-storage:\n  redis-data:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24 # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>Here is the full docker compose file that you can use; please note that we will later connect the web service to the <code>bw-services</code> network:</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # We set the instance label to allow the autoconf to detect the instance\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    depends_on:\n      - bw-docker\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    # We set the max allowed packet size to avoid issues with large queries\n    command: --max-allowed-packet=67108864\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  redis: # Redis service for the persistence of reports/bans/stats\n    image: redis:7-alpine\n    command: &gt;\n      redis-server\n      --maxmemory 256mb\n      --maxmemory-policy allkeys-lru\n      --save 60 1000\n      --appendonly yes\n    volumes:\n      - redis-data:/data\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-data:\n  bw-storage:\n  redis-data:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>The recommended way to install Kubernetes is to use the Helm chart available at <code>https://repo.bunkerweb.io/charts</code>:</p> <pre><code>helm repo add bunkerweb https://repo.bunkerweb.io/charts\n</code></pre> <p>You can then use the <code>bunkerweb</code> helm chart from that repository:</p> <pre><code>helm install mybw bunkerweb/bunkerweb --namespace bunkerweb --create-namespace\n</code></pre> <p>Once installed, you can get the IP address of the <code>LoadBalancer</code> to set up your domains:</p> <pre><code>kubectl -n bunkerweb get svc mybw-external -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>Here is the full docker compose stack file that you can use; please note that we will later connect the web service to the <code>bw-services</code> network:</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  SWARM_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # For QUIC / HTTP3 support\n    environment:\n      SWARM_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n      UI_HOST: \"http://bw-ui:7000\" # Change it if needed\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    # We set the max allowed packet size to avoid issues with large queries\n    command: --max-allowed-packet=67108864\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-redis:\n    image: redis:7-alpine\n    networks:\n      - bw-universe\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre>"},{"location":"quickstart-guide/#complete-the-setup-wizard","title":"Complete the setup wizard","text":"<p>Accessing the setup wizard</p> <p>You can access the setup wizard by browsing the <code>https://your-fqdn-or-ip-addresss/setup</code> URI of your server.</p>"},{"location":"quickstart-guide/#create-an-administrator-account","title":"Create an Administrator account","text":"<p>You should see a setup page just like this one:</p> <p> </p> Setup Wizard landing page <p>Once you're on the setup page, you can enter the administrator username, email, and password and click on the \"Next\" button.</p>"},{"location":"quickstart-guide/#configure-the-reverse-proxy-https-and-other-advanced-settings","title":"Configure the Reverse Proxy, HTTPS and other advanced settings","text":"Basic setupAdvanced setup <p>The next step will ask you to enter the server name (domain/FQDN) that the web UI will use.</p> <p>You can also choose to enable Let's Encrypt</p> <p> Setup Wizard step 2 </p> <p>The next step will ask you to enter the server name (domain/FQDN) that the web UI will use.</p> <p>You can also choose to enable Let's Encrypt.</p> <p>If you expand the <code>Advanced settings</code> section, you can also configure the following options:</p> <ul> <li>Reverse Proxy: Tweak the Reverse Proxy settings for your administrator interface (e.g., if you want to use a path).</li> <li>Real IP: Configure the Real IP settings to properly identify the client's IP address (e.g., if you are behind a load balancer or a CDN).</li> <li>Custom Certificate: Upload a custom TLS certificate if you don't want to use Let's Encrypt.</li> </ul> <p> Setup Wizard step 2 (advanced) </p>"},{"location":"quickstart-guide/#pro-activation","title":"PRO activation","text":"<p>If you have a PRO license, you can activate it by entering your license key in the <code>Upgrade to PRO</code> section. This will enable the PRO features of BunkerWeb.</p> <p> </p> Setup Wizard PRO step"},{"location":"quickstart-guide/#overview-of-your-settings","title":"Overview of your settings","text":"<p>The last step will give you an overview of the settings you've entered. You can click on the \"Setup\" button to complete the setup.</p> <p> </p> Setup Wizard final step"},{"location":"quickstart-guide/#accessing-the-web-interface","title":"Accessing the web interface","text":"<p>You can now access the web interface by browsing to the domain you configured in the previous step and the URI if you changed it (default is <code>https://your-domain/</code>).</p> <p> </p> Web interface login page <p>You can now log in with the administrator account you created during the setup wizard.</p> <p> </p> Web interface home"},{"location":"quickstart-guide/#creating-a-new-service","title":"Creating a new service","text":"Web UIAll-in-oneLinux variables.env fileDockerDocker autoconf labelsKubernetes annotationsSwarm labels <p>You can create a new service by navigating to the <code>Services</code> section of the web interface and clicking on the <code>\u2795 Create new service</code> button.</p> <p>There are multiple ways of creating a service using the web interface:</p> <ul> <li>The Easy mode will guide you through the process of creating a new service.</li> <li>The Advanced mode will allow you to configure the service with more options.</li> <li>The Raw mode will allow you to enter the configuration directly like editing the <code>variables.env</code> file.</li> </ul> <p>Draft service</p> <p>You can create a draft service to save your progress and come back to it later. Just click on the <code>\ud83c\udf10 Online</code> button to toggle the service to draft mode.</p> Easy modeAdvanced modeRaw mode <p>In this mode, you can choose among the available templates and fill in the required fields.</p> <p> Web interface create service easy </p> <ul> <li>To navigate between the different plugins, you can use the dropdown menu on the top left corner of the page.</li> <li>Once you've selected the template, you can fill in the required fields and follow the instructions to create the service.</li> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>In this mode, you can configure the service with more options while seeing all the available settings from all the different plugins.</p> <p> Web interface create service advanced </p> <ul> <li>To navigate between the different plugins, you can use the dropdown menu on the top left corner of the page.</li> <li>Each setting has a small piece of information that will help you understand what it does.</li> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>In this mode, you can enter the configuration directly like editing the <code>variables.env</code> file.</p> <p> Web interface create service RAW </p> <ul> <li>Once you're done configuring the service, you can click on the <code>\ud83d\udcbe Save</code> button to save the configuration.</li> </ul> <p>\ud83d\ude80 Once you've saved the configuration, you should see your new service in the list of services.</p> <p> Web interface services page </p> <p>If you wish to edit the service, you can click on the service name or the <code>\ud83d\udcdd Edit</code> button.</p> <p>When using the All-in-One image, new services are configured by adding environment variables to the <code>docker run</code> command for the <code>bunkerweb-aio</code> container. If the container is already running, you must stop and remove it, then re-run it with the updated environment variables.</p> <p>Suppose you want to protect an application <code>myapp</code> (running in another container and accessible as <code>http://myapp:8080</code> from BunkerWeb) and make it available at <code>www.example.com</code>. You would add or modify the following environment variables in your <code>docker run</code> command:</p> <pre><code># First, stop and remove the existing container if it's running:\n# docker stop bunkerweb-aio\n# docker rm bunkerweb-aio\n\n# Then, re-run the bunkerweb-aio container with additional/updated environment variables:\ndocker run -d \\\n  --name bunkerweb-aio \\\n  -v bw-storage:/data \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n  # --- Add/modify these environment variables for your new service ---\n  -e MULTISITE=yes \\\n  -e SERVER_NAME=\"www.example.com\" \\\n  -e \"www.example.com_USE_REVERSE_PROXY=yes\" \\\n  -e \"www.example.com_REVERSE_PROXY_HOST=http://myapp:8080\" \\\n  -e \"www.example.com_REVERSE_PROXY_URL=/\" \\\n  # --- Include any other existing environment variables for UI, Redis, CrowdSec, etc. ---\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre> <p>Your application container (<code>myapp</code>) and the <code>bunkerweb-aio</code> container must be on the same Docker network for BunkerWeb to reach it using the hostname <code>myapp</code>.</p> <p>Network Setup Example: <pre><code># 1. Create a custom Docker network (if you haven't already):\ndocker network create my-app-network\n\n# 2. Run your application container on this network:\ndocker run -d --name myapp --network my-app-network your-app-image\n\n# 3. Add --network my-app-network to the bunkerweb-aio docker run command:\ndocker run -d \\\n  --name bunkerweb-aio \\\n  --network my-app-network \\\n  -v bw-storage:/data \\\n  -p 80:8080/tcp \\\n  -p 443:8443/tcp \\\n  -p 443:8443/udp \\\n#   ... (all other relevant environment variables as shown in the main example above) ...\n  bunkerity/bunkerweb-all-in-one:1.6.4\n</code></pre></p> <p>Make sure to replace <code>myapp</code> with the actual name or IP of your application container and <code>http://myapp:8080</code> with its correct address and port.</p> <p>We assume that you followed the Basic setup and that the Linux integration is running on your machine.</p> <p>You can create a new service by editing the <code>variables.env</code> file located in the <code>/etc/bunkerweb/</code> directory.</p> <pre><code>nano /etc/bunkerweb/variables.env\n</code></pre> <p>You can then add the following configuration:</p> <pre><code>SERVER_NAME=www.example.com\nMULTISITE=yes\nwww.example.com_USE_REVERSE_PROXY=yes\nwww.example.com_REVERSE_PROXY_URL=/\nwww.example.com_REVERSE_PROXY_HOST=http://myapp:8080\n</code></pre> <p>You can then reload the <code>bunkerweb-scheduler</code> service to apply the changes.</p> <pre><code>systemctl reload bunkerweb-scheduler\n</code></pre> <p>We assume that you followed the Basic setup and that the Docker integration is running on your machine.</p> <p>You must have a network called <code>bw-services</code> so that you can connect your existing application and configure BunkerWeb:</p> <pre><code>services:\n  myapp:\n      image: nginxdemos/nginx-hello\n      networks:\n        - bw-services\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>After that, you can manually add the service in the docker compose file that you created in the previous step:</p> <pre><code>...\n\nservices:\n  ...\n  bw-scheduler:\n    ...\n    environment:\n      ...\n      SERVER_NAME: \"www.example.com\" # When using the Docker integration, you can set the configuration directly in the scheduler, make sure to set the correct domain name\n      MULTISITE: \"yes\" # Enable multisite mode so you can add multiple services\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/\"\n      www.example.com_REVERSE_PROXY_HOST: \"http://myapp:8080\"\n      ...\n</code></pre> <p>You can then restart the <code>bw-scheduler</code> service to apply the changes.</p> <pre><code>docker compose down bw-scheduler &amp;&amp; docker compose up -d bw-scheduler\n</code></pre> <p>We assume that you followed the Basic setup and that the Docker autoconf integration is running on your machine.</p> <p>You must have a network called <code>bw-services</code> so that you can connect your existing application and configure BunkerWeb with labels:</p> <pre><code>services:\n  myapp:\n      image: nginxdemos/nginx-hello\n      networks:\n        - bw-services\n      labels:\n        - \"bunkerweb.SERVER_NAME=www.example.com\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_URL=/\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=http://myapp:8080\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre> <p>Doing so will automatically create a new service with the provided labels as configuration.</p> <p>We assume that you followed the Basic setup and that the Kubernetes stack is running on your cluster.</p> <p>Let's assume that you have a typical Deployment with a Service to access the web application from within the cluster:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app\n  template:\n    metadata:\n      labels:\n        app: app\n    spec:\n      containers:\n      - name: app\n        image: nginxdemos/nginx-hello\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-app\nspec:\n  selector:\n    app: app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n</code></pre> <p>Here is the corresponding Ingress definition to serve and protect the web application:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress\n  annotations:\n    bunkerweb.io/DUMMY_SETTING: \"value\"\nspec:\n  rules:\n    - host: www.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n              name: svc-app\n              port:\n                number: 80\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>We assume that you followed the Basic setup and that the Swarm stack is running on your cluster and connected to a network called <code>bw-services</code> so that you can connect your existing application and configure BunkerWeb with labels:</p> <pre><code>services:\n  myapp:\n    image: nginxdemos/nginx-hello\n    networks:\n      - bw-services\n    deploy:\n      placement:\n        constraints:\n          - \"node.role==worker\"\n      labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://myapp:8080\"\n\nnetworks:\n  bw-services:\n    external: true\n    name: bw-services\n</code></pre>"},{"location":"quickstart-guide/#going-further","title":"Going further","text":"<p>Congratulations! You have just installed BunkerWeb and secured your first web service. Please note that BunkerWeb offers much more, both in terms of security and integrations with other systems and solutions. Here's a list of resources and actions that may help you continue to deepen your knowledge of the solution:</p> <ul> <li>Join the Bunker community: Discord, LinkedIn, GitHub, X</li> <li>Check out the official blog</li> <li>Explore advanced use cases in the documentation</li> <li>Get in touch with us to discuss your organization's needs</li> </ul>"},{"location":"settings/","title":"Settings","text":"<p>This section contains the full list of settings supported by BunkerWeb. If you are not yet familiar with BunkerWeb, you should first read the concepts section of the documentation. Please follow the instructions for your own integration on how to apply the settings.</p> <p>As a general rule when multisite mode is enabled, if you want to apply settings with multisite context to a specific server, you will need to add the primary (first) server name as a prefix like <code>www.example.com_USE_ANTIBOT=captcha</code> or <code>myapp.example.com_USE_GZIP=yes</code> for example.</p> <p>When settings are considered as \"multiple\", it means that you can have multiple groups of settings for the same feature by adding numbers as suffix like <code>REVERSE_PROXY_URL_1=/subdir</code>, <code>REVERSE_PROXY_HOST_1=http://myhost1</code>, <code>REVERSE_PROXY_URL_2=/anotherdir</code>, <code>REVERSE_PROXY_HOST_2=http://myhost2</code>, ... for example.</p>"},{"location":"settings/#global-settings","title":"Global settings","text":"<p>STREAM support </p> Setting Default Context Multiple Description <code>IS_LOADING</code> <code>no</code> global no Internal use : set to yes when BW is loading. <code>NGINX_PREFIX</code> <code>/etc/nginx/</code> global no Where nginx will search for configurations. <code>HTTP_PORT</code> <code>8080</code> global yes HTTP port number which bunkerweb binds to. <code>HTTPS_PORT</code> <code>8443</code> global yes HTTPS port number which bunkerweb binds to. <code>MULTISITE</code> <code>no</code> global no Multi site activation. <code>SERVER_NAME</code> <code>www.example.com</code> multisite no List of the virtual hosts served by bunkerweb. <code>WORKER_PROCESSES</code> <code>auto</code> global no Number of worker processes. <code>WORKER_RLIMIT_NOFILE</code> <code>2048</code> global no Maximum number of open files for worker processes. <code>WORKER_CONNECTIONS</code> <code>1024</code> global no Maximum number of connections per worker. <code>LOG_FORMAT</code> <code>$host $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"</code> global no The format to use for access logs. <code>LOG_LEVEL</code> <code>notice</code> global no The level to use for error logs. <code>DNS_RESOLVERS</code> <code>127.0.0.11</code> global no DNS addresses of resolvers to use. <code>WORKERLOCK_MEMORY_SIZE</code> <code>48k</code> global no Size of lua_shared_dict for initialization workers <code>DATASTORE_MEMORY_SIZE</code> <code>64m</code> global no Size of the internal datastore. <code>CACHESTORE_MEMORY_SIZE</code> <code>64m</code> global no Size of the internal cachestore. <code>CACHESTORE_IPC_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (ipc). <code>CACHESTORE_MISS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (miss). <code>CACHESTORE_LOCKS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal cachestore (locks). <code>USE_API</code> <code>yes</code> global no Activate the API to control BunkerWeb. <code>API_HTTP_PORT</code> <code>5000</code> global no Listen port number for the API. <code>API_LISTEN_IP</code> <code>0.0.0.0</code> global no Listen IP address for the API. <code>API_SERVER_NAME</code> <code>bwapi</code> global no Server name (virtual host) for the API. <code>API_WHITELIST_IP</code> <code>127.0.0.0/8</code> global no List of IP/network allowed to contact the API. <code>AUTOCONF_MODE</code> <code>no</code> global no Enable Autoconf Docker integration. <code>SWARM_MODE</code> <code>no</code> global no Enable Docker Swarm integration. <code>KUBERNETES_MODE</code> <code>no</code> global no Enable Kubernetes integration. <code>SERVER_TYPE</code> <code>http</code> multisite no Server type : http or stream. <code>LISTEN_STREAM</code> <code>yes</code> multisite no Enable listening for non-ssl (passthrough). <code>LISTEN_STREAM_PORT</code> <code>1337</code> multisite yes Listening port for non-ssl (passthrough). <code>LISTEN_STREAM_PORT_SSL</code> <code>4242</code> multisite yes Listening port for ssl (passthrough). <code>USE_TCP</code> <code>yes</code> multisite no TCP listen (stream). <code>USE_UDP</code> <code>no</code> multisite no UDP listen (stream). <code>USE_IPV6</code> <code>no</code> global no Enable IPv6 connectivity. <code>IS_DRAFT</code> <code>no</code> multisite no Internal use : set to yes when the service is in draft mode. <code>TIMERS_LOG_LEVEL</code> <code>debug</code> global no Log level for timers. <code>BUNKERWEB_INSTANCES</code> <code>127.0.0.1</code> global no List of BunkerWeb instances separated with spaces (format : fqdn-or-ip:5000 http://fqdn-or-ip:5000) <code>USE_TEMPLATE</code> multisite no Config template to use that will override the default values of specific settings. <code>SECURITY_MODE</code> <code>block</code> multisite no Defines the response to threats: \"detect\" to monitor and log, or \"block\" to prevent access and log incidents. <code>SERVER_NAMES_HASH_BUCKET_SIZE</code> global no Value for the server_names_hash_bucket_size directive."},{"location":"settings/#anti-ddos-pro","title":"Anti DDoS  (PRO)","text":"<p>STREAM support </p> <p>Provides enhanced protection against DDoS attacks by analyzing and filtering suspicious traffic.</p> Setting Default Context Multiple Description <code>USE_ANTIDDOS</code> <code>no</code> global no Enable or disable anti DDoS protection to mitigate high traffic spikes. <code>ANTIDDOS_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of in-memory storage for DDoS metrics (e.g., 10M, 500k). <code>ANTIDDOS_THRESHOLD</code> <code>100</code> global no Maximum suspicious requests allowed from a single IP before blocking. <code>ANTIDDOS_WINDOW_TIME</code> <code>10</code> global no Time window (seconds) to detect abnormal request patterns. <code>ANTIDDOS_STATUS_CODES</code> <code>429 403 444</code> global no HTTP status codes treated as suspicious for DDoS analysis. <code>ANTIDDOS_DISTINCT_IP</code> <code>5</code> global no Minimum distinct IP count before enabling anti DDoS measures."},{"location":"settings/#antibot","title":"Antibot","text":"<p>STREAM support </p> <p>Bot detection by using a challenge.</p> Setting Default Context Multiple Description <code>USE_ANTIBOT</code> <code>no</code> multisite no Activate antibot feature. <code>ANTIBOT_URI</code> <code>/challenge</code> multisite no Unused URI that clients will be redirected to to solve the challenge. <code>ANTIBOT_TIME_RESOLVE</code> <code>60</code> multisite no Maximum time (in seconds) clients have to resolve the challenge. Once this time has passed, a new challenge will be generated. <code>ANTIBOT_TIME_VALID</code> <code>86400</code> multisite no Maximum validity time of solved challenges. Once this time has passed, clients will need to resolve a new one. <code>ANTIBOT_RECAPTCHA_SCORE</code> <code>0.7</code> multisite no Minimum score required for reCAPTCHA challenge (Only compatible with reCAPTCHA v3). <code>ANTIBOT_RECAPTCHA_SITEKEY</code> multisite no Sitekey for reCAPTCHA challenge. <code>ANTIBOT_RECAPTCHA_SECRET</code> multisite no Secret for reCAPTCHA challenge. <code>ANTIBOT_HCAPTCHA_SITEKEY</code> multisite no Sitekey for hCaptcha challenge. <code>ANTIBOT_HCAPTCHA_SECRET</code> multisite no Secret for hCaptcha challenge. <code>ANTIBOT_TURNSTILE_SITEKEY</code> multisite no Sitekey for Turnstile challenge. <code>ANTIBOT_TURNSTILE_SECRET</code> multisite no Secret for Turnstile challenge. <code>ANTIBOT_MCAPTCHA_SITEKEY</code> multisite no Sitekey for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_SECRET</code> multisite no Secret for mCaptcha challenge. <code>ANTIBOT_MCAPTCHA_URL</code> <code>https://demo.mcaptcha.org</code> multisite no Domain to use for mCaptcha challenge."},{"location":"settings/#auth-basic","title":"Auth basic","text":"<p>STREAM support </p> <p>Enforce login before accessing a resource or the whole site using HTTP basic auth method.</p> Setting Default Context Multiple Description <code>USE_AUTH_BASIC</code> <code>no</code> multisite no Use HTTP basic auth <code>AUTH_BASIC_LOCATION</code> <code>sitewide</code> multisite no URL of the protected resource or sitewide value. <code>AUTH_BASIC_USER</code> <code>changeme</code> multisite yes Username <code>AUTH_BASIC_PASSWORD</code> <code>changeme</code> multisite yes Password <code>AUTH_BASIC_TEXT</code> <code>Restricted area</code> multisite no Text to display"},{"location":"settings/#backup","title":"Backup","text":"<p>STREAM support </p> <p>Backup your data to a custom location. Ensure the safety and availability of your important files by creating regular backups.</p> Setting Default Context Multiple Description <code>USE_BACKUP</code> <code>yes</code> global no Enable or disable the backup feature <code>BACKUP_SCHEDULE</code> <code>daily</code> global no The frequency of the backup (daily, weekly or monthly) <code>BACKUP_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_DIRECTORY</code> <code>/var/lib/bunkerweb/backups</code> global no The directory where the backup will be stored"},{"location":"settings/#backup-s3-pro","title":"Backup S3  (PRO)","text":"<p>STREAM support </p> <p>Automatically backup your data to an S3 bucket</p> Setting Default Context Multiple Description <code>USE_BACKUP_S3</code> <code>no</code> global no Enable or disable the S3 backup feature <code>BACKUP_S3_SCHEDULE</code> <code>daily</code> global no The frequency of the backup <code>BACKUP_S3_ROTATION</code> <code>7</code> global no The number of backups to keep <code>BACKUP_S3_ENDPOINT</code> global no The S3 endpoint <code>BACKUP_S3_BUCKET</code> global no The S3 bucket <code>BACKUP_S3_DIR</code> global no The S3 directory <code>BACKUP_S3_REGION</code> global no The S3 region <code>BACKUP_S3_ACCESS_KEY_ID</code> global no The S3 access key ID <code>BACKUP_S3_ACCESS_KEY_SECRET</code> global no The S3 access key secret <code>BACKUP_S3_COMP_LEVEL</code> <code>6</code> global no The compression level of the backup zip file"},{"location":"settings/#bad-behavior","title":"Bad behavior","text":"<p>STREAM support </p> <p>Ban IP generating too much 'bad' HTTP status code in a period of time.</p> Setting Default Context Multiple Description <code>USE_BAD_BEHAVIOR</code> <code>yes</code> multisite no Activate Bad behavior feature. <code>BAD_BEHAVIOR_STATUS_CODES</code> <code>400 401 403 404 405 429 444</code> multisite no List of HTTP status codes considered as 'bad'. <code>BAD_BEHAVIOR_THRESHOLD</code> <code>10</code> multisite no Maximum number of 'bad' HTTP status codes within the period of time before IP is banned. <code>BAD_BEHAVIOR_COUNT_TIME</code> <code>60</code> multisite no Period of time (in seconds) during which we count 'bad' HTTP status codes. <code>BAD_BEHAVIOR_BAN_TIME</code> <code>86400</code> multisite no The duration time (in seconds) of a ban when the corresponding IP has reached the threshold. <code>BAD_BEHAVIOR_BAN_SCOPE</code> <code>service</code> multisite no Determines the level of the ban. 'service' will ban the IP for the service only, 'global' will ban the IP for the whole system."},{"location":"settings/#blacklist","title":"Blacklist","text":"<p>STREAM support </p> <p>Deny access based on internal and external IP/network/rDNS/ASN blacklists.</p> Setting Default Context Multiple Description <code>USE_BLACKLIST</code> <code>yes</code> multisite no Activate blacklist feature. <code>BLACKLIST_IP</code> multisite no List of IP/network, separated with spaces, to block. <code>BLACKLIST_RDNS</code> <code>.shodan.io .censys.io</code> multisite no List of reverse DNS suffixes, separated with spaces, to block. <code>BLACKLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS blacklist checks on global IP addresses. <code>BLACKLIST_ASN</code> multisite no List of ASN numbers, separated with spaces, to block. <code>BLACKLIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to block. <code>BLACKLIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to block. <code>BLACKLIST_IGNORE_IP</code> multisite no List of IP/network, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_RDNS</code> multisite no List of reverse DNS suffixes, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_ASN</code> multisite no List of ASN numbers, separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IGNORE_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to ignore in the blacklist. <code>BLACKLIST_IP_URLS</code> <code>https://www.dan.me.uk/torlist/?exit</code> multisite no List of URLs, separated with spaces, containing bad IP/network to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_USER_AGENT_URLS</code> <code>https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list</code> multisite no List of URLs, separated with spaces, containing bad User-Agent to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to block. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_IP_URLS</code> multisite no List of URLs, separated with spaces, containing IP/network to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing User-Agent to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>BLACKLIST_IGNORE_URI_URLS</code> multisite no List of URLs, separated with spaces, containing URI to ignore in the blacklist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#brotli","title":"Brotli","text":"<p>STREAM support </p> <p>Compress HTTP requests with the brotli algorithm.</p> Setting Default Context Multiple Description <code>USE_BROTLI</code> <code>no</code> multisite no Enable or disable Brotli compression. <code>BROTLI_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with brotli. <code>BROTLI_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Brotli compression to apply. <code>BROTLI_COMP_LEVEL</code> <code>6</code> multisite no Compression level for Brotli (0 = no compression, 11 = maximum compression)."},{"location":"settings/#bunkernet","title":"BunkerNet","text":"<p>STREAM support </p> <p>Share threat data with other BunkerWeb instances via BunkerNet.</p> Setting Default Context Multiple Description <code>USE_BUNKERNET</code> <code>yes</code> multisite no Activate BunkerNet feature. <code>BUNKERNET_SERVER</code> <code>https://api.bunkerweb.io</code> global no Address of the BunkerNet API."},{"location":"settings/#cors","title":"CORS","text":"<p>STREAM support </p> <p>Cross-Origin Resource Sharing.</p> Setting Default Context Multiple Description <code>USE_CORS</code> <code>no</code> multisite no Use CORS <code>CORS_ALLOW_ORIGIN</code> <code>self</code> multisite no Allowed origins to make CORS requests : PCRE regex or * or self (for the same origin). <code>CORS_ALLOW_METHODS</code> <code>GET, POST, OPTIONS</code> multisite no Value of the Access-Control-Allow-Methods header. <code>CORS_ALLOW_HEADERS</code> <code>DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range</code> multisite no Value of the Access-Control-Allow-Headers header. <code>CORS_ALLOW_CREDENTIALS</code> <code>no</code> multisite no Send the Access-Control-Allow-Credentials header. <code>CORS_EXPOSE_HEADERS</code> <code>Content-Length,Content-Range</code> multisite no Value of the Access-Control-Expose-Headers header. <code>CROSS_ORIGIN_OPENER_POLICY</code> <code>same-origin</code> multisite no Value for the Cross-Origin-Opener-Policy header. <code>CROSS_ORIGIN_EMBEDDER_POLICY</code> <code>require-corp</code> multisite no Value for the Cross-Origin-Embedder-Policy header. <code>CROSS_ORIGIN_RESOURCE_POLICY</code> <code>same-site</code> multisite no Value for the Cross-Origin-Resource-Policy header. <code>CORS_MAX_AGE</code> <code>86400</code> multisite no Value of the Access-Control-Max-Age header. <code>CORS_DENY_REQUEST</code> <code>yes</code> multisite no Deny request and don't send it to backend if Origin is not allowed."},{"location":"settings/#client-cache","title":"Client cache","text":"<p>STREAM support </p> <p>Manage caching for clients.</p> Setting Default Context Multiple Description <code>USE_CLIENT_CACHE</code> <code>no</code> multisite no Tell client to store locally static files. <code>CLIENT_CACHE_EXTENSIONS</code> <code>jpg                       | jpeg      | png      | bmp                                             | ico | svg | tif | css | js | otf | ttf | eot | woff | woff2</code> global no List of file extensions, separated with pipes that should be cached. <code>CLIENT_CACHE_ETAG</code> <code>yes</code> multisite no Send the HTTP ETag header for static resources. <code>CLIENT_CACHE_CONTROL</code> <code>public, max-age=15552000</code> multisite no Value of the Cache-Control HTTP header."},{"location":"settings/#country","title":"Country","text":"<p>STREAM support </p> <p>Deny access based on the country of the client IP.</p> Setting Default Context Multiple Description <code>BLACKLIST_COUNTRY</code> multisite no Deny access if the country of the client is in the list (ISO 3166-1 alpha-2 format separated with spaces). <code>WHITELIST_COUNTRY</code> multisite no Deny access if the country of the client is not in the list (ISO 3166-1 alpha-2 format separated with spaces)."},{"location":"settings/#crowdsec","title":"CrowdSec","text":"<p>STREAM support </p> <p>CrowdSec bouncer for BunkerWeb.</p> Setting Default Context Multiple Description <code>USE_CROWDSEC</code> <code>no</code> multisite no Activate CrowdSec bouncer. <code>CROWDSEC_API</code> <code>http://crowdsec:8080</code> global no Address of the CrowdSec API. <code>CROWDSEC_API_KEY</code> global no Key for the CrowdSec API given by cscli bouncer add. <code>CROWDSEC_MODE</code> <code>live</code> global no Mode of the CrowdSec API (live or stream). <code>CROWDSEC_ENABLE_INTERNAL</code> <code>no</code> global no Enable the analysis of the internal traffic. <code>CROWDSEC_REQUEST_TIMEOUT</code> <code>1000</code> global no Timeout in milliseconds for the HTTP requests done by the bouncer to query CrowdSec local API. <code>CROWDSEC_EXCLUDE_LOCATION</code> global no The locations to exclude while bouncing. It is a list of location, separated by commas. <code>CROWDSEC_CACHE_EXPIRATION</code> <code>1</code> global no The cache expiration, in second, for IPs that the bouncer store in cache in live mode. <code>CROWDSEC_UPDATE_FREQUENCY</code> <code>10</code> global no The frequency of update, in second, to pull new/old IPs from the CrowdSec local API. <code>CROWDSEC_APPSEC_URL</code> global no URL of the Application Security Component. <code>CROWDSEC_APPSEC_FAILURE_ACTION</code> <code>passthrough</code> global no Behavior when the AppSec Component return a 500. Can let the request passthrough or deny it. <code>CROWDSEC_APPSEC_CONNECT_TIMEOUT</code> <code>100</code> global no The timeout in milliseconds of the connection between the remediation component and AppSec Component. <code>CROWDSEC_APPSEC_SEND_TIMEOUT</code> <code>100</code> global no The timeout in milliseconds to send data from the remediation component to the AppSec Component. <code>CROWDSEC_APPSEC_PROCESS_TIMEOUT</code> <code>500</code> global no The timeout in milliseconds to process the request from the remediation component to the AppSec Component. <code>CROWDSEC_ALWAYS_SEND_TO_APPSEC</code> <code>no</code> global no Send the request to the AppSec Component even if there is a decision for the IP. <code>CROWDSEC_APPSEC_SSL_VERIFY</code> <code>no</code> global no Verify the AppSec Component SSL certificate validity."},{"location":"settings/#custom-ssl-certificate","title":"Custom SSL certificate","text":"<p>STREAM support </p> <p>Choose custom certificate for SSL.</p> Setting Default Context Multiple Description <code>USE_CUSTOM_SSL</code> <code>no</code> multisite no Use custom SSL certificate. <code>CUSTOM_SSL_CERT_PRIORITY</code> <code>file</code> multisite no Choose whether to prioritize the certificate from file path or from base64 data. (file <code>CUSTOM_SSL_CERT</code> multisite no Full path of the certificate or bundle file (must be readable by the scheduler). <code>CUSTOM_SSL_KEY</code> multisite no Full path of the key file (must be readable by the scheduler). <code>CUSTOM_SSL_CERT_DATA</code> multisite no Certificate data encoded in base64. <code>CUSTOM_SSL_KEY_DATA</code> multisite no Key data encoded in base64."},{"location":"settings/#db","title":"DB","text":"<p>STREAM support </p> <p>Integrate easily the Database.</p> Setting Default Context Multiple Description <code>DATABASE_URI</code> <code>sqlite:////var/lib/bunkerweb/db.sqlite3</code> global no The database URI, following the sqlalchemy format. <code>DATABASE_URI_READONLY</code> global no The database URI for read-only operations, it can also serve as a fallback if the main database is down. Following the sqlalchemy format. <code>DATABASE_LOG_LEVEL</code> <code>warning</code> global no The level to use for database logs. <code>DATABASE_MAX_JOBS_RUNS</code> <code>10000</code> global no The maximum number of jobs runs to keep in the database."},{"location":"settings/#dnsbl","title":"DNSBL","text":"<p>STREAM support </p> <p>Deny access based on external DNSBL servers.</p> Setting Default Context Multiple Description <code>USE_DNSBL</code> <code>yes</code> multisite no Activate DNSBL feature. <code>DNSBL_LIST</code> <code>bl.blocklist.de sbl.spamhaus.org xbl.spamhaus.org</code> global no List of DNSBL servers."},{"location":"settings/#errors","title":"Errors","text":"<p>STREAM support </p> <p>Manage default error pages</p> Setting Default Context Multiple Description <code>ERRORS</code> multisite no List of HTTP error code and corresponding error pages, separated with spaces (404=/my404.html 403=/errors/403.html ...). <code>INTERCEPTED_ERROR_CODES</code> <code>400 401 403 404 405 413 429 500 501 502 503 504</code> multisite no List of HTTP error code intercepted by BunkerWeb"},{"location":"settings/#greylist","title":"Greylist","text":"<p>STREAM support </p> <p>Allow access while keeping security features based on internal and external IP/network/rDNS/ASN greylists.</p> Setting Default Context Multiple Description <code>USE_GREYLIST</code> <code>no</code> multisite no Activate greylist feature. <code>GREYLIST_IP</code> multisite no List of IP/network, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS</code> multisite no List of reverse DNS suffixes, separated with spaces, to put into the greylist. <code>GREYLIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS greylist checks on global IP addresses. <code>GREYLIST_ASN</code> multisite no List of ASN numbers, separated with spaces, to put into the greylist. <code>GREYLIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to put into the greylist. <code>GREYLIST_IP_URLS</code> multisite no List of URLs, separated with spaces, containing good IP/network to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing good User-Agent to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>GREYLIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to put into the greylist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#gzip","title":"Gzip","text":"<p>STREAM support </p> <p>Compress HTTP requests with the gzip algorithm.</p> Setting Default Context Multiple Description <code>USE_GZIP</code> <code>no</code> multisite no Enable or disable Gzip compression. <code>GZIP_TYPES</code> <code>application/atom+xml application/javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml</code> multisite no List of MIME types that will be compressed with gzip. <code>GZIP_MIN_LENGTH</code> <code>1000</code> multisite no Minimum response size (in bytes) for Gzip compression to apply. <code>GZIP_COMP_LEVEL</code> <code>5</code> multisite no Compression level for Gzip (1 = least compression, 9 = maximum compression). <code>GZIP_PROXIED</code> <code>no-cache no-store private expired auth</code> multisite no Specifies which proxied requests should be compressed."},{"location":"settings/#html-injection","title":"HTML injection","text":"<p>STREAM support </p> <p>Inject custom HTML code before either the  or  tag.</p> Setting Default Context Multiple Description <code>INJECT_BODY</code> multisite no The HTML code to inject before the  tag. <code>INJECT_HEAD</code> multisite no The HTML code to inject before the  tag."},{"location":"settings/#headers","title":"Headers","text":"<p>STREAM support </p> <p>Manage HTTP headers sent to clients.</p> Setting Default Context Multiple Description <code>CUSTOM_HEADER</code> multisite yes Custom header to add (HeaderName: HeaderValue). <code>REMOVE_HEADERS</code> <code>Server Expect-CT X-Powered-By X-AspNet-Version X-AspNetMvc-Version Public-Key-Pins</code> multisite no Headers to remove (Header1 Header2 Header3 ...) <code>KEEP_UPSTREAM_HEADERS</code> <code>Content-Security-Policy Permissions-Policy X-Frame-Options</code> multisite no Headers to keep from upstream (Header1 Header2 Header3 ... or * for all). <code>STRICT_TRANSPORT_SECURITY</code> <code>max-age=63072000; includeSubDomains; preload</code> multisite no Value for the Strict-Transport-Security (HSTS) header. <code>COOKIE_FLAGS</code> <code>* HttpOnly SameSite=Lax</code> multisite yes Cookie flags automatically added to all cookies (value accepted for nginx_cookie_flag_module). <code>COOKIE_AUTO_SECURE_FLAG</code> <code>yes</code> multisite no Automatically add the Secure flag to all cookies. <code>CONTENT_SECURITY_POLICY</code> <code>object-src 'none'; form-action 'self'; frame-ancestors 'self';</code> multisite no Value for the Content-Security-Policy header. <code>CONTENT_SECURITY_POLICY_REPORT_ONLY</code> <code>no</code> multisite no Send reports for violations of the Content-Security-Policy header instead of blocking them. <code>REFERRER_POLICY</code> <code>strict-origin-when-cross-origin</code> multisite no Value for the Referrer-Policy header. <code>PERMISSIONS_POLICY</code> <code>accelerometer=(), ambient-light-sensor=(), attribution-reporting=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(), compute-pressure=(), display-capture=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), identity-credentials-get=(), idle-detection=(), local-fonts=(), magnetometer=(), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=(), interest-cohort=()</code> multisite no Value for the Permissions-Policy header. <code>X_FRAME_OPTIONS</code> <code>SAMEORIGIN</code> multisite no Value for the X-Frame-Options header. <code>X_CONTENT_TYPE_OPTIONS</code> <code>nosniff</code> multisite no Value for the X-Content-Type-Options header. <code>X_DNS_PREFETCH_CONTROL</code> <code>off</code> multisite no Value for the X-DNS-Prefetch-Control header."},{"location":"settings/#lets-encrypt","title":"Let's Encrypt","text":"<p>STREAM support </p> <p>Automatic creation, renewal and configuration of Let's Encrypt certificates.</p> Setting Default Context Multiple Description <code>AUTO_LETS_ENCRYPT</code> <code>no</code> multisite no Activate automatic Let's Encrypt mode. <code>EMAIL_LETS_ENCRYPT</code> multisite no Email used for Let's Encrypt notification and in certificate. <code>LETS_ENCRYPT_CHALLENGE</code> <code>http</code> multisite no The challenge type to use for Let's Encrypt (http or dns). <code>LETS_ENCRYPT_DNS_PROVIDER</code> multisite no The DNS provider to use for DNS challenges. <code>LETS_ENCRYPT_DNS_PROPAGATION</code> <code>default</code> multisite no The time to wait for DNS propagation in seconds for DNS challenges. <code>LETS_ENCRYPT_DNS_CREDENTIAL_ITEM</code> multisite yes Configuration item that will be added to the credentials.ini file for the DNS provider (e.g. 'cloudflare_api_token 123456') for DNS challenges. (Values can also be base64 encoded or it can be a base64 encoded json object) <code>USE_LETS_ENCRYPT_WILDCARD</code> <code>no</code> multisite no Create wildcard certificates for all domains. This allows a single certificate to secure multiple subdomains. (Only available with DNS challenges) <code>USE_LETS_ENCRYPT_STAGING</code> <code>no</code> multisite no Use the staging environment for Let\u2019s Encrypt certificate generation. Useful when you are testing your deployments to avoid being rate limited in the production environment. <code>LETS_ENCRYPT_CLEAR_OLD_CERTS</code> <code>no</code> global no Clear old certificates when renewing."},{"location":"settings/#limit","title":"Limit","text":"<p>STREAM support </p> <p>Limit maximum number of requests and connections.</p> Setting Default Context Multiple Description <code>USE_LIMIT_REQ</code> <code>yes</code> multisite no Activate limit requests feature. <code>LIMIT_REQ_URL</code> <code>/</code> multisite yes URL (PCRE regex) where the limit request will be applied or special value / for all requests. <code>LIMIT_REQ_RATE</code> <code>2r/s</code> multisite yes Rate to apply to the URL (s for second, m for minute, h for hour and d for day). <code>USE_LIMIT_CONN</code> <code>yes</code> multisite no Activate limit connections feature. <code>LIMIT_CONN_MAX_HTTP1</code> <code>10</code> multisite no Maximum number of connections per IP when using HTTP/1.X protocol. <code>LIMIT_CONN_MAX_HTTP2</code> <code>100</code> multisite no Maximum number of streams per IP when using HTTP/2 protocol. <code>LIMIT_CONN_MAX_HTTP3</code> <code>100</code> multisite no Maximum number of streams per IP when using HTTP/3 protocol. <code>LIMIT_CONN_MAX_STREAM</code> <code>10</code> multisite no Maximum number of connections per IP when using stream."},{"location":"settings/#metrics","title":"Metrics","text":"<p>STREAM support </p> <p>Metrics collection and retrieve.</p> Setting Default Context Multiple Description <code>USE_METRICS</code> <code>yes</code> multisite no Enable collection and retrieval of internal metrics. <code>METRICS_MEMORY_SIZE</code> <code>16m</code> global no Size of the internal storage for metrics. <code>METRICS_MAX_BLOCKED_REQUESTS</code> <code>1000</code> global no Maximum number of blocked requests to store (per worker). <code>METRICS_MAX_BLOCKED_REQUESTS_REDIS</code> <code>100000</code> global no Maximum number of blocked requests to store in Redis."},{"location":"settings/#migration-pro","title":"Migration  (PRO)","text":"<p>STREAM support </p> <p>Migration of BunkerWeb configuration between instances made easy via the web UI</p>"},{"location":"settings/#miscellaneous","title":"Miscellaneous","text":"<p>STREAM support </p> <p>Miscellaneous settings.</p> Setting Default Context Multiple Description <code>DISABLE_DEFAULT_SERVER</code> <code>no</code> global no Deny HTTP request if the request vhost is unknown. <code>DISABLE_DEFAULT_SERVER_STRICT_SNI</code> <code>no</code> global no Close SSL/TLS connection if the SNI is unknown. <code>ALLOWED_METHODS</code> <code>GET                    | POST      | HEAD</code> multisite no Allowed HTTP and WebDAV methods, separated with pipes to be sent by clients. <code>MAX_CLIENT_SIZE</code> <code>10m</code> multisite no Maximum body size (0 for infinite). <code>SERVE_FILES</code> <code>yes</code> multisite no Serve files from the local folder. <code>ROOT_FOLDER</code> multisite no Root folder containing files to serve (/var/www/html/{server_name} if unset). <code>HTTP2</code> <code>yes</code> multisite no Support HTTP2 protocol when HTTPS is enabled. <code>HTTP3</code> <code>yes</code> multisite no Support HTTP3 protocol when HTTPS is enabled. <code>HTTP3_ALT_SVC_PORT</code> <code>443</code> multisite no HTTP3 alternate service port. This value will be used as part of the Alt-Svc header. <code>LISTEN_HTTP</code> <code>yes</code> multisite no Respond to (insecure) HTTP requests. <code>USE_OPEN_FILE_CACHE</code> <code>no</code> multisite no Enable open file cache feature <code>OPEN_FILE_CACHE</code> <code>max=1000 inactive=20s</code> multisite no Open file cache directive <code>OPEN_FILE_CACHE_ERRORS</code> <code>yes</code> multisite no Enable open file cache for errors <code>OPEN_FILE_CACHE_MIN_USES</code> <code>2</code> multisite no Enable open file cache minimum uses <code>OPEN_FILE_CACHE_VALID</code> <code>30s</code> multisite no Open file cache valid time <code>EXTERNAL_PLUGIN_URLS</code> global no List of external plugins URLs (direct download to .zip or .tar file) to download and install (URLs are separated with space). <code>DENY_HTTP_STATUS</code> <code>403</code> global no HTTP status code to send when the request is denied (403 or 444). When using 444, BunkerWeb will close the connection. <code>SEND_ANONYMOUS_REPORT</code> <code>yes</code> global no Send anonymous report to BunkerWeb maintainers."},{"location":"settings/#modsecurity","title":"ModSecurity","text":"<p>STREAM support </p> <p>Management of the ModSecurity WAF.</p> Setting Default Context Multiple Description <code>USE_MODSECURITY</code> <code>yes</code> multisite no Enable ModSecurity WAF. <code>USE_MODSECURITY_CRS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set. <code>USE_MODSECURITY_CRS_PLUGINS</code> <code>yes</code> multisite no Enable OWASP Core Rule Set plugins. <code>MODSECURITY_CRS_VERSION</code> <code>4</code> multisite no Version of the OWASP Core Rule Set to use with ModSecurity (3, 4 or nightly). <code>MODSECURITY_CRS_PLUGINS</code> multisite no List of OWASP CRS plugins (plugin-name[/tag] or URL) to download and install (separated with spaces). (Not compatible with CRS version 3) <code>USE_MODSECURITY_GLOBAL_CRS</code> <code>no</code> global no Use ModSecurity CRS in global mode to improve rules loading when you have many services. <code>MODSECURITY_SEC_AUDIT_ENGINE</code> <code>RelevantOnly</code> multisite no SecAuditEngine directive of ModSecurity. <code>MODSECURITY_SEC_RULE_ENGINE</code> <code>On</code> multisite no SecRuleEngine directive of ModSecurity. <code>MODSECURITY_SEC_AUDIT_LOG_PARTS</code> <code>ABCFHZ</code> multisite no SecAuditLogParts directive of ModSecurity. <code>MODSECURITY_REQ_BODY_NO_FILES_LIMIT</code> <code>131072</code> multisite no SecRequestBodyNoFilesLimit directive of ModSecurity."},{"location":"settings/#monitoring-pro","title":"Monitoring  (PRO)","text":"<p>STREAM support </p> <p>BunkerWeb monitoring pro system. This plugin is a prerequisite for some other plugins.</p> Setting Default Context Multiple Description <code>USE_MONITORING</code> <code>yes</code> global no Enable monitoring of BunkerWeb. <code>MONITORING_METRICS_DICT_SIZE</code> <code>10M</code> global no Size of the dict to store monitoring metrics. <code>MONITORING_IGNORE_URLS</code> global no List of URLs to ignore when monitoring separated with spaces (e.g. /health)"},{"location":"settings/#php","title":"PHP","text":"<p>STREAM support </p> <p>Manage local or remote PHP-FPM.</p> Setting Default Context Multiple Description <code>REMOTE_PHP</code> multisite no Hostname of the remote PHP-FPM instance. <code>REMOTE_PHP_PATH</code> multisite no Root folder containing files in the remote PHP-FPM instance. <code>REMOTE_PHP_PORT</code> <code>9000</code> multisite no Port of the remote PHP-FPM instance. <code>LOCAL_PHP</code> multisite no Path to the PHP-FPM socket file. <code>LOCAL_PHP_PATH</code> multisite no Root folder containing files in the local PHP-FPM instance."},{"location":"settings/#pro","title":"Pro","text":"<p>STREAM support </p> <p>Pro settings for the Pro version of BunkerWeb.</p> Setting Default Context Multiple Description <code>PRO_LICENSE_KEY</code> global no The License Key for the Pro version of BunkerWeb."},{"location":"settings/#prometheus-exporter-pro","title":"Prometheus exporter  (PRO)","text":"<p>STREAM support </p> <p>Prometheus exporter for BunkerWeb internal metrics.</p> Setting Default Context Multiple Description <code>USE_PROMETHEUS_EXPORTER</code> <code>no</code> global no Enable the Prometheus export. <code>PROMETHEUS_EXPORTER_IP</code> <code>0.0.0.0</code> global no Listening IP of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_PORT</code> <code>9113</code> global no Listening port of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_URL</code> <code>/metrics</code> global no HTTP URL of the Prometheus exporter. <code>PROMETHEUS_EXPORTER_ALLOW_IP</code> <code>127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16</code> global no List of IP/networks allowed to contact the Prometheus exporter endpoint."},{"location":"settings/#real-ip","title":"Real IP","text":"<p>STREAM support </p> <p>Get real IP of clients when BunkerWeb is behind a reverse proxy / load balancer.</p> Setting Default Context Multiple Description <code>USE_REAL_IP</code> <code>no</code> multisite no Retrieve the real IP of client. <code>USE_PROXY_PROTOCOL</code> <code>no</code> global no Enable PROXY protocol communication. <code>REAL_IP_FROM</code> <code>192.168.0.0/16 172.16.0.0/12 10.0.0.0/8</code> multisite no List of trusted IPs / networks, separated with spaces, where proxied requests come from. <code>REAL_IP_HEADER</code> <code>X-Forwarded-For</code> multisite no HTTP header containing the real IP or special value proxy_protocol for PROXY protocol. <code>REAL_IP_RECURSIVE</code> <code>yes</code> multisite no Perform a recursive search in the header container IP address. <code>REAL_IP_FROM_URLS</code> multisite no List of URLs containing trusted IPs / networks, separated with spaces, where proxied requests come from. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"settings/#redirect","title":"Redirect","text":"<p>STREAM support </p> <p>Manage HTTP redirects.</p> Setting Default Context Multiple Description <code>REDIRECT_TO</code> multisite no Redirect a whole site to another one. <code>REDIRECT_TO_REQUEST_URI</code> <code>no</code> multisite no Append the requested URI to the redirect address. <code>REDIRECT_TO_STATUS_CODE</code> <code>301</code> multisite no Status code to send to client when redirecting."},{"location":"settings/#redis","title":"Redis","text":"<p>STREAM support </p> <p>Redis server configuration when using BunkerWeb in cluster mode.</p> Setting Default Context Multiple Description <code>USE_REDIS</code> <code>no</code> global no Activate Redis. <code>REDIS_HOST</code> global no Redis server IP or hostname. <code>REDIS_PORT</code> <code>6379</code> global no Redis server port. <code>REDIS_DATABASE</code> <code>0</code> global no Redis database number. <code>REDIS_SSL</code> <code>no</code> global no Use SSL/TLS connection with Redis server. <code>REDIS_SSL_VERIFY</code> <code>no</code> global no Verify the certificate of Redis server. <code>REDIS_TIMEOUT</code> <code>1000</code> global no Redis server timeout (in ms) for connect, read and write. <code>REDIS_USERNAME</code> global no Redis username used in AUTH command. <code>REDIS_PASSWORD</code> global no Redis password used in AUTH command. <code>REDIS_SENTINEL_HOSTS</code> global no Redis sentinel hosts with format host:[port] separated with spaces. <code>REDIS_SENTINEL_USERNAME</code> global no Redis sentinel username. <code>REDIS_SENTINEL_PASSWORD</code> global no Redis sentinel password. <code>REDIS_SENTINEL_MASTER</code> global no Redis sentinel master name. <code>REDIS_KEEPALIVE_IDLE</code> <code>30000</code> global no Max idle time (in ms) before closing redis connection in the pool. <code>REDIS_KEEPALIVE_POOL</code> <code>10</code> global no Max number of redis connection(s) kept in the pool."},{"location":"settings/#reporting-pro","title":"Reporting  (PRO)","text":"<p>STREAM support </p> <p>Regular reporting of important data from BunkerWeb (global, attacks, bans, requests, reasons, AS...). Monitoring pro plugin needed to work.</p> Setting Default Context Multiple Description <code>USE_REPORTING_SMTP</code> <code>no</code> global no Enable sending the report via email. <code>USE_REPORTING_WEBHOOK</code> <code>no</code> global no Enable sending the report via webhook. <code>REPORTING_SCHEDULE</code> <code>weekly</code> global no The frequency at which reports are sent. <code>REPORTING_WEBHOOK_URLS</code> global no List of webhook URLs to receive the report in Markdown (separated by spaces). <code>REPORTING_SMTP_EMAILS</code> global no List of email addresses to receive the report in HTML format (separated by spaces). <code>REPORTING_SMTP_HOST</code> global no The host server used for SMTP sending. <code>REPORTING_SMTP_PORT</code> <code>465</code> global no The port used for SMTP. Please note that there are different standards depending on the type of connection (SSL = 465, TLS = 587). <code>REPORTING_SMTP_FROM_EMAIL</code> global no The email address used as the sender. Note that 2FA must be disabled for this email address. <code>REPORTING_SMTP_FROM_USER</code> global no The user authentication value for sending via the from email address. <code>REPORTING_SMTP_FROM_PASSWORD</code> global no The password authentication value for sending via the from email address. <code>REPORTING_SMTP_SSL</code> <code>SSL</code> global no Determine whether or not to use a secure connection for SMTP. <code>REPORTING_SMTP_SUBJECT</code> <code>BunkerWeb Report</code> global no The subject line of the email."},{"location":"settings/#reverse-proxy","title":"Reverse proxy","text":"<p>STREAM support </p> <p>Manage reverse proxy configurations.</p> Setting Default Context Multiple Description <code>USE_REVERSE_PROXY</code> <code>no</code> multisite no Activate reverse proxy mode. <code>REVERSE_PROXY_INTERCEPT_ERRORS</code> <code>yes</code> multisite no Intercept and rewrite errors. <code>REVERSE_PROXY_CUSTOM_HOST</code> multisite no Override Host header sent to upstream server. <code>REVERSE_PROXY_SSL_SNI</code> <code>no</code> multisite no Enable or disable sending SNI to upstream server. <code>REVERSE_PROXY_SSL_SNI_NAME</code> multisite no Sets the SNI host to send to upstream server. <code>REVERSE_PROXY_HOST</code> multisite yes Full URL of the proxied resource (proxy_pass). <code>REVERSE_PROXY_URL</code> <code>/</code> multisite yes Location URL that will be proxied. <code>REVERSE_PROXY_WS</code> <code>no</code> multisite yes Enable websocket on the proxied resource. <code>REVERSE_PROXY_HEADERS</code> multisite yes List of HTTP headers to send to proxied resource separated with semicolons (values for proxy_set_header directive). <code>REVERSE_PROXY_HEADERS_CLIENT</code> multisite yes List of HTTP headers to send to client separated with semicolons (values for add_header directive). <code>REVERSE_PROXY_BUFFERING</code> <code>yes</code> multisite yes Enable or disable buffering of responses from proxied resource. <code>REVERSE_PROXY_KEEPALIVE</code> <code>no</code> multisite yes Enable or disable keepalive connections with the proxied resource. <code>REVERSE_PROXY_AUTH_REQUEST</code> multisite yes Enable authentication using an external provider (value of auth_request directive). <code>REVERSE_PROXY_AUTH_REQUEST_SIGNIN_URL</code> multisite yes Redirect clients to sign-in URL when using REVERSE_PROXY_AUTH_REQUEST (used when auth_request call returned 401). <code>REVERSE_PROXY_AUTH_REQUEST_SET</code> multisite yes List of variables to set from the authentication provider, separated with semicolons (values of auth_request_set directives). <code>REVERSE_PROXY_CONNECT_TIMEOUT</code> <code>60s</code> multisite yes Timeout when connecting to the proxied resource. <code>REVERSE_PROXY_READ_TIMEOUT</code> <code>60s</code> multisite yes Timeout when reading from the proxied resource. <code>REVERSE_PROXY_SEND_TIMEOUT</code> <code>60s</code> multisite yes Timeout when sending to the proxied resource. <code>REVERSE_PROXY_INCLUDES</code> multisite yes Additional configuration to include in the location block, separated with spaces. <code>REVERSE_PROXY_PASS_REQUEST_BODY</code> <code>yes</code> multisite yes Enable or disable passing the request body to the proxied resource. <code>USE_PROXY_CACHE</code> <code>no</code> multisite no Enable or disable caching of the proxied resources. <code>PROXY_CACHE_PATH_LEVELS</code> <code>1:2</code> global no Hierarchy levels of the cache. <code>PROXY_CACHE_PATH_ZONE_SIZE</code> <code>10m</code> global no Maximum size of cached metadata when caching proxied resources. <code>PROXY_CACHE_PATH_PARAMS</code> <code>max_size=100m</code> global no Additional parameters to add to the proxy_cache directive. <code>PROXY_CACHE_METHODS</code> <code>GET HEAD</code> multisite no HTTP methods that should trigger a cache operation. <code>PROXY_CACHE_MIN_USES</code> <code>2</code> multisite no The minimum number of requests before a response is cached. <code>PROXY_CACHE_KEY</code> <code>$scheme$host$request_uri</code> multisite no The key used to uniquely identify a cached response. <code>PROXY_CACHE_VALID</code> <code>200=24h 301=1h 302=24h</code> multisite no Define the caching time depending on the HTTP status code (list of status=time), separated with spaces. <code>PROXY_NO_CACHE</code> <code>$http_pragma $http_authorization</code> multisite no Conditions to disable caching of responses. <code>PROXY_CACHE_BYPASS</code> <code>0</code> multisite no Conditions to bypass caching of responses. <code>PROXY_BUFFERS</code> multisite no Value for proxy_buffers directive. <code>PROXY_BUFFER_SIZE</code> multisite no Value for proxy_buffer_size directive. <code>PROXY_BUSY_BUFFERS_SIZE</code> multisite no Value for proxy_busy_buffers_size directive."},{"location":"settings/#reverse-scan","title":"Reverse scan","text":"<p>STREAM support </p> <p>Scan clients ports to detect proxies or servers.</p> Setting Default Context Multiple Description <code>USE_REVERSE_SCAN</code> <code>no</code> multisite no Enable scanning of clients ports and deny access if one is opened. <code>REVERSE_SCAN_PORTS</code> <code>22 80 443 3128 8000 8080</code> multisite no List of port to scan when using reverse scan feature. <code>REVERSE_SCAN_TIMEOUT</code> <code>500</code> multisite no Specify the maximum timeout (in ms) when scanning a port."},{"location":"settings/#ssl","title":"SSL","text":"<p>STREAM support </p> <p>Handle SSL/TLS related settings.</p> Setting Default Context Multiple Description <code>REDIRECT_HTTP_TO_HTTPS</code> <code>no</code> multisite no Redirect all HTTP request to HTTPS. <code>AUTO_REDIRECT_HTTP_TO_HTTPS</code> <code>yes</code> multisite no Try to detect if HTTPS is used and activate HTTP to HTTPS redirection if that's the case. <code>SSL_PROTOCOLS</code> <code>TLSv1.2 TLSv1.3</code> multisite no The supported version of TLS. We recommend the default value TLSv1.2 TLSv1.3 for compatibility reasons. <code>SSL_CIPHERS_LEVEL</code> <code>modern</code> multisite no Preset security level for SSL cipher suites. 'Modern' is most secure but may not work with older devices. <code>SSL_CIPHERS_CUSTOM</code> multisite no Custom SSL cipher suite string. If specified, overrides the SSL Ciphers Level. Leave empty to use level-based configuration."},{"location":"settings/#securitytxt","title":"Security.txt","text":"<p>STREAM support </p> <p>Manage the security.txt file. A proposed standard which allows websites to define security policies.</p> Setting Default Context Multiple Description <code>USE_SECURITYTXT</code> <code>no</code> multisite no Enable security.txt file. <code>SECURITYTXT_URI</code> <code>/.well-known/security.txt</code> multisite no Indicates the URI where the \"security.txt\" file will be accessible from. <code>SECURITYTXT_CONTACT</code> multisite yes Indicates a method that researchers should use for reporting security vulnerabilities such as an email address, a phone number, and/or a web page with contact information. (If the value is empty, the security.txt file will not be created as it is a required field) <code>SECURITYTXT_EXPIRES</code> multisite no Indicates the date and time after which the data contained in the \"security.txt\" file is considered stale and should not be used (If the value is empty, the value will always be the current date and time + 1 year). <code>SECURITYTXT_ENCRYPTION</code> multisite yes Indicates an encryption key that security researchers should use for encrypted communication. <code>SECURITYTXT_ACKNOWLEDGEMENTS</code> multisite yes Indicates a link to a page where security researchers are recognized for their reports. <code>SECURITYTXT_PREFERRED_LANG</code> <code>en</code> multisite no Can be used to indicate a set of natural languages that are preferred when submitting security reports. <code>SECURITYTXT_CANONICAL</code> multisite yes Indicates the canonical URIs where the \"security.txt\" file is located, which is usually something like \"https://example.com/.well-known/security.txt\". (If the value is empty, the default value will be automatically generated from the site URL + SECURITYTXT_URI) <code>SECURITYTXT_POLICY</code> multisite yes Indicates a link to where the vulnerability disclosure policy is located. <code>SECURITYTXT_HIRING</code> multisite yes Used for linking to the vendor's security-related job positions. <code>SECURITYTXT_CSAF</code> multisite yes A link to the provider-metadata.json of your CSAF (Common Security Advisory Framework) provider."},{"location":"settings/#self-signed-certificate","title":"Self-signed certificate","text":"<p>STREAM support </p> <p>Generate self-signed certificate.</p> Setting Default Context Multiple Description <code>GENERATE_SELF_SIGNED_SSL</code> <code>no</code> multisite no Generate and use self-signed certificate. <code>SELF_SIGNED_SSL_EXPIRY</code> <code>365</code> multisite no Self-signed certificate expiry in days. <code>SELF_SIGNED_SSL_SUBJ</code> <code>/CN=www.example.com/</code> multisite no Self-signed certificate subject."},{"location":"settings/#sessions","title":"Sessions","text":"<p>STREAM support </p> <p>Management of session used by other plugins.</p> Setting Default Context Multiple Description <code>SESSIONS_SECRET</code> <code>random</code> global no Secret used to encrypt sessions variables for storing data related to challenges. <code>SESSIONS_NAME</code> <code>random</code> global no Name of the cookie given to clients. <code>SESSIONS_IDLING_TIMEOUT</code> <code>1800</code> global no Maximum time (in seconds) of inactivity before the session is invalidated. <code>SESSIONS_ROLLING_TIMEOUT</code> <code>3600</code> global no Maximum time (in seconds) before a session must be renewed. <code>SESSIONS_ABSOLUTE_TIMEOUT</code> <code>86400</code> global no Maximum time (in seconds) before a session is destroyed. <code>SESSIONS_CHECK_IP</code> <code>yes</code> global no Destroy session if IP address is different than original one. <code>SESSIONS_CHECK_USER_AGENT</code> <code>yes</code> global no Destroy session if User-Agent is different than original one."},{"location":"settings/#ui","title":"UI","text":"<p>STREAM support </p> <p>Integrate easily the BunkerWeb UI.</p> Setting Default Context Multiple Description <code>USE_UI</code> <code>no</code> multisite no Use UI <code>UI_HOST</code> global no Address of the web UI used for initial setup"},{"location":"settings/#user-manager-pro","title":"User Manager  (PRO)","text":"<p>STREAM support </p> <p>Add the possibility to manage users on the web interface</p> Setting Default Context Multiple Description <code>USERS_REQUIRE_2FA</code> <code>no</code> global no Require two-factor authentication for all users"},{"location":"settings/#whitelist","title":"Whitelist","text":"<p>STREAM support </p> <p>Allow access based on internal and external IP/network/rDNS/ASN whitelists.</p> Setting Default Context Multiple Description <code>USE_WHITELIST</code> <code>yes</code> multisite no Activate whitelist feature. <code>WHITELIST_IP</code> multisite no List of IP/network, separated with spaces, to put into the whitelist. <code>WHITELIST_RDNS</code> <code>.google.com .googlebot.com .yandex.ru .yandex.net .yandex.com .search.msn.com .baidu.com .baidu.jp .crawl.yahoo.net .fwd.linkedin.com .twitter.com .twttr.com .discord.com</code> multisite no List of reverse DNS suffixes, separated with spaces, to whitelist. <code>WHITELIST_RDNS_GLOBAL</code> <code>yes</code> multisite no Only perform RDNS whitelist checks on global IP addresses. <code>WHITELIST_ASN</code> <code>32934</code> multisite no List of ASN numbers, separated with spaces, to whitelist. <code>WHITELIST_USER_AGENT</code> multisite no List of User-Agent (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_URI</code> multisite no List of URI (PCRE regex), separated with spaces, to whitelist. <code>WHITELIST_IP_URLS</code> multisite no List of URLs, separated with spaces, containing good IP/network to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_RDNS_URLS</code> multisite no List of URLs, separated with spaces, containing reverse DNS suffixes to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_ASN_URLS</code> multisite no List of URLs, separated with spaces, containing ASN to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_USER_AGENT_URLS</code> multisite no List of URLs, separated with spaces, containing good User-Agent to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme. <code>WHITELIST_URI_URLS</code> multisite no List of URLs, separated with spaces, containing bad URI to whitelist. Also supports file:// URLs and and auth basic using http://user:pass@url scheme."},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>BunkerWeb Panel</p> <p>If you are unable to resolve your issue, you can contact us directly via our panel. This centralizes all requests related to the BunkerWeb solution.</p>"},{"location":"troubleshooting/#logs","title":"Logs","text":"<p>When troubleshooting, logs are your best friends. We try our best to provide user-friendly logs to help you understand what's happening.</p> <p>Please note that you can set the <code>LOG_LEVEL</code> to <code>info</code> (default: <code>notice</code>) to increase BunkerWeb\u2019s verbosity.</p> <p>Here is how you can access the logs, depending on your integration :</p> DockerDocker autoconfAll-in-oneSwarmKubernetesLinux <p>List containers</p> <p>To list the running containers, you can use the following command : <pre><code>docker ps\n</code></pre></p> <p>You can use the <code>docker logs</code> command (replace <code>mybunker</code> with the name of your container) : <pre><code>docker logs mybunker\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose logs mybunker\n</code></pre></p> <p>List containers</p> <p>To list the running containers, you can use the following command : <pre><code>docker ps\n</code></pre></p> <p>You can use the <code>docker logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your containers) : <pre><code>docker logs mybunker\ndocker logs myautoconf\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> and <code>myautoconf</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose logs mybunker\ndocker-compose logs myautoconf\n</code></pre></p> <p>Container name</p> <p>The default container name for the All-in-one image is <code>bunkerweb-aio</code>. If you've used a different name, please adjust the command accordingly.</p> <p>You can use the <code>docker logs</code> command: <pre><code>docker logs bunkerweb-aio\n</code></pre></p> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>List services</p> <p>To list the services, you can use the following command : <pre><code>docker service ls\n</code></pre></p> <p>You can use the <code>docker service logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your services) : <pre><code>docker service logs mybunker\ndocker service logs myautoconf\n</code></pre></p> <p>List pods</p> <p>To list the pods, you can use the following command : <pre><code>kubectl get pods\n</code></pre></p> <p>You can use the <code>kubectl logs</code> command (replace <code>mybunker</code> and <code>myautoconf</code> with the name of your pods) : <pre><code>kubectl logs mybunker\nkubectl logs myautoconf\n</code></pre></p> <p>For errors related to BunkerWeb services (e.g., not starting), you can use <code>journalctl</code> : <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre></p> <p>Common logs are located inside the <code>/var/log/bunkerweb</code> directory : <pre><code>cat /var/log/bunkerweb/error.log\ncat /var/log/bunkerweb/access.log\n</code></pre></p>"},{"location":"troubleshooting/#permissions","title":"Permissions","text":"<p>Don't forget that BunkerWeb runs as an unprivileged user for obvious security reasons. Double-check the permissions of files and folders used by BunkerWeb, especially if you use custom configurations (more info here). You will need to set at least RW rights on files and RWX on folders.</p>"},{"location":"troubleshooting/#ip-unban","title":"IP unban","text":"<p>You can manually unban an IP, which is useful when performing tests so that you can contact the internal API of BunkerWeb (replace <code>1.2.3.4</code> with the IP address to unban) :</p> DockerDocker autoconfAll-in-oneSwarmKubernetesLinux <p>You can use the <code>docker exec</code> command (replace <code>mybunker</code> with the name of your container) : <pre><code>docker exec mybunker bwcli unban 1.2.3.4\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>mybunker</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose exec mybunker bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>docker exec</code> command (replace <code>myautoconf</code> with the name of your container) : <pre><code>docker exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>Here is the docker-compose equivalent (replace <code>myautoconf</code> with the name of the services declared in the docker-compose.yml file) : <pre><code>docker-compose exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>Container name</p> <p>The default container name for the All-in-one image is <code>bunkerweb-aio</code>. If you've used a different name, please adjust the command accordingly.</p> <p>You can use the <code>docker exec</code> command: <pre><code>docker exec bunkerweb-aio bwcli unban 1.2.3.4\n</code></pre></p> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Docker autoconf integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>You can use the <code>docker exec</code> command (replace <code>myautoconf</code> with the name of your service) : <pre><code>docker exec $(docker ps -q -f name=myautoconf) bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>kubectl exec</code> command (replace <code>myautoconf</code> with the name of your pod) : <pre><code>kubectl exec myautoconf bwcli unban 1.2.3.4\n</code></pre></p> <p>You can use the <code>bwcli</code> command (as root) : <pre><code>sudo bwcli unban 1.2.3.4\n</code></pre></p>"},{"location":"troubleshooting/#false-positives","title":"False positives","text":""},{"location":"troubleshooting/#detect-only-mode","title":"Detect only mode","text":"<p>For debugging/test purposes, you can set BunkerWeb in detect only mode so it won't block request and will act as a classical reverse proxy.</p>"},{"location":"troubleshooting/#modsecurity","title":"ModSecurity","text":"<p>The default BunkerWeb configuration of ModSecurity is to load the Core Rule Set in anomaly scoring mode with a paranoia level (PL) of 1 :</p> <ul> <li>Each matched rule will increase an anomaly score (so many rules can match a single request)</li> <li>PL1 includes rules with fewer chances of false positives (but less security than PL4)</li> <li>the default threshold for anomaly score is 5 for requests and 4 for responses</li> </ul> <p>Let's take the following logs as an example of ModSecurity detection using default configuration (formatted for better readability) :</p> <pre><code>2022/04/26 12:01:10 [warn] 85#85: *11 ModSecurity: Warning. Matched \"Operator `PmFromFile' with parameter `lfi-os-files.data' against variable `ARGS:id' (Value: `/etc/passwd' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf\"]\n    [line \"78\"]\n    [id \"930120\"]\n    [rev \"\"]\n    [msg \"OS File Access Attempt\"]\n    [data \"Matched Data: etc/passwd found within ARGS:id: /etc/passwd\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-multi\"]\n    [tag \"platform-multi\"]\n    [tag \"attack-lfi\"]\n    [tag \"paranoia-level/1\"]\n    [tag \"OWASP_CRS\"]\n    [tag \"capec/1000/255/153/126\"]\n    [tag \"PCI/6.5.4\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"o1,10v9,11t:utf8toUnicode,t:urlDecodeUni,t:normalizePathWin,t:lowercase\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n2022/04/26 12:01:10 [warn] 85#85: *11 ModSecurity: Warning. Matched \"Operator `PmFromFile' with parameter `unix-shell.data' against variable `ARGS:id' (Value: `/etc/passwd' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-932-APPLICATION-ATTACK-RCE.conf\"]\n    [line \"480\"]\n    [id \"932160\"]\n    [rev \"\"]\n    [msg \"Remote Command Execution: Unix Shell Code Found\"]\n    [data \"Matched Data: etc/passwd found within ARGS:id: /etc/passwd\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-shell\"]\n    [tag \"platform-unix\"]\n    [tag \"attack-rce\"]\n    [tag \"paranoia-level/1\"]\n    [tag \"OWASP_CRS\"]\n    [tag \"capec/1000/152/248/88\"]\n    [tag \"PCI/6.5.2\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"o1,10v9,11t:urlDecodeUni,t:cmdLine,t:normalizePath,t:lowercase\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n2022/04/26 12:01:10 [error] 85#85: *11 [client 172.17.0.1] ModSecurity: Access denied with code 403 (phase 2). Matched \"Operator `Ge' with parameter `5' against variable `TX:ANOMALY_SCORE' (Value: `10' )\n    [file \"/usr/share/bunkerweb/core/modsecurity/files/coreruleset/rules/REQUEST-949-BLOCKING-EVALUATION.conf\"]\n    [line \"80\"]\n    [id \"949110\"]\n    [rev \"\"]\n    [msg \"Inbound Anomaly Score Exceeded (Total Score: 10)\"]\n    [data \"\"]\n    [severity \"2\"]\n    [ver \"OWASP_CRS/3.3.2\"]\n    [maturity \"0\"]\n    [accuracy \"0\"]\n    [tag \"application-multi\"]\n    [tag \"language-multi\"]\n    [tag \"platform-multi\"]\n    [tag \"attack-generic\"]\n    [hostname \"172.17.0.2\"]\n    [uri \"/\"]\n    [unique_id \"165097447014.179282\"]\n    [ref \"\"],\n    client: 172.17.0.1, server: localhost, request: \"GET /?id=/etc/passwd HTTP/1.1\", host: \"localhost\"\n</code></pre> <p>As we can see, there are 3 different logs :</p> <ol> <li>Rule 930120 matched</li> <li>Rule 932160 matched</li> <li>Access denied (rule 949110)</li> </ol> <p>One important thing to understand is that rule 949110 is not a \"real\" one : it's the one that will deny the request because the anomaly threshold is reached (which is 10 in this example). You should never remove the 949110 rule !</p> <p>If it's a false-positive, you should then focus on both 930120 and 932160 rules. ModSecurity and/or CRS tuning is out of the scope of this documentation but don't forget that you can apply custom configurations before and after the CRS is loaded (more info here).</p>"},{"location":"troubleshooting/#bad-behavior","title":"Bad Behavior","text":"<p>A common false-positive case is when the client is banned because of the \"bad behavior\" feature which means that too many suspicious HTTP status codes were generated within a time period (more info here). You should start by reviewing the settings and then edit them according to your web application(s) like removing a suspicious HTTP code, decreasing the count time, increasing the threshold, ...</p>"},{"location":"troubleshooting/#whitelisting","title":"Whitelisting","text":"<p>If you have bots (or admins) that need to access your website, the recommended way to avoid any false positive is to whitelist them using the whitelisting feature. We don't recommend using the <code>WHITELIST_URI*</code> or <code>WHITELIST_USER_AGENT*</code> settings unless they are set to secret and unpredictable values. Common use cases are :</p> <ul> <li>Healthcheck / status bot</li> <li>Callback like IPN or webhook</li> <li>Social media crawler</li> </ul>"},{"location":"troubleshooting/#common-errors","title":"Common errors","text":""},{"location":"troubleshooting/#upstream-sent-too-big-header","title":"Upstream sent too big header","text":"<p>If you see the following error <code>upstream sent too big header while reading response header from upstream</code> in the logs, you will need to tweak the various proxy buffers size using the following settings :</p> <ul> <li><code>PROXY_BUFFERS</code></li> <li><code>PROXY_BUFFER_SIZE</code></li> <li><code>PROXY_BUSY_BUFFERS_SIZE</code></li> </ul>"},{"location":"troubleshooting/#could-not-build-server_names_hash","title":"Could not build server_names_hash","text":"<p>If you see the following error <code>could not build server_names_hash, you should increase server_names_hash_bucket_size</code> in the logs, you will need to tweak the <code>SERVER_NAMES_HASH_BUCKET_SIZE</code> setting.</p>"},{"location":"troubleshooting/#timezone","title":"Timezone","text":"<p>When using container-based integrations, the timezone of the container may not match that of the host machine. To resolve that, you can set the <code>TZ</code> environment variable to the timezone of your choice on your containers (e.g. <code>TZ=Europe/Paris</code>). You will find the list of timezone identifiers here.</p>"},{"location":"troubleshooting/#web-ui","title":"Web UI","text":"<p>In case you forgot your UI credentials or are experiencing 2FA issues, you can connect to the database to regain access.</p> <p>Access database</p> SQLiteMariaDB / MySQL LinuxDockerAll-in-one <p>Install SQLite (Debian/Ubuntu):</p> <pre><code>sudo apt install sqlite3\n</code></pre> <p>Install SQLite (Fedora/RedHat):</p> <pre><code>sudo dnf install sqlite\n</code></pre> <p>Get a shell into your scheduler container :</p> <p>Docker arguments</p> <ul> <li>the <code>-u 0</code> option is to run the command as root (mandatory)</li> <li>the <code>-it</code> options are to run the command interactively (mandatory)</li> <li><code>&lt;bunkerweb_scheduler_container&gt;</code> : the name or ID of your scheduler container</li> </ul> <pre><code>docker exec -u 0 -it &lt;bunkerweb_scheduler_container&gt; bash\n</code></pre> <p>Install SQLite :</p> <pre><code>apk add sqlite\n</code></pre> <p>Get a shell into your All-in-one container:</p> <p>Docker arguments</p> <ul> <li>the <code>-u 0</code> option is to run the command as root (mandatory).</li> <li>the <code>-it</code> options are to run the command interactively (mandatory).</li> <li><code>bunkerweb-aio</code> is the default container name; adjust if you used a custom name.</li> </ul> <pre><code>docker exec -u 0 -it bunkerweb-aio bash\n</code></pre> <p>Access your database :</p> <p>Database path</p> <p>We assume that you are using the default database path. If you are using a custom path, you will need to adapt the command. For All-in-one, we assume the database is <code>db.sqlite3</code> located in the persistent <code>/data</code> volume (<code>/data/db.sqlite3</code>).</p> <pre><code>sqlite3 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <p>You should see something like this :</p> <pre><code>SQLite version &lt;VER&gt; &lt;DATE&gt;\nEnter \".help\" for usage hints.\nsqlite&gt;\n</code></pre> <p>MariaDB / MySQL only</p> <p>The following steps are only valid for MariaDB / MySQL databases. If you are using another database, please refer to the documentation of your database.</p> <p>Credentials and database name</p> <p>You will need to use the same credentials and database named used in the <code>DATABASE_URI</code> setting.</p> LinuxDockerAll-in-one <p>Access your local database :</p> <pre><code>mysql -u &lt;user&gt; -p &lt;database&gt;\n</code></pre> <p>Then enter the database user\u2019s password and you should be able to access your database.</p> <p>Access your database container :</p> <p>Docker arguments</p> <ul> <li>the <code>-u 0</code> option is to run the command as root (mandatory)</li> <li>the <code>-it</code> options are to run the command interactively (mandatory)</li> <li><code>&lt;bunkerweb_db_container&gt;</code> : the name or ID of your database container</li> <li><code>&lt;user&gt;</code> : the database user</li> <li><code>&lt;database&gt;</code> : the database name</li> </ul> <pre><code>docker exec -u 0 -it &lt;bunkerweb_db_container&gt; mysql -u &lt;user&gt; -p &lt;database&gt;\n</code></pre> <p>Then enter the database user\u2019s password and you should be able to access your database.</p> <p>The All-in-One image does not include a MariaDB/MySQL server. If you have configured the AIO to use an external MariaDB/MySQL database (by setting the <code>DATABASE_URI</code> environment variable), you should connect to that database directly using standard MySQL client tools.</p> <p>The connection method would be similar to the \"Linux\" tab (if connecting from the host where AIO runs or another machine) or by running a MySQL client in a separate Docker container if preferred, targeting your external database's host and credentials.</p> <p>Troubleshooting actions</p> <p>Tables schema</p> <p>The schema of the <code>bw_ui_users</code> table is the following :</p> <pre><code>username VARCHAR(256) PRIMARY KEY NOT NULL\nemail VARCHAR(256) UNIQUE DEFAULT NULL\npassword VARCHAR(60) NOT NULL\nmethod ENUM('ui', 'scheduler', 'autoconf', 'manual', 'wizard') NOT NULL\nadmin BOOLEAN NOT NULL DEFAULT 0\ntheme ENUM('light', 'dark') NOT NULL DEFAULT 'light'\ntotp_secret VARCHAR(256) DEFAULT NULL\ncreation_date DATETIME NOT NULL\nupdate_date DATETIME NOT NULL\n</code></pre> Retrieve usernameUpdate admin user passwordDisable 2FA authentication for admin userRefresh 2FA recovery codes <p>Execute the following command to extract data from the <code>bw_ui_users</code> table :</p> <pre><code>SELECT * FROM bw_ui_users;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light *** *** *** <p>You first need to hash the new password using the bcrypt algorithm.</p> <p>Install the Python bcrypt library :</p> <pre><code>pip install bcrypt\n</code></pre> <p>Generate your hash (replace <code>mypassword</code> with your own password) :</p> <pre><code>python3 -c 'from bcrypt import hashpw, gensalt ; print(hashpw(b\"\"\"mypassword\"\"\", gensalt(rounds=10)).decode(\"utf-8\"))'\n</code></pre> <p>You can update your username / password executing this command :</p> <pre><code>UPDATE bw_ui_users SET password = '&lt;password_hash&gt;' WHERE admin = 1;\n</code></pre> <p>If you check again your <code>bw_ui_users</code> table following this command :</p> <pre><code>SELECT * FROM bw_ui_users WHERE admin = 1;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light *** *** *** <p>You should now be able to use the new credentials to log into the web UI.</p> <p>You can deactivate 2FA by executing this command :</p> <pre><code>UPDATE bw_ui_users SET totp_secret = NULL WHERE admin = 1;\n</code></pre> <p>If you check again your <code>bw_ui_users</code> table by following this command :</p> <pre><code>SELECT * FROM bw_ui_users WHERE admin = 1;\n</code></pre> <p>You should see something like this :</p> username email password method admin theme totp_secret creation_date update_date *** *** *** manual 1 light NULL *** *** <p>You should now be able to log into the web UI only using your username and password without 2FA.</p> <p>The recovery codes can be refreshed in your profile page of the web UI under the <code>Security</code> tab.</p> <p>Upload plugin</p> <p>It may not be possible to upload a plugin from the UI in certain situations:</p> <ul> <li>Missing package to manage compressed files on your integration, in which case you will need to add the necessary packages</li> <li>Safari browser : the 'safe mode' may prevent you from being able to add a plugin. You will need to make the necessary changes on your machine</li> </ul>"},{"location":"upgrading/","title":"Upgrading","text":""},{"location":"upgrading/#upgrade-from-16x","title":"Upgrade from 1.6.X","text":"<p>Read me first</p> <p>We often add new features and settings to BunkerWeb. We recommend you read the settings sections of the documentation or the GitHub releases to see what's new.</p>"},{"location":"upgrading/#procedure","title":"Procedure","text":"<ol> <li> <p>Backup the database:</p> <ul> <li>Before proceeding with the database upgrade, ensure that you perform a complete backup of the current state of the database.</li> <li>Use appropriate tools to backup the entire database, including data, schemas, and configurations.</li> </ul> DockerLinux <pre><code>docker exec -it -e BACKUP_DIRECTORY=/path/to/backup/directory &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/backup/directory /path/to/backup/directory\n</code></pre> <p>Information for Red Hat Enterprise Linux (RHEL) 8.10 users</p> <p>If you are using RHEL 8.10 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <pre><code>BACKUP_DIRECTORY=/path/to/backup/directory bwcli plugin backup save\n</code></pre> </li> <li> <p>Upgrade BunkerWeb:</p> <ul> <li> <p>Upgrade BunkerWeb to the latest version.</p> DockerLinux <ol> <li> <p>Update the Docker Compose file: Update the Docker Compose file to use the new version of the BunkerWeb image.     <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:1.6.4\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:1.6.4\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:1.6.4\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:1.6.4\n        ...\n</code></pre></p> </li> <li> <p>Restart the containers: Restart the containers to apply the changes.     <pre><code>docker compose down\ndocker compose up -d\n</code></pre></p> </li> </ol> <ol> <li> <p>Stop the services:     <pre><code>sudo systemctl stop bunkerweb\nsudo systemctl stop bunkerweb-ui\nsudo systemctl stop bunkerweb-scheduler\n</code></pre></p> </li> <li> <p>Update BunkerWeb:</p> Debian/UbuntuFedora/RedHat <p>First, if you have previously held the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>apt-mark showhold</code></p> <pre><code>sudo apt-mark unhold bunkerweb nginx\n</code></pre> <p>Then, you can update the BunkerWeb package :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y --allow-downgrades bunkerweb=1.6.4\n</code></pre> <p>To prevent the BunkerWeb package from upgrading when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold bunkerweb nginx\n</code></pre> <p>More details in the integration Linux page.</p> <p>First, if you have previously held the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>dnf versionlock list</code></p> <pre><code>sudo dnf versionlock delete package bunkerweb &amp;&amp; \\\nsudo dnf versionlock delete package nginx\n</code></pre> <p>Then, you can update the BunkerWeb package :</p> <pre><code>sudo dnf makecache &amp;&amp; \\\nsudo dnf install -y --allowerasing bunkerweb-1.6.4\n</code></pre> <p>To prevent the BunkerWeb package from upgrading when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add bunkerweb &amp;&amp; \\\nsudo dnf versionlock add nginx\n</code></pre> <p>More details in the integration Linux page.</p> </li> <li> <p>Start the services:         <pre><code>sudo systemctl start bunkerweb\nsudo systemctl start bunkerweb-ui\nsudo systemctl start bunkerweb-scheduler\n</code></pre>         Or reboot the system:         <pre><code>sudo reboot\n</code></pre></p> </li> </ol> </li> </ul> </li> <li> <p>Check the logs: Check the logs of the scheduler service to ensure that the migration was successful.</p> DockerLinux <pre><code>docker compose logs &lt;scheduler_container&gt;\n</code></pre> <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre> </li> <li> <p>Verify the database: Verify that the database upgrade was successful by checking the data and configurations in the new database container.</p> </li> </ol>"},{"location":"upgrading/#rollback","title":"Rollback","text":"<p>In case of issues</p> <p>If you encounter any issues during the upgrade, you can rollback to the previous version of the database by restoring the backup taken in step 1.</p> <p>Get support and more information :</p> <ul> <li>Order professional support</li> <li>Create an issue on GitHub</li> <li>Join the BunkerWeb Discord server</li> </ul> DockerLinux <ol> <li> <p>Extract the backup if zipped.</p> <p>Extract the backup zip file first:</p> <pre><code>unzip /path/to/backup/directory/backup.zip -d /path/to/backup/directory/\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <ol> <li> <p>Remove the existing database file.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; rm -f /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Fix permissions.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; chown root:nginx /var/lib/bunkerweb/db.sqlite3\ndocker exec -u 0 -i &lt;scheduler_container&gt; chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Restore the backup.</p> <pre><code>docker exec -e MYSQL_PWD=&lt;your_password&gt; -i &lt;database_container&gt; mysql -u &lt;username&gt; &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Remove the existing database.</p> <pre><code>docker exec -i &lt;database_container&gt; dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>docker exec -i &lt;database_container&gt; createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;database_container&gt; psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> </li> <li> <p>Downgrade BunkerWeb.</p> <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:&lt;old_version&gt;\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:&lt;old_version&gt;\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:&lt;old_version&gt;\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:&lt;old_version&gt;\n        ...\n</code></pre> </li> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol> <ol> <li> <p>Extract the backup if zipped.</p> <p>Extract the backup zip file first:</p> <pre><code>unzip /path/to/backup/directory/backup.zip -d /path/to/backup/directory/\n</code></pre> </li> <li> <p>Stop the services.</p> <pre><code>sudo systemctl stop bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <pre><code>sudo rm -f /var/lib/bunkerweb/db.sqlite3\nsudo sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\nsudo chown root:nginx /var/lib/bunkerweb/db.sqlite3\nsudo chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <pre><code>mysql -u &lt;username&gt; -p &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> <ol> <li> <p>Remove the existing database.</p> <pre><code>dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> </ol> </li> <li> <p>Start the services.</p> <pre><code>sudo systemctl start bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Downgrade BunkerWeb.</p> <ul> <li>Downgrade BunkerWeb to the previous version by following the same steps as when upgrading BunkerWeb in the integration Linux page</li> </ul> </li> </ol>"},{"location":"upgrading/#upgrade-from-15x","title":"Upgrade from 1.5.X","text":""},{"location":"upgrading/#what-changed","title":"What changed?","text":""},{"location":"upgrading/#scheduler","title":"Scheduler","text":"<p>Unlike the 1.5.X releases, the Scheduler service no longer uses the docker socket proxy to fetch BunkerWeb's instances. Instead, it uses the new <code>BUNKERWEB_INSTANCES</code> environment variable.</p> <p>About the <code>BUNKERWEB_INSTANCES</code> environment variable</p> <p>This new variable is a list of BunkerWeb instances separated by spaces in this format: <code>http://bunkerweb:5000 bunkerweb1:5000 bunkerweb2:5000 ...</code>. The scheduler will then use this list to fetch the instances' configuration and to send the configuration to them.</p> <ul> <li>The <code>http://</code> prefix is optional.</li> <li>The port is optional and defaults to the value of the <code>API_HTTP_PORT</code> environment variable.</li> <li>The default value of the <code>BUNKERWEB_INSTANCES</code> environment variable is <code>127.0.0.1</code>.</li> </ul> <p>In other words, the new system is fully agnostic and generic: the scheduler is in charge of managing a list of BunkerWeb instances and doesn't need to care about the environment.</p> <p>Autoconf/Kubernetes/Swarm integrations</p> <p>If you are using the <code>Autoconf</code>, <code>Kubernetes</code>, or <code>Swarm</code> integrations, you can set the <code>BUNKERWEB_INSTANCES</code> environment variable to an empty string (so that it doesn't try to send the configuration to the default one which is <code>127.0.0.1</code>).</p> <p>The instances will be automatically fetched by the controller. You can also add custom instances to the list that may not be picked up by the controller.</p> <p>Since the <code>1.6</code>, the Scheduler also have a new built-in healthcheck system, that will check the health of the instances. If an instance becomes unhealthy, the scheduler will stop sending the configuration to it. If the instance becomes healthy again, the scheduler will start sending the configuration to it again.</p>"},{"location":"upgrading/#bunkerweb-container","title":"BunkerWeb container","text":"<p>Another important change is that the settings that were previously declared on the BunkerWeb container are now declared on the scheduler. This means that you'll have to move your settings from the BunkerWeb container to the Scheduler container.</p> <p>While the settings are now declared on the Scheduler container, you'll still need to declare api related mandatory settings on the BunkerWeb container like the <code>API_WHITELIST_IP</code> setting which is used to whitelist the Scheduler's IP address, so that it can send the configuration to the instance.</p> <p>BunkerWeb's container settings</p> <p>Every API related setting that you declare on the BunkerWeb container have to be mirrored on the Scheduler container so that it keeps working, as the configuration will be overwritten by the Scheduler's generated configuration.</p>"},{"location":"upgrading/#default-values-and-new-settings","title":"Default values and new settings","text":"<p>We tried our best not to change default value but we have added many other settings. It's highly recommended to read the security tuning and settings sections of the documentation.</p>"},{"location":"upgrading/#templates","title":"Templates","text":"<p>We added a new feature called templates. Templates provide a structured and standardized approach to defining settings and custom configurations, check the concepts/templates section for more information.</p>"},{"location":"upgrading/#autoconf-namespaces","title":"Autoconf namespaces","text":"<p>We added a namespace feature to the autoconf integrations. Namespaces allow you to group your instances and apply settings only to them. Check the following sections according to your Integration for more information:</p> <ul> <li>Autoconf/namespaces</li> <li>Kubernetes/namespaces</li> <li>Swarm/namespaces</li> </ul>"},{"location":"upgrading/#procedure_1","title":"Procedure","text":"<ol> <li> <p>Backup the database:</p> <ul> <li>Before proceeding with the database upgrade, ensure that you perform a complete backup of the current state of the database.</li> <li>Use appropriate tools to backup the entire database, including data, schemas, and configurations.</li> </ul> 1.5.7 and later1.5.6 and earlier DockerLinux <pre><code>docker exec -it -e BACKUP_DIRECTORY=/path/to/backup/directory &lt;scheduler_container&gt; bwcli plugin backup save\n</code></pre> <pre><code>docker cp &lt;scheduler_container&gt;:/path/to/backup/directory /path/to/backup/directory\n</code></pre> <p>Information for Red Hat Enterprise Linux (RHEL) 8.10 users</p> <p>If you are using RHEL 8.10 and plan on using an external database, you will need to install the <code>mysql-community-client</code> package to ensure the <code>mysqldump</code> command is available. You can install the package by executing the following commands:</p> MySQL/MariaDBPostgreSQL <ol> <li> <p>Install the MySQL repository configuration package</p> <pre><code>sudo dnf install https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm\n</code></pre> </li> <li> <p>Enable the MySQL repository</p> <pre><code>sudo dnf config-manager --enable mysql80-community\n</code></pre> </li> <li> <p>Install the MySQL client</p> <pre><code>sudo dnf install mysql-community-client\n</code></pre> </li> </ol> <ol> <li> <p>Install the PostgreSQL repository configuration package</p> <pre><code>dnf install \"https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-$(uname -m)/pgdg-redhat-repo-latest.noarch.rpm\"\n</code></pre> </li> <li> <p>Install the PostgreSQL client</p> <pre><code>dnf install postgresql&lt;version&gt;\n</code></pre> </li> </ol> <pre><code>BACKUP_DIRECTORY=/path/to/backup/directory bwcli plugin backup save\n</code></pre> SQLiteMariaDBMySQLPostgreSQL DockerLinux <p>We first need to install the <code>sqlite</code> package in the container.</p> <pre><code>docker exec -u 0 -it &lt;scheduler_container&gt; apk add sqlite\n</code></pre> <p>Then, backup the database.</p> <pre><code>docker exec -it &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 \".dump\" &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>sqlite3 /var/lib/bunkerweb/db.sqlite3 \".dump\" &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e MYSQL_PWD=&lt;database_password&gt; &lt;database_container&gt; mariadb-dump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>MYSQL_PWD=&lt;database_password&gt; mariadb-dump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e MYSQL_PWD=&lt;database_password&gt; &lt;database_container&gt; mysqldump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>MYSQL_PWD=&lt;database_password&gt; mysqldump -u &lt;username&gt; &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> DockerLinux <pre><code>docker exec -it -e PGPASSWORD=&lt;database_password&gt; &lt;database_container&gt; pg_dump -U &lt;username&gt; -d &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> <pre><code>PGPASSWORD=&lt;database_password&gt; pg_dump -U &lt;username&gt; -d &lt;database_name&gt; &gt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Upgrade BunkerWeb:</p> <ul> <li> <p>Upgrade BunkerWeb to the latest version.</p> DockerLinux <ol> <li> <p>Update the Docker Compose file: Update the Docker Compose file to use the new version of the BunkerWeb image.     <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:1.6.4\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:1.6.4\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:1.6.4\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:1.6.4\n        ...\n</code></pre></p> </li> <li> <p>Restart the containers: Restart the containers to apply the changes.     <pre><code>docker compose down\ndocker compose up -d\n</code></pre></p> </li> </ol> <ol> <li> <p>Stop the services:     <pre><code>sudo systemctl stop bunkerweb\nsudo systemctl stop bunkerweb-ui\n</code></pre></p> </li> <li> <p>Update BunkerWeb:</p> Debian/UbuntuFedora/RedHat <p>First, if you have previously held the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>apt-mark showhold</code></p> <pre><code>sudo apt-mark unhold bunkerweb nginx\n</code></pre> <p>Then, you can update the BunkerWeb package :</p> <pre><code>sudo apt update &amp;&amp; \\\nsudo apt install -y --allow-downgrades bunkerweb=1.6.4\n</code></pre> <p>To prevent the BunkerWeb package from upgrading when executing <code>apt upgrade</code>, you can use the following command :</p> <pre><code>sudo apt-mark hold bunkerweb nginx\n</code></pre> <p>More details in the integration Linux page.</p> <p>First, if you have previously held the BunkerWeb package, unhold it :</p> <p>You can print a list of packages on hold with <code>dnf versionlock list</code></p> <pre><code>sudo dnf versionlock delete package bunkerweb &amp;&amp; \\\nsudo dnf versionlock delete package nginx\n</code></pre> <p>Then, you can update the BunkerWeb package :</p> <pre><code>sudo dnf makecache &amp;&amp; \\\nsudo dnf install -y --allowerasing bunkerweb-1.6.4\n</code></pre> <p>To prevent the BunkerWeb package from upgrading when executing <code>dnf upgrade</code>, you can use the following command :</p> <pre><code>sudo dnf versionlock add bunkerweb &amp;&amp; \\\nsudo dnf versionlock add nginx\n</code></pre> <p>More details in the integration Linux page.</p> </li> <li> <p>Start the services:         <pre><code>sudo systemctl start bunkerweb\nsudo systemctl start bunkerweb-ui\n</code></pre>         Or reboot the system:         <pre><code>sudo reboot\n</code></pre></p> </li> </ol> </li> </ul> </li> <li> <p>Check the logs: Check the logs of the scheduler service to ensure that the migration was successful.</p> DockerLinux <pre><code>docker compose logs &lt;scheduler_container&gt;\n</code></pre> <pre><code>journalctl -u bunkerweb --no-pager\n</code></pre> </li> <li> <p>Verify the database: Verify that the database upgrade was successful by checking the data and configurations in the new database container.</p> </li> </ol>"},{"location":"upgrading/#rollback_1","title":"Rollback","text":"<p>In case of issues</p> <p>If you encounter any issues during the upgrade, you can rollback to the previous version of the database by restoring the backup taken in step 1.</p> <p>Get support and more information :</p> <ul> <li>Order professional support</li> <li>Create an issue on GitHub</li> <li>Join the BunkerWeb Discord server</li> </ul> DockerLinux <ol> <li> <p>Extract the backup if zipped.</p> <p>Extract the backup zip file first:</p> <pre><code>unzip /path/to/backup/directory/backup.zip -d /path/to/backup/directory/\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <ol> <li> <p>Remove the existing database file.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; rm -f /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;scheduler_container&gt; sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Fix permissions.</p> <pre><code>docker exec -u 0 -i &lt;scheduler_container&gt; chown root:nginx /var/lib/bunkerweb/db.sqlite3\ndocker exec -u 0 -i &lt;scheduler_container&gt; chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Restore the backup.</p> <pre><code>docker exec -e MYSQL_PWD=&lt;your_password&gt; -i &lt;database_container&gt; mysql -u &lt;username&gt; &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> <ol> <li> <p>Remove the existing database.</p> <pre><code>docker exec -i &lt;database_container&gt; dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>docker exec -i &lt;database_container&gt; createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>docker exec -i &lt;database_container&gt; psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> <li> <p>Stop the stack.</p> <pre><code>docker compose down\n</code></pre> </li> </ol> </li> <li> <p>Downgrade BunkerWeb.</p> <pre><code>services:\n    bunkerweb:\n        image: bunkerity/bunkerweb:&lt;old_version&gt;\n        ...\n    bw-scheduler:\n        image: bunkerity/bunkerweb-scheduler:&lt;old_version&gt;\n        ...\n    bw-autoconf:\n        image: bunkerity/bunkerweb-autoconf:&lt;old_version&gt;\n        ...\n    bw-ui:\n        image: bunkerity/bunkerweb-ui:&lt;old_version&gt;\n        ...\n</code></pre> </li> <li> <p>Start the containers.</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol> <ol> <li> <p>Extract the backup if zipped.</p> <p>Extract the backup zip file first:</p> <pre><code>unzip /path/to/backup/directory/backup.zip -d /path/to/backup/directory/\n</code></pre> </li> <li> <p>Stop the services.</p> <pre><code>sudo systemctl stop bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Restore the backup.</p> SQLiteMySQL/MariaDBPostgreSQL <pre><code>sudo rm -f /var/lib/bunkerweb/db.sqlite3\nsudo sqlite3 /var/lib/bunkerweb/db.sqlite3 &lt; /path/to/backup/directory/backup.sql\nsudo chown root:nginx /var/lib/bunkerweb/db.sqlite3\nsudo chmod 770 /var/lib/bunkerweb/db.sqlite3\n</code></pre> <pre><code>mysql -u &lt;username&gt; -p &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> <ol> <li> <p>Remove the existing database.</p> <pre><code>dropdb -U &lt;username&gt; --force &lt;database_name&gt;\n</code></pre> </li> <li> <p>Recreate the database.</p> <pre><code>createdb -U &lt;username&gt; &lt;database_name&gt;\n</code></pre> </li> <li> <p>Restore the backup.</p> <pre><code>psql -U &lt;username&gt; -d &lt;database_name&gt; &lt; /path/to/backup/directory/backup.sql\n</code></pre> </li> </ol> </li> <li> <p>Start the services.</p> <pre><code>sudo systemctl start bunkerweb bunkerweb-ui bunkerweb-scheduler\n</code></pre> </li> <li> <p>Downgrade BunkerWeb.</p> <ul> <li>Downgrade BunkerWeb to the previous version by following the same steps as when upgrading BunkerWeb in the integration Linux page</li> </ul> </li> </ol>"},{"location":"web-ui/","title":"Web UI","text":""},{"location":"web-ui/#overview","title":"Overview","text":"<p>The \"Web UI\" is a web application that helps you manage your BunkerWeb instance using a user-friendly interface instead of relying solely on the command line.</p> <p>Here is a list of features offered by the web UI:</p> <ul> <li>Get a comprehensive view of blocked attacks</li> <li>Start, stop, restart, and reload your BunkerWeb instance</li> <li>Add, edit, and delete settings for your web applications</li> <li>Add, edit, and delete custom configurations for NGINX and ModSecurity</li> <li>Install and uninstall external plugins</li> <li>Explore cached files</li> <li>Monitor job execution and restart them as needed</li> <li>View logs and search for patterns</li> </ul>"},{"location":"web-ui/#prerequisites","title":"Prerequisites","text":"<p>Since the web UI is a web application, the recommended architecture is to run BunkerWeb in front of it as a reverse proxy. The recommended installation procedure is to use the setup wizard, which will guide you step by step as described in the quickstart guide.</p> <p>Security considerations</p> <p>The security of the web UI is extremely important. If an unauthorized person gains access to the application, not only will they be able to edit your configurations, but they might also execute code in the context of BunkerWeb (for example, via a custom configuration containing LUA code). We highly recommend that you follow minimal security best practices, such as:</p> <ul> <li>Choose a strong password for the login (at least 8 characters, including 1 lowercase letter, 1 uppercase letter, 1 digit, and 1 special character)</li> <li>Place the web UI under a \"hard-to-guess\" URI</li> <li>Enable two-factor authentication (2FA)</li> <li>Do not expose the web UI on the Internet without additional restrictions</li> <li>Apply best practices listed in the advanced usages section of the documentation depending on your use case</li> </ul>"},{"location":"web-ui/#upgrade-to-pro","title":"Upgrade to PRO","text":"<p>BunkerWeb PRO free trial</p> <p>Want to quickly test BunkerWeb PRO for one month? Use the code <code>freetrial</code> when placing your order on the BunkerWeb panel or by clicking here to directly to apply the promo code (will be effective at checkout).</p> <p>Once you have your PRO license key from the BunkerWeb panel, you can paste it into the PRO page of the web UI.</p> <p> </p> Upgrade to PRO from the web UI <p>Upgrade time</p> <p>The PRO version is downloaded in the background by the scheduler, it may take some time to upgrade.</p> <p>When your BunkerWeb instance has upgraded to the PRO version, you will see your license expiration date and the maximum number of services you can protect.</p> <p> </p> PRO license information"},{"location":"web-ui/#accessing-logs","title":"Accessing logs","text":"<p>Beginning with version <code>1.6</code>, the method of accessing logs has changed. This update specifically impacts container-based integrations: the web UI will now read the log files from the <code>/var/log/bunkerweb</code> directory.</p> <p>To keep the logs accessible from the web UI, we recommend that you use a syslog server, such as <code>syslog-ng</code>, to read the logs and create the corresponding files in the <code>/var/log/bunkerweb</code> directory.</p> <p>Using local folder for logs</p> <p>The web UI runs as an unprivileged user with UID 101 and GID 101 inside the container for security reasons: in case a vulnerability is exploited, the attacker won't have full root (UID/GID 0) privileges.</p> <p>However, there is a downside: if you use a local folder for logs, you must set the correct permissions so that the unprivileged user can read the log files. For example:</p> <pre><code>mkdir bw-logs &amp;&amp; \\\nchown root:101 bw-logs &amp;&amp; \\\nchmod 770 bw-logs\n</code></pre> <p>Alternatively, if the folder already exists:</p> <pre><code>chown -R root:101 bw-logs &amp;&amp; \\\nchmod -R 770 bw-logs\n</code></pre> <p>If you are using Docker in rootless mode or podman, UIDs and GIDs in the container will be mapped to different ones in the host. You will first need to check your initial subuid and subgid:</p> <pre><code>grep ^$(whoami): /etc/subuid &amp;&amp; \\\ngrep ^$(whoami): /etc/subgid\n</code></pre> <p>For example, if you have a value of 100000, the mapped UID/GID will be 100100 (100000 + 100):</p> <pre><code>mkdir bw-logs &amp;&amp; \\\nsudo chgrp 100100 bw-logs &amp;&amp; \\\nchmod 770 bw-logs\n</code></pre> <p>Or if the folder already exists:</p> <pre><code>sudo chgrp -R 100100 bw-logs &amp;&amp; \\\nsudo chmod -R 770 bw-logs\n</code></pre>"},{"location":"web-ui/#compose-boilerplates","title":"Compose boilerplates","text":"DockerDocker Autoconf <p>To forward the logs correctly to the <code>/var/log/bunkerweb</code> directory on the Docker integration, you will need to stream the logs to a file using <code>syslog-ng</code>. Here is an example of how to do this:</p> <pre><code>x-bw-env: &amp;bw-env\n  # We anchor the environment variables to avoid duplication\n  API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      &lt;&lt;: *bw-env\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    logging:\n      driver: syslog\n      options:\n        tag: \"bunkerweb\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"www.example.com\"\n      MULTISITE: \"yes\"\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      SERVE_FILES: \"no\"\n      DISABLE_DEFAULT_SERVER: \"yes\"\n      USE_CLIENT_CACHE: \"yes\"\n      USE_GZIP: \"yes\"\n      www.example.com_USE_TEMPLATE: \"ui\"\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/changeme\" # Change it to a hard-to-guess URI\n      www.example.com_REVERSE_PROXY_HOST: \"http://bw-ui:7000\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-scheduler\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the admin user\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-ui\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n      bw-universe:\n        ipv4_address: 10.20.30.254 # Make sure to set the correct IP address\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>To forward the logs correctly to the <code>/var/log/bunkerweb</code> directory on the Autoconf integration, you will need to stream the logs to a file using <code>syslog-ng</code>. Here is an example of how to do this:</p> <pre><code>x-ui-env: &amp;bw-ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # QUIC\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-services\n    logging:\n      driver: syslog\n      options:\n        tag: \"bunkerweb\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      BUNKERWEB_INSTANCES: \"\" # We don't need to specify the BunkerWeb instance here as they are automatically detected by the autoconf service\n      SERVER_NAME: \"\" # The server name will be filled with services labels\n      MULTISITE: \"yes\" # Mandatory setting for autoconf / ui\n      API_WHITELIST_IP: \"127.0.0.0/24 10.20.30.0/24\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-scheduler\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    depends_on:\n      - bunkerweb\n      - bw-docker\n    environment:\n      &lt;&lt;: *bw-ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\" # This is the Docker socket address\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-autoconf\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *bw-ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the admin user\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    volumes:\n      - bw-logs:/var/log/bunkerweb\n    restart: \"unless-stopped\"\n    networks:\n      - bw-universe\n      - bw-db\n    labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_TEMPLATE=ui\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/changeme\" # Change it to a hard-to-guess URI\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n    logging:\n      driver: syslog\n      options:\n        tag: \"bw-ui\" # This will be the tag used by syslog-ng to create the log file\n        syslog-address: \"udp://10.20.30.254:514\" # This is the syslog-ng container address\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    restart: \"unless-stopped\"\n    networks:\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    restart: \"unless-stopped\"\n    networks:\n      - bw-docker\n\n  bw-syslog:\n    image: balabit/syslog-ng:4.8.0\n    # image: lscr.io/linuxserver/syslog-ng:4.8.1-r1-ls147 # For aarch64 architecture\n    cap_add:\n      - NET_BIND_SERVICE  # Bind to low ports\n      - NET_BROADCAST  # Send broadcasts\n      - NET_RAW  # Use raw sockets\n      - DAC_READ_SEARCH  # Read files bypassing permissions\n      - DAC_OVERRIDE  # Override file permissions\n      - CHOWN  # Change ownership\n      - SYSLOG  # Write to system logs\n    volumes:\n      - bw-logs:/var/log/bunkerweb # This is the volume used to store the logs\n      - ./syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf # This is the syslog-ng configuration file\n    networks:\n      bw-universe:\n        ipv4_address: 10.20.30.254 # Make sure to set the correct IP address\n\nvolumes:\n  bw-data:\n  bw-storage:\n  bw-logs:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n  bw-docker:\n    name: bw-docker\n</code></pre>"},{"location":"web-ui/#syslog-ng-configuration","title":"Syslog-ng configuration","text":"<p>Here is an example of a <code>syslog-ng.conf</code> file that you can use to forward the logs to a file:</p> <pre><code>@version: 4.8\n\n# Source configuration to receive logs from Docker containers\nsource s_net {\n  udp(\n    ip(\"0.0.0.0\")\n  );\n};\n\n# Template to format log messages\ntemplate t_imp {\n  template(\"$MSG\\n\");\n  template_escape(no);\n};\n\n# Destination configuration to write logs to dynamically named files\ndestination d_dyna_file {\n  file(\n    \"/var/log/bunkerweb/${PROGRAM}.log\"\n    template(t_imp)\n    owner(\"101\")\n    group(\"101\")\n    dir_owner(\"root\")\n    dir_group(\"101\")\n    perm(0440)\n    dir_perm(0770)\n    create_dirs(yes)\n  );\n};\n\n# Log path to direct logs to dynamically named files\nlog {\n  source(s_net);\n  destination(d_dyna_file);\n};\n</code></pre>"},{"location":"web-ui/#account-management","title":"Account management","text":"<p>You can access the account management page by clicking on the profile image in the top right corner:</p> <p> </p> Account page access from top right corner"},{"location":"web-ui/#username-password","title":"Username / Password","text":"<p>Lost password/username</p> <p>In case you forgot your UI credentials, you can reset them from the CLI following the steps described in the troubleshooting section.</p> <p>You can update your username or password by filling the dedicated forms in the Security tab. For security reason, you need to enter your current password even if you are connected.</p> <p>Please note that when your username or password is updated, you will be logout from the web UI to log in again.</p> <p> </p> Username / Password form"},{"location":"web-ui/#two-factor-authentication","title":"Two-Factor authentication","text":"<p>Mandatory encryption keys</p> <p>When enabling 2FA, you must provide at least one encryption key. This key will be used to encrypt your TOTP secrets.</p> <p>The recommended way to generate a valid key is to use the <code>passlib</code> package:</p> <pre><code>python3 -c \"from passlib import totp; print(totp.generate_secret())\"\n</code></pre> <p>Set the generated key in the <code>TOTP_ENCRYPTION_KEYS</code> environment variable of the web UI. You can also set multiple keys separated by spaces or as a dictionary (for backward compatibility).</p> <p>Lost secret key</p> <p>In case you lost your secret key, two options are available:</p> <ul> <li>You can recover your account using one of the provided recovery codes when you enabled 2FA (a recovery code can only be used once).</li> <li>You can disable 2FA from the CLI following the steps described in the troubleshooting section.</li> </ul> <p>You can power-up your login security by adding Two-Factor Authentication (2FA) to your account. By doing so, an extra code will be needed in addition to your password.</p> <p>The web UI uses Time based One Time Password (TOTP) as 2FA implementation: using a secret key, the algorithm will generate one time passwords only valid for a short period of time.</p> <p>Any TOTP client such as Google Authenticator, Authy, FreeOTP, ... can be used to store the secret key and generate the codes. Please note that once TOTP is enabled, you won't be able to retrieve it from the web UI.</p> <p>The following steps are needed to enable the TOTP feature from the web UI:</p> <ul> <li>Copy the secret key or use the QR code on your authenticator app</li> <li>Enter the current TOTP code in the 2FA input</li> <li>Enter your current password</li> </ul> <p>Secret key refresh</p> <p>A new secret key is generated each time you visit the page or submit the form. In case something went wrong (e.g.: expired TOTP code), you will need to copy the new secret key to your authenticator app until 2FA is successfully enabled.</p> <p>Recovery codes</p> <p>When you enable 2FA, you will be provided with 5 recovery codes. These codes can be used to recover your account in case you have lost your TOTP secret key. Each code can only be used once. These codes will only be shown once so make sure to store them in a safe place.</p> <p>If you ever lose your recovery codes, you can refresh them via the TOTP section of the account management page. Please note that the old recovery codes will be invalidated.</p> <p>You can enable or disable 2FA and also refresh recovery codes in the Security tab:</p> <p> </p> TOTP enable / disable / refresh recovery codes forms <p>After a successful login/password combination, you will be prompted to enter your TOTP code:</p> <p> </p> 2FA on login page"},{"location":"web-ui/#current-sessions","title":"Current sessions","text":"<p>In the Session tab, you will be able to list and revoke current sessions:</p> <p> </p> Manage sessions"},{"location":"web-ui/#advanced-installation","title":"Advanced installation","text":"<p>The web UI can be deployed and configured without going through the setup wizard process: configuration is done through environment variables, which can be added directly to the containers or in the <code>/etc/bunkerweb/ui.env</code> file in the case of a Linux integration.</p> <p>Web UI specific environment variables</p> <p>The web UI uses the following environment variables:</p> <ul> <li><code>OVERRIDE_ADMIN_CREDS</code>: set it to <code>yes</code> to enable the override even if the admin credentials are already set (default is <code>no</code>).</li> <li><code>ADMIN_USERNAME</code>: username to access the web UI.</li> <li><code>ADMIN_PASSWORD</code>: password to access the web UI.</li> <li><code>FLASK_SECRET</code>: a secret key used to encrypt the session cookie (if not set, a random key will be generated).</li> <li><code>TOTP_ENCRYPTION_KEYS</code> (or <code>TOTP_SECRETS</code>): a list of TOTP encryption keys separated by spaces or a dictionary (e.g.: <code>{\"1\": \"mysecretkey\"}</code> or <code>mysecretkey</code> or <code>mysecretkey mysecretkey1</code>). We strongly recommend you to set this variable if you want to use 2FA, as it will be used to encrypt the TOTP secret keys (if not set, a random number of secret keys will be generated). Check out the passlib documentation for more information.</li> <li><code>LISTEN_ADDR</code>: the address where the web UI will listen (default is <code>0.0.0.0</code> in Docker images and <code>127.0.0.1</code> on Linux installations).</li> <li><code>LISTEN_PORT</code>: the port where the web UI will listen (default is <code>7000</code>).</li> <li><code>MAX_WORKERS</code>: the number of workers used by the web UI (default is the number of CPUs).</li> <li><code>MAX_THREADS</code>: the number of threads used by the web UI (default is <code>MAX_WORKERS</code> * 2).</li> <li><code>FORWARDED_ALLOW_IPS</code>: a list of IP addresses or networks that are allowed to be used in the <code>X-Forwarded-For</code> header (default is <code>*</code> in Docker images and <code>127.0.0.1</code> on Linux installations).</li> <li><code>CHECK_PRIVATE_IP</code>: set it to <code>yes</code> to not disconnect users that have their IP address changed during a session if they are in a private network (default is <code>yes</code>). (Non-private IP addresses are always checked).</li> <li><code>ENABLE_HEALTHCHECK</code>: set it to <code>yes</code> to enable the <code>/healthcheck</code> endpoint that returns a simple JSON response with status information (default is <code>no</code>).</li> </ul> <p>The web UI will use these variables to authenticate you and handle the 2FA feature.</p> <p>Generating recommended secrets</p> <p>To generate a valid ADMIN_PASSWORD, we recommend you to use a password manager or a password generator.</p> <p>You can generate a valid FLASK_SECRET using the following command:</p> <pre><code>python3 -c \"import secrets; print(secrets.token_hex(64))\"\n</code></pre> <p>You can generate valid space-separated TOTP_ENCRYPTION_KEYS using the following command (you will need the <code>passlib</code> package):</p> <pre><code>python3 -c \"from passlib import totp; print(totp.generate_secret())\"\n</code></pre> LinuxDockerDocker autoconfKubernetesSwarm <p>The installation of the web UI using the Linux integration is pretty straightforward because it is installed with BunkerWeb.</p> <p>The web UI comes as systemd service named <code>bunkerweb-ui</code>, please ensure that it's enabled:</p> <pre><code>sudo systemctl enable bunkerweb-ui &amp;&amp; \\\nsudo systemctl status bunkerweb-ui\n</code></pre> <p>A dedicated environment file located at <code>/etc/bunkerweb/ui.env</code> is used to configure the web UI:</p> <pre><code>ADMIN_USERNAME=changeme\nADMIN_PASSWORD=changeme\nTOTP_ENCRYPTION_KEYS=mysecret\n</code></pre> <p>Replace the <code>changeme</code> data with your own values.</p> <p>Remember to set a stronger secret key for the <code>TOTP_ENCRYPTION_KEYS</code>.</p> <p>Each time you edit the <code>/etc/bunkerweb/ui.env</code> file, you will need to restart the service:</p> <pre><code>systemctl restart bunkerweb-ui\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. Please note that the web UI is listening on the <code>7000</code> port and only on the loopback interface.</p> <p>Here is the <code>/etc/bunkerweb/variables.env</code> boilerplate you can use:</p> <pre><code>HTTP_PORT=80\nHTTPS_PORT=443\nDNS_RESOLVERS=9.9.9.9 8.8.8.8 8.8.4.4\nAPI_LISTEN_IP=127.0.0.1\nSERVER_NAME=www.example.com\nMULTISITE=yes\nwww.example.com_USE_TEMPLATE=ui\nwww.example.com_USE_REVERSE_PROXY=yes\nwww.example.com_REVERSE_PROXY_URL=/changeme\nwww.example.com_REVERSE_PROXY_HOST=http://127.0.0.1:7000\n</code></pre> <p>Don't forget to reload the <code>bunkerweb</code> service:</p> <pre><code>systemctl reload bunkerweb\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself:</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the docker-compose files in the misc/integrations folder of the repository.</p> <p>Here is the docker-compose boilerplate that you can use (don't forget to edit the <code>changeme</code> data):</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    environment:\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # Make sure to set the correct IP range so the scheduler can send the configuration to the instance\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"bunkerweb\" # Make sure to set the correct instance name\n      SERVER_NAME: \"www.example.com\"\n      MULTISITE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\" # We mirror the API_WHITELIST_IP from the bunkerweb service\n      SERVE_FILES: \"no\"\n      DISABLE_DEFAULT_SERVER: \"yes\"\n      USE_CLIENT_CACHE: \"yes\"\n      USE_GZIP: \"yes\"\n      www.example.com_USE_TEMPLATE: \"ui\"\n      www.example.com_USE_REVERSE_PROXY: \"yes\"\n      www.example.com_REVERSE_PROXY_URL: \"/changeme\" # Remember to set a stronger URI\n      www.example.com_REVERSE_PROXY_HOST: \"http://bw-ui:7000\" # The web UI container is listening on the 7000 port by default\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-db:\n    name: bw-db\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself:</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Environment variables</p> <p>Please read the Prerequisites section to check out all the environment variables you can set to customize the web UI.</p> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler and autoconf) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the docker-compose files in the misc/integrations folder of the repository.</p> <p>Here is the docker-compose boilerplate that you can use (don't forget to edit the <code>changeme</code> data):</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  AUTOCONF_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - \"80:8080/tcp\"\n      - \"443:8443/tcp\"\n      - \"443:8443/udp\" # For QUIC / HTTP3 support\n    labels:\n      - \"bunkerweb.INSTANCE=yes\" # We set the instance label to allow the autoconf to detect the instance\n    environment:\n      AUTOCONF_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    networks:\n      - bw-universe\n      - bw-services\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    depends_on:\n      - bw-docker\n    environment:\n      &lt;&lt;: *ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONTAINERS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    labels:\n      - \"bunkerweb.SERVER_NAME=www.example.com\"\n      - \"bunkerweb.USE_TEMPLATE=ui\"\n      - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n      - \"bunkerweb.REVERSE_PROXY_URL=/changeme\"\n      - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n    networks:\n      - bw-universe\n      - bw-db\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n  bw-docker:\n    name: bw-docker\n  bw-db:\n    name: bw-db\n</code></pre> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub and you can deploy as a standard Deployment.</p> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. Network segmentation between web UI and web services is not covered in this documentation. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the yaml files in the misc/integrations folder of the repository.</p> <p>Here is the corresponding part of your values.yaml file that you can use:</p> <pre><code>settings:\n  # Use an existing secret named bunkerweb and containing the following values:\n  # - admin-username\n  # - admin-password\n  # - flask-secret\n  # - totp-secrets\n  existingSecret: \"secret-bunkerweb\"\nui:\n  wizard: false\n  ingress:\n    enabled: true\n    serverName: \"www.example.com\"\n    serverPath: \"/admin\"\n  overrideAdminCreds: \"yes\"\n</code></pre> <p>Deprecated</p> <p>The Swarm integration is deprecated and will be removed in a future release. Please consider using the Kubernetes integration instead.</p> <p>More information can be found in the Swarm integration documentation.</p> <p>The web UI can be deployed using a dedicated container which is available on Docker Hub:</p> <pre><code>docker pull bunkerity/bunkerweb-ui\n</code></pre> <p>Alternatively, you can also build it yourself:</p> <pre><code>git clone https://github.com/bunkerity/bunkerweb.git &amp;&amp; \\\ncd bunkerweb &amp;&amp; \\\ndocker build -t my-bunkerweb-ui -f src/ui/Dockerfile .\n</code></pre> <p>Accessing the web UI through BunkerWeb is a classical reverse proxy setup. We recommend you to connect BunkerWeb and web UI using a dedicated network (like <code>bw-universe</code> also used by the scheduler and autoconf) so it won't be on the same network of your web services for obvious security reasons. Please note that the web UI container is listening on the <code>7000</code> port.</p> <p>Database backend</p> <p>If you want another Database backend than MariaDB please refer to the stack files in the misc/integrations folder of the repository.</p> <p>Here is the stack boilerplate that you can use (don't forget to edit the <code>changeme</code> data):</p> <pre><code>x-ui-env: &amp;ui-env\n  # We anchor the environment variables to avoid duplication\n  SWARM_MODE: \"yes\"\n  DATABASE_URI: \"mariadb+pymysql://bunkerweb:changeme@bw-db:3306/db\" # Remember to set a stronger password for the database\n\nservices:\n  bunkerweb:\n    image: bunkerity/bunkerweb:1.6.4\n    ports:\n      - published: 80\n        target: 8080\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: tcp\n      - published: 443\n        target: 8443\n        mode: host\n        protocol: udp # For QUIC / HTTP3 support\n    environment:\n      SWARM_MODE: \"yes\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n    networks:\n      - bw-universe\n      - bw-services\n    deploy:\n      mode: global\n      placement:\n        constraints:\n          - \"node.role == worker\"\n      labels:\n        - \"bunkerweb.INSTANCE=yes\"\n\n  bw-scheduler:\n    image: bunkerity/bunkerweb-scheduler:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      BUNKERWEB_INSTANCES: \"\"\n      SERVER_NAME: \"\"\n      API_WHITELIST_IP: \"127.0.0.0/8 10.20.30.0/24\"\n      MULTISITE: \"yes\"\n      USE_REDIS: \"yes\"\n      REDIS_HOST: \"bw-redis\"\n    volumes:\n      - bw-storage:/data # This is used to persist the cache and other data like the backups\n    networks:\n      - bw-universe\n      - bw-db\n\n  bw-autoconf:\n    image: bunkerity/bunkerweb-autoconf:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      DOCKER_HOST: \"tcp://bw-docker:2375\"\n    networks:\n      - bw-universe\n      - bw-docker\n      - bw-db\n\n  bw-docker:\n    image: tecnativa/docker-socket-proxy:nightly\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      CONFIGS: \"1\"\n      CONTAINERS: \"1\"\n      SERVICES: \"1\"\n      SWARM: \"1\"\n      TASKS: \"1\"\n      LOG_LEVEL: \"warning\"\n    networks:\n      - bw-docker\n    deploy:\n      placement:\n        constraints:\n          - \"node.role == manager\"\n\n  bw-db:\n    image: mariadb:11\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"yes\"\n      MYSQL_DATABASE: \"db\"\n      MYSQL_USER: \"bunkerweb\"\n      MYSQL_PASSWORD: \"changeme\" # Remember to set a stronger password for the database\n    volumes:\n      - bw-data:/var/lib/mysql\n    networks:\n      - bw-db\n\n  bw-redis:\n    image: redis:7-alpine\n    networks:\n      - bw-universe\n\n  bw-ui:\n    image: bunkerity/bunkerweb-ui:1.6.4\n    environment:\n      &lt;&lt;: *ui-env\n      ADMIN_USERNAME: \"changeme\"\n      ADMIN_PASSWORD: \"changeme\" # Remember to set a stronger password for the changeme user\n      TOTP_ENCRYPTION_KEYS: \"mysecret\" # Remember to set a stronger secret key (see the Prerequisites section)\n    networks:\n      - bw-universe\n      - bw-db\n    deploy:\n      labels:\n        - \"bunkerweb.SERVER_NAME=www.example.com\"\n        - \"bunkerweb.USE_TEMPLATE=ui\"\n        - \"bunkerweb.USE_REVERSE_PROXY=yes\"\n        - \"bunkerweb.REVERSE_PROXY_URL=/changeme\"\n        - \"bunkerweb.REVERSE_PROXY_HOST=http://bw-ui:7000\"\n\nvolumes:\n  bw-data:\n  bw-storage:\n\nnetworks:\n  bw-universe:\n    name: bw-universe\n    driver: overlay\n    attachable: true\n    ipam:\n      config:\n        - subnet: 10.20.30.0/24\n  bw-services:\n    name: bw-services\n    driver: overlay\n    attachable: true\n  bw-docker:\n    name: bw-docker\n    driver: overlay\n    attachable: true\n  bw-db:\n    name: bw-db\n    driver: overlay\n    attachable: true\n</code></pre>"},{"location":"web-ui/#language-support-localization","title":"Language Support &amp; Localization","text":"<p>The BunkerWeb UI supports multiple languages. Translations are managed in the <code>src/ui/app/static/locales</code> directory. The following languages are currently available:</p> <ul> <li>English (en)</li> <li>French (fr)</li> <li>Arabic (ar)</li> <li>Bengali (bn)</li> <li>Spanish (es)</li> <li>Hindi (hi)</li> <li>Portuguese (pt)</li> <li>Russian (ru)</li> <li>Urdu (ur)</li> <li>Chinese (zh)</li> <li>German (de)</li> <li>Italian (it)</li> </ul> <p>See the locales/README.md for details on translation provenance and review status.</p>"},{"location":"web-ui/#contributing-translations","title":"Contributing Translations","text":"<p>We welcome contributions to improve or add new locale files!</p> <p>How to contribute a translation:</p> <ol> <li>Edit the <code>src/ui/app/lang_config.py</code> file to add your language (code, name, flag, english_name).</li> <li>Copy <code>en.json</code> as a template in <code>src/ui/app/static/locales/</code>, rename it to your language code (e.g., <code>de.json</code> for German).</li> <li>Translate the values in your new file.</li> <li>Update the table in <code>locales/README.md</code> to add your language and indicate who created/reviewed it.</li> <li>Submit a pull request.</li> </ol> <p>For updates, edit the relevant file and update the provenance table as needed.</p> <p>See the locales/README.md for full guidelines.</p>"}]}