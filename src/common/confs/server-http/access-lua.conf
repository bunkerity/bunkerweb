access_by_lua_block {
	local clogger       = require "bunkerweb.logger"
	local helpers       = require "bunkerweb.helpers"
	local utils         = require "bunkerweb.utils"
	local cdatastore    = require "bunkerweb.datastore"

	local ngx = ngx
	local ngx_req = ngx.req
	local is_internal = ngx_req.is_internal
	local exit = ngx.exit
	local ngx_redirect = ngx.redirect
	local ERR = ngx.ERR
	local INFO = ngx.INFO
	local WARN = ngx.WARN
	local NOTICE = ngx.NOTICE
	local OK = ngx.OK
	local HTTP_MOVED_TEMPORARILY = ngx.HTTP_MOVED_TEMPORARILY
	local HTTP_TOO_MANY_REQUESTS = ngx.HTTP_TOO_MANY_REQUESTS
	local fill_ctx = helpers.fill_ctx
	local save_ctx = helpers.save_ctx
	local require_plugin = helpers.require_plugin
	local new_plugin = helpers.new_plugin
	local call_plugin = helpers.call_plugin
	local is_whitelisted = utils.is_whitelisted
	local is_banned = utils.is_banned
	local set_reason = utils.set_reason
	local get_deny_status = utils.get_deny_status
	local save_session = utils.save_session
	local get_security_mode = utils.get_security_mode
	local tostring = tostring

	-- Don't process internal requests
	local logger        = clogger:new("ACCESS")
	if is_internal() then
		logger:log(INFO, "skipped access phase because request is internal")
		return true
	end

	-- Start access phase
	local datastore = cdatastore:new()
	logger:log(INFO, "access phase started")

	-- Fill ctx
	logger:log(INFO, "filling ngx.ctx ...")
	local ok, ret, errors, ctx = fill_ctx()
	if not ok then
		logger:log(ERR, "fill_ctx() failed : " .. ret)
	elseif errors then
		for i, error in ipairs(errors) do
			logger:log(ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
		end
	end
	logger:log(INFO, "ngx.ctx filled (ret = " .. ret .. ")")

	-- Get security mode
	local security_mode = get_security_mode(ctx)

	-- Process bans as soon as possible
	if not is_whitelisted(ctx) then
		local banned, reason, ttl, reason_data = is_banned(ctx.bw.remote_addr, ctx.bw.server_name)
		if banned == nil then
			logger:log(ERR, "can't check if IP " .. ctx.bw.remote_addr .. " is banned : " .. reason)
		elseif banned then
			ctx.bw.is_banned = true
			set_reason(reason, reason_data, ctx, security_mode)
			save_ctx(ctx)
			if security_mode == "block" then
				logger:log(WARN,
					"IP " .. ctx.bw.remote_addr .. " is banned with reason " .. reason .. " (" .. tostring(ttl) .. "s remaining)")
				return exit(get_deny_status())
			end
			logger:log(WARN,
					"detected IP " .. ctx.bw.remote_addr .. " ban with reason " .. reason .. " (" .. tostring(ttl) .. "s remaining)")
			return exit(OK)
		else
			logger:log(INFO, "IP " .. ctx.bw.remote_addr .. " is not banned")
		end
	end

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call access() methods
	logger:log(INFO, "calling access() methods of plugins ...")
	local status = nil
	local redirect = nil
	for i, plugin_id in ipairs(order.access) do
		-- Require call
		local plugin_lua, err = require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ERR, err)
		elseif plugin_lua == nil then
			logger:log(INFO, err)
		else
			-- Check if plugin has access method
			if plugin_lua.access ~= nil then
				-- New call
				local ok, plugin_obj = new_plugin(plugin_lua, ctx)
				if not ok then
					logger:log(ERR, plugin_obj)
				else
					local ok, ret = call_plugin(plugin_obj, "access")
					if not ok then
						logger:log(ERR, ret)
					elseif not ret.ret then
						logger:log(ERR, plugin_id .. ":access() call failed : " .. ret.msg)
					else
						logger:log(INFO, plugin_id .. ":access() call successful : " .. ret.msg)
					end
					if ret.status and not ret.redirect then
						if security_mode == "detect" then
							if is_whitelisted(ctx) then
								logger:log(WARN, "detected allow access from " .. plugin_id .. " : " .. ret.msg)
							else
								logger:log(WARN, "detected deny access from " .. plugin_id .. " : " .. ret.msg)
							end
							break
						elseif ret.status == get_deny_status() or ret.status == HTTP_TOO_MANY_REQUESTS then
							set_reason(plugin_id, ret.data, ctx)
							if is_whitelisted(ctx) then
								logger:log(WARN, "allowed access from " .. plugin_id .. " : " .. ret.msg)
							else
								logger:log(WARN, "denied access from " .. plugin_id .. " : " .. ret.msg)
							end
						else
							logger:log(NOTICE, plugin_id .. " returned status " .. tostring(ret.status) .. " : " .. ret.msg)
						end
						status = ret.status
						break
					elseif ret.redirect then
						if ret.status then
							status = ret.status
						end
						logger:log(NOTICE, plugin_id .. " redirect to " .. ret.redirect .. " : " .. ret.msg)
						redirect = ret.redirect
						ctx.bw.location_header = redirect
						break
					end
				end
			else
				logger:log(INFO, "skipped execution of " .. plugin_id .. " because method access() is not defined")
			end
		end
	end
	logger:log(INFO, "called access() methods of plugins")

	-- Save session
	ok, err = save_session(ctx)
	if ok then
		logger:log(INFO, err)
	else
		logger:log(ERR, err)
	end

	-- Save ctx
	save_ctx(ctx)

	logger:log(INFO, "access phase ended")

	-- Return status if needed
	if status then
		return exit(status)
	end

	-- Redirect if needed
	if redirect then
		return ngx_redirect(redirect, status or HTTP_MOVED_TEMPORARILY)
	end

	return true
}
