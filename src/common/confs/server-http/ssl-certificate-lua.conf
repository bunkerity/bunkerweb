ssl_certificate /var/cache/bunkerweb/misc/default-server-cert.pem;
ssl_certificate_key /var/cache/bunkerweb/misc/default-server-cert.key;
ssl_protocols {{ SSL_PROTOCOLS }};
{% if SSL_PROTOCOLS == "TLSv1.3" %}
ssl_prefer_server_ciphers off;
{% else %}
ssl_prefer_server_ciphers on;
{% endif %}
ssl_session_tickets off;
{% if "TLSv1.2" in SSL_PROTOCOLS or "TLSv1.1" in SSL_PROTOCOLS or "TLSv1" in SSL_PROTOCOLS %}
ssl_session_timeout 1d;
ssl_session_cache shared:MozSSL:10m;
{% endif %}
ssl_ecdh_curve X25519:prime256v1:secp384r1;
{% if "TLSv1.2" in SSL_PROTOCOLS +%}
ssl_dhparam /etc/nginx/dhparam;
	{% if SSL_CIPHERS_CUSTOM|default('')|trim != "" %}
ssl_ciphers {{ SSL_CIPHERS_CUSTOM }};
	{% else %}
		{% if SSL_CIPHERS_LEVEL == "old" %}
ssl_ciphers @SECLEVEL=0:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;
		{% elif SSL_CIPHERS_LEVEL == "intermediate" %}
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
		{% elif SSL_PROTOCOLS != "TLSv1.3" %}
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		{% endif %}
	{% endif %}
{% endif %}

{% if HTTP2 == "yes" %}
http2 on;
{% endif %}
{% set common_options = " ssl" %}
{% if USE_PROXY_PROTOCOL == "yes" %}
	{% set common_options = common_options ~ " proxy_protocol" %}
{% endif %}
{% for k, port in all.items() if k.startswith("HTTPS_PORT") %}
listen 0.0.0.0:{{ port }}{{ common_options }};
	{% if USE_IPV6 == "yes" %}
listen [::]:{{ port }}{{ common_options }};
	{% endif %}
{% endfor %}

{% if "TLSv1.3" in SSL_PROTOCOLS and HTTP3 == "yes" and USE_PROXY_PROTOCOL == "no" %}
http3 on;
	{% for k, port in all.items() if k.startswith("HTTPS_PORT") %}
listen 0.0.0.0:{{ port }} quic;
		{% if USE_IPV6 == "yes" %}
listen [::]:{{ port }} quic;
		{% endif %}
	{% endfor %}
add_header Alt-Svc 'h3=":{{ HTTP3_ALT_SVC_PORT }}"; ma=86400';
{% endif %}

ssl_certificate_by_lua_block {
	local class         = require "middleclass"
	local clogger       = require "bunkerweb.logger"
	local helpers       = require "bunkerweb.helpers"
	local utils         = require "bunkerweb.utils"
	local cdatastore    = require "bunkerweb.datastore"
	local cclusterstore = require "bunkerweb.clusterstore"
	local cjson         = require "cjson"
	local ssl			= require "ngx.ssl"

	local ngx = ngx
	local ngx_req = ngx.req
	local is_internal = ngx_req.is_internal
	local ERR = ngx.ERR
	local INFO = ngx.INFO
	local clear_certs = ssl.clear_certs
	local set_cert = ssl.set_cert
	local set_priv_key = ssl.set_priv_key
	local require_plugin = helpers.require_plugin
	local new_plugin = helpers.new_plugin
	local call_plugin = helpers.call_plugin
	local tostring = tostring

	-- Start ssl_certificate phase
	local logger    = clogger:new("SSL-CERTIFICATE")
	local datastore = cdatastore:new()
	logger:log(INFO, "ssl_certificate phase started")

	-- Get plugins order
	local order, err = datastore:get("plugins_order", true)
	if not order then
		logger:log(ERR, "can't get plugins order from datastore : " .. err)
		return
	end

	-- Call ssl_certificate() methods
	logger:log(INFO, "calling ssl_certificate() methods of plugins ...")
	for i, plugin_id in ipairs(order.ssl_certificate) do
		-- Require call
		local plugin_lua, err = require_plugin(plugin_id)
		if plugin_lua == false then
			logger:log(ERR, err)
		elseif plugin_lua == nil then
			logger:log(INFO, err)
		else
			-- Check if plugin has ssl_certificate method
			if plugin_lua.ssl_certificate ~= nil then
				-- New call
				local ok, plugin_obj = new_plugin(plugin_lua)
				if not ok then
					logger:log(ERR, plugin_obj)
				else
					local ok, ret = call_plugin(plugin_obj, "ssl_certificate")
					if not ok then
						logger:log(ERR, ret)
					elseif not ret.ret then
						logger:log(ERR, plugin_id .. ":ssl_certificate() call failed : " .. ret.msg)
					else
						logger:log(INFO, plugin_id .. ":ssl_certificate() call successful : " .. ret.msg)
						if ret.status then
							logger:log(INFO, plugin_id .. " is setting certificate/key : " .. ret.msg)
							local ok, err = clear_certs()
							if not ok then
								logger:log(ERR, "error while clearing certificates : " .. err)
							end
							ok, err = set_cert(ret.status[1])
							if not ok then
								logger:log(ERR, "error while setting certificate : " .. err)
							else
								local ok, err = set_priv_key(ret.status[2])
								if not ok then
									logger:log(ERR, "error while setting private key : " .. err)
								else
									logger:log(INFO, "certificate set by " .. plugin_id)
									return true
								end
							end
						end
					end
				end
			else
				logger:log(INFO, "skipped execution of " .. plugin_id .. " because method ssl_certificate() is not defined")
			end
		end
	end
	logger:log(INFO, "called ssl_certificate() methods of plugins")

	logger:log(INFO, "ssl_certificate phase ended")

	return true
}
