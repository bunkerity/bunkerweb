server {
	server_name {{ API_SERVER_NAME }};

	# HTTP listen
{% if API_LISTEN_HTTP == "yes" +%}
	listen {{ API_LISTEN_IP }}:{{ API_HTTP_PORT }} reuseport;
	{% if API_LISTEN_IP != "127.0.0.1" +%}
	listen 127.0.0.1:{{ API_HTTP_PORT }} reuseport;
	{% endif %}
{% endif %}

{% set os = import("os") %}
{% if API_LISTEN_HTTPS == "yes" +%}
	{% if os.path.isfile("/var/cache/bunkerweb/jobs/api-server-cert.pem") +%}
	ssl_protocols TLSv1.3;
	ssl_prefer_server_ciphers off;
	ssl_session_tickets off;
	ssl_ecdh_curve X25519:prime256v1:secp384r1;
	ssl_certificate /var/cache/bunkerweb/jobs/api-server-cert.pem;
	ssl_certificate_key /var/cache/bunkerweb/jobs/api-server-cert.key;
	http2 on;
	listen {{ API_LISTEN_IP }}:{{ API_HTTPS_PORT }} ssl reuseport;
		{% if API_LISTEN_IP != "127.0.0.1" +%}
	listen 127.0.0.1:{{ API_HTTPS_PORT }} ssl reuseport;
		{% endif %}
	{% else +%}
	# no cert, fallback to HTTP
	listen {{ API_LISTEN_IP }}:{{ API_HTTPS_PORT }} reuseport;
		{% if API_LISTEN_IP != "127.0.0.1" +%}
	listen 127.0.0.1:{{ API_HTTPS_PORT }} reuseport;
		{% endif %}
	{% endif %}
{% endif %}

	# maximum body size for API
	client_max_body_size 1G;

	# default mime type is JSON
	default_type 'application/json';

	# variables
	set $reason '';
	set $reason_data '';
	set $ctx_ref '';

	# check IP and do the API call
	access_by_lua_block {
		-- Instantiate objects and import required modules
		local logger	= require "bunkerweb.logger":new("API")
		local helpers	= require "bunkerweb.helpers"

		local ngx = ngx
		local INFO = ngx.INFO
		local ERR = ngx.ERR
		local WARN = ngx.WARN
		local NOTICE = ngx.NOTICE
		local HTTP_CLOSE = ngx.HTTP_CLOSE
		local exit = ngx.exit
		local say = ngx.say
		local fill_ctx = helpers.fill_ctx
		local tostring = tostring

		-- Start API handler
		logger:log(INFO, "API handler started")

		-- Fill ctx
		logger:log(INFO, "filling ngx.ctx ...")
		local ok, ret, errors, ctx = fill_ctx(true)
		if not ok then
			logger:log(ERR, "fill_ctx() failed : " .. ret)
		elseif errors then
			for i, error in ipairs(errors) do
				logger:log(ERR, "fill_ctx() error " .. tostring(i) .. " : " .. error)
			end
		end
		logger:log(INFO, "ngx.ctx filled (ret = " .. ret .. ")")

		-- Check host header
		if not ctx.bw.http_host or ctx.bw.http_host ~= "{{ API_SERVER_NAME }}" then
			logger:log(WARN, "wrong Host header from IP " .. ctx.bw.remote_addr)
			return exit(HTTP_CLOSE)
		end

		-- Instantiate API helper and validate token/ip
		local api = require "bunkerweb.api":new(ctx)
		local ok, err = api:is_allowed_token()
		if not ok then
			logger:log(WARN, "can't validate API token from IP " .. ctx.bw.remote_addr .. " : " .. err)
			return exit(HTTP_CLOSE)
		end

		-- Check IP
		local ok, err = api:is_allowed_ip()
		if not ok then
			logger:log(WARN, "can't validate access from IP " .. ctx.bw.remote_addr .. " : " .. err)
			return exit(HTTP_CLOSE)
		end
		logger:log(NOTICE, "validated access from IP " .. ctx.bw.remote_addr)

		-- Do API call
		local ok, err, status, resp = api:do_api_call()
		if not ok then
			logger:log(WARN, "call from " .. ctx.bw.remote_addr .. " on " .. ctx.bw.uri .. " failed : " .. err)
		else
			logger:log(NOTICE, "successful call from " .. ctx.bw.remote_addr .. " on " .. ctx.bw.uri .. " : " .. err)
		end

		-- Stop API handler
		logger:log(INFO, "API handler ended")

		-- Send response
		ngx.status = status
		say(resp)
		return exit(status)
	}
}
