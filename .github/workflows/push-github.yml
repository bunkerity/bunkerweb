name: Push on GitHub (REUSABLE)

on:
  workflow_call:
    inputs:
      VERSION:
        required: true
        type: string
      PRERELEASE:
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      # Get PDF doc
      - name: Get documentation
        if: inputs.VERSION != 'testing'
        uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # v4.2.0
        with:
          name: BunkerWeb_documentation_v${{ inputs.VERSION }}.pdf
      # Create tag
      - uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72 # v1.7.2
        name: Create tag
        if: inputs.VERSION != 'testing'
        with:
          tag: "v${{ inputs.VERSION }}"
          message: "v${{ inputs.VERSION }}"
          force_push_tag: true
      # Create tag
      - uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72 # v1.7.2
        name: Create tag
        if: inputs.VERSION == 'testing'
        with:
          tag: "${{ inputs.VERSION }}"
          message: "${{ inputs.VERSION }}"
          force_push_tag: true
      # Extract and preserve changelog formatting
      - name: Extract changelog
        if: inputs.VERSION != 'testing'
        run: |
          # Extract the changelog content
          content=$(awk -v n=2 '/##/{n--}; n > 0' CHANGELOG.md | grep -v '# Changelog' | grep -v '##' | sed '/^$/d')
          echo "DECODED_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      # Create release
      - name: Create release
        if: inputs.VERSION != 'testing'
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        with:
          body: |
            Documentation : https://docs.bunkerweb.io/${{ inputs.VERSION }}/

            Docker tags :
            - BunkerWeb : `bunkerity/bunkerweb:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb:${{ inputs.VERSION }}`
            - Scheduler : `bunkerity/bunkerweb-scheduler:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-scheduler:${{ inputs.VERSION }}`
            - Autoconf : `bunkerity/bunkerweb-autoconf:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-autoconf:${{ inputs.VERSION }}`
            - UI : `bunkerity/bunkerweb-ui:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-ui:${{ inputs.VERSION }}`

            Linux packages : https://packagecloud.io/app/bunkerity/bunkerweb/search?q=${{ inputs.VERSION }}&filter=all&dist=

            Changelog :
            ${{ env.DECODED_CHANGELOG }}
          draft: true
          prerelease: ${{ inputs.PRERELEASE }}
          name: v${{ inputs.VERSION }}
          tag_name: v${{ inputs.VERSION }}
          discussion_category_name: Announcements
          files: BunkerWeb_documentation_v${{ inputs.VERSION }}.pdf
      # Create release
      - name: Create release
        if: inputs.VERSION == 'testing'
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        with:
          body: |
            **The testing version of BunkerWeb should not be used in production, please use the latest stable version instead.**

            Documentation : https://docs.bunkerweb.io/${{ inputs.VERSION }}/

            Docker tags :
            - BunkerWeb : `bunkerity/bunkerweb:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb:${{ inputs.VERSION }}`
            - Scheduler : `bunkerity/bunkerweb-scheduler:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-scheduler:${{ inputs.VERSION }}`
            - Autoconf : `bunkerity/bunkerweb-autoconf:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-autoconf:${{ inputs.VERSION }}`
            - UI : `bunkerity/bunkerweb-ui:${{ inputs.VERSION }}` or `ghcr.io/bunkerity/bunkerweb-ui:${{ inputs.VERSION }}`

            Linux packages : https://packagecloud.io/app/bunkerity/bunkerweb/search?q=${{ inputs.VERSION }}&filter=all&dist=

            Please note that when using Linux Debian or Ubuntu integration, you will need to add the `force-bad-version` directive to your `/etc/dpkg/dpkg.cfg` file before installing the testing version of BunkerWeb.
          draft: false
          prerelease: ${{ inputs.PRERELEASE }}
          name: Testing
          tag_name: ${{ inputs.VERSION }}
