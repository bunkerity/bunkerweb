name: Core test Linux (REUSABLE)

on:
  workflow_call:
    inputs:
      TEST:
        required: true
        type: string
      RELEASE:
        required: true
        type: string

jobs:
  tests:
    runs-on: ubuntu-24.04
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Python 3.12
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.12"
      - name: Install Firefox manually and dependencies
        run: |
          sudo add-apt-repository ppa:mozillateam/ppa -y
          sudo apt purge -y firefox
          echo '
          Package: *
          Pin: release o=LP-PPA-mozillateam
          Pin-Priority: 1001

          Package: firefox
          Pin: version 1:1snap1-0ubuntu5
          Pin-Priority: -1
          ' | sudo tee /etc/apt/preferences.d/mozilla-firefox
          export NEEDRESTART_SUSPEND=1
          export DEBIAN_FRONTEND=noninteractive
          sudo -E apt install --no-install-recommends -y openssl git nodejs tar bzip2 wget curl grep libx11-xcb1 libappindicator3-1 libasound2t64 libdbus-glib-1-2 libxtst6 libxt6 php-fpm unzip firefox
      - name: Download geckodriver
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          max_attempts: 3
          timeout_minutes: 20
          command: |
            GECKODRIVER_VERSION=`curl -i https://github.com/mozilla/geckodriver/releases/latest | grep -Po 'v[0-9]+\.[0-9]+\.[0-9]+'` && \
            wget -O geckodriver.tar.gz -w 5 https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz
            sudo tar -xzf geckodriver.tar.gz -C /usr/local/bin
            sudo chmod +x /usr/local/bin/geckodriver
            rm -f geckodriver.tar.gz
      - name: Login to ghcr
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull BW linux ubuntu test image
        run: docker pull ghcr.io/bunkerity/ubuntu-tests:${{ inputs.RELEASE }}
      - name: Copy deb file to host
        if: inputs.RELEASE != '1.5'
        run: |
          container_id=$(docker create "ghcr.io/bunkerity/ubuntu-tests:${{ inputs.RELEASE }}")
          docker cp "$container_id:/opt/bunkerweb_${{ inputs.RELEASE }}-1_amd64.deb" "/tmp/bunkerweb.deb"
          docker rm "$container_id"
      - name: Copy deb file to host 1.5
        if: inputs.RELEASE == '1.5'
        run: |
          container_id=$(docker create "ghcr.io/bunkerity/ubuntu-tests:${{ inputs.RELEASE }}")
          docker cp "$container_id:/opt/bunkerweb_1.5-dev-1_amd64.deb" "/tmp/bunkerweb.deb"
          docker rm "$container_id"
      - name: Install NGINX
        run: |
          export NEEDRESTART_SUSPEND=1
          export DEBIAN_FRONTEND=noninteractive
          sudo -E apt install -y gnupg2 ca-certificates lsb-release ubuntu-keyring
          curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu `lsb_release -cs` nginx" | sudo tee /etc/apt/sources.list.d/nginx.list
          sudo apt update
          sudo -E apt install -y nginx=1.26.3-1~noble
      - name: Fix version without a starting number
        if: inputs.RELEASE == 'testing' || inputs.RELEASE == 'dev' || inputs.RELEASE == 'ui' || inputs.RELEASE == '1.5'
        run: echo "force-bad-version" | sudo tee -a /etc/dpkg/dpkg.cfg
      - name: Edit configuration files
        run: |
          # Misc
          echo "127.0.0.1 www.example.com" | sudo tee -a /etc/hosts
          echo "127.0.0.1 app1.example.com" | sudo tee -a /etc/hosts
          echo "127.0.0.1 app2.example.com" | sudo tee -a /etc/hosts
          echo "127.0.0.1 app3.example.com" | sudo tee -a /etc/hosts
          # BunkerWeb
          sudo mkdir -p /etc/bunkerweb
          echo "BUNKERWEB_INSTANCES=127.0.0.1" | sudo tee /etc/bunkerweb/variables.env
          echo "SERVER_NAME=" | sudo tee -a /etc/bunkerweb/variables.env
          echo "HTTP_PORT=80" | sudo tee -a /etc/bunkerweb/variables.env
          echo "HTTPS_PORT=443" | sudo tee -a /etc/bunkerweb/variables.env
          echo "BAD_BEHAVIOR_THRESHOLD=20" | sudo tee -a /etc/bunkerweb/variables.env
          echo 'DNS_RESOLVERS=9.9.9.9 8.8.8.8 8.8.4.4' | sudo tee -a /etc/bunkerweb/variables.env
          echo 'API_LISTEN_IP=127.0.0.1' | sudo tee -a /etc/bunkerweb/variables.env
          echo "MULTISITE=yes" | sudo tee -a /etc/bunkerweb/variables.env
          echo "LOG_LEVEL=debug" | sudo tee -a /etc/bunkerweb/variables.env
          echo "USE_BUNKERNET=no" | sudo tee -a /etc/bunkerweb/variables.env
          echo "USE_BLACKLIST=no" | sudo tee -a /etc/bunkerweb/variables.env
          echo "SEND_ANONYMOUS_REPORT=no" | sudo tee -a /etc/bunkerweb/variables.env
          echo "USE_CLIENT_CACHE=yes" | sudo tee -a /etc/bunkerweb/variables.env
          echo "USE_GZIP=yes" | sudo tee -a /etc/bunkerweb/variables.env
          echo "DATASTORE_MEMORY_SIZE=384m" | sudo tee -a /etc/bunkerweb/variables.env
          echo "UI_HOST=http://127.0.0.1:7000" | sudo tee -a /etc/bunkerweb/variables.env
          sudo touch /etc/bunkerweb/ui.env

          sudo chown nginx:nginx /etc/bunkerweb/variables.env /etc/bunkerweb/ui.env
          sudo chmod 777 /etc/bunkerweb/variables.env /etc/bunkerweb/ui.env
      - name: Install BunkerWeb
        run: |
          export NEEDRESTART_SUSPEND=1
          export DEBIAN_FRONTEND=noninteractive
          sudo -E apt install -fy /tmp/bunkerweb.deb
      - name: Run tests
        run: |
          export MAKEFLAGS="-j $(nproc)"
          pip install --break-system-packages --no-cache-dir --ignore-installed --require-hashes -r src/deps/requirements-deps.txt
          pip install --break-system-packages --no-cache-dir --require-hashes -r tests/ui/requirements.txt
          cd ./tests/ui
          touch test.txt
          zip test.zip test.txt
          rm test.txt
          echo '{
            "id": "discord",
            "name": "Discord",
            "description": "Send alerts to a Discord channel (using webhooks).",
            "version": "0.1",
            "stream": "no",
            "settings": {}
            }' | tee plugin.json
          zip discord.zip plugin.json
          rm plugin.json
          sudo truncate -s 0 /var/log/bunkerweb/error.log
          chmod +x ./tests.sh
          ./tests.sh "linux" ${{ inputs.TEST }}
        env:
          MODE: ${{ inputs.RELEASE }}
