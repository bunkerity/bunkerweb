name: Perform staging tests (REUSABLE)

on:
  workflow_call:
    inputs:
      TYPE:
        required: true
        type: string
      RUNS_ON:
        required: true
        type: string
    # secrets:
    #   PRIVATE_REGISTRY:
    #     required: true
    #   PRIVATE_REGISTRY_TOKEN:
    #     required: true
    #   TEST_DOMAINS:
    #     required: true
    #   ROOT_DOMAIN:
    #     required: true

jobs:
  tests:
    runs-on: ${{ fromJSON(inputs.RUNS_ON) }}
    steps:
      # Prepare
      - name: Checkout source code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Login to ghcr
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: docker pull ghcr.io/bunkerity/bunkerweb-tests:testing && docker tag ghcr.io/bunkerity/bunkerweb-tests:testing local/bunkerweb-tests:latest
        if: contains(fromJSON('["linux", "k8s"]'), inputs.TYPE) != true
      - run: docker pull ghcr.io/bunkerity/scheduler-tests:testing && docker tag ghcr.io/bunkerity/scheduler-tests:testing local/scheduler-tests:latest
        if: contains(fromJSON('["linux", "k8s"]'), inputs.TYPE) != true
      - run: docker pull ghcr.io/bunkerity/autoconf-tests:testing && docker tag ghcr.io/bunkerity/autoconf-tests:testing local/autoconf-tests:latest
        if: contains(fromJSON('["autoconf"]'), inputs.TYPE)
      - name: Install test dependencies
        run: PIP_BREAK_SYSTEM_PACKAGES=1 pip3 install --no-cache-dir --require-hashes --no-deps -r tests/requirements.txt
      - name: Install Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        if: inputs.TYPE == 'k8s'
      - uses: actions/download-artifact@v5.0.0
        with:
          name: tf-k8s
          path: /tmp
        if: inputs.TYPE == 'k8s'
      - run: |
          echo "$SECRET_KEY" > /tmp/.secret_key
          openssl enc -d -in /tmp/terraform.tar.enc -aes-256-cbc -pbkdf2 -iter 100000 -md sha256 -pass file:/tmp/.secret_key -out /tmp/terraform.tar
          rm -f /tmp/.secret_key
          tar xf /tmp/terraform.tar -C /
          mkdir /tmp/reg
          cp tests/terraform/k8s-reg.tf /tmp/reg
          cp tests/terraform/providers.tf /tmp/reg
          cd /tmp/reg
          export TF_VAR_k8s_reg_user=${REG_USER}
          export TF_VAR_k8s_reg_token=${REG_TOKEN}
          terraform init
          terraform apply -auto-approve
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REG_USER: ${{ github.actor }}
          REG_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: inputs.TYPE == 'k8s'
      - uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4.0.1
        if: inputs.TYPE == 'k8s'
        with:
          version: "v1.29.1"
      - uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        if: inputs.TYPE == 'k8s'
      - name: Pull BW linux ubuntu test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/ubuntu-tests:testing && docker tag ghcr.io/bunkerity/ubuntu-tests:testing local/ubuntu:latest
      - name: Pull BW linux debian Bookworm test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/debian-bookworm-tests:testing && docker tag ghcr.io/bunkerity/debian-bookworm-tests:testing local/debian-bookworm:latest
      - name: Pull BW linux debian Trixie test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/debian-trixie-tests:testing && docker tag ghcr.io/bunkerity/debian-trixie-tests:testing local/debian-trixie:latest
      - name: Pull BW linux fedora 41 test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/fedora-41-tests:testing && docker tag ghcr.io/bunkerity/fedora-41-tests:testing local/fedora-41:latest
      - name: Pull BW linux fedora 42 test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/fedora-42-tests:testing && docker tag ghcr.io/bunkerity/fedora-42-tests:testing local/fedora-42:latest
      - name: Pull BW linux rhel-8 test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/rhel-8-tests:testing && docker tag ghcr.io/bunkerity/rhel-8-tests:testing local/rhel-8:latest
      - name: Pull BW linux rhel-9 test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/rhel-9-tests:testing && docker tag ghcr.io/bunkerity/rhel-9-tests:testing local/rhel-9:latest
      - name: Pull BW linux rhel-10 test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/rhel-10-tests:testing && docker tag ghcr.io/bunkerity/rhel-10-tests:testing local/rhel-10:latest
      - name: Pull BW linux ubuntu jammy test image
        if: inputs.TYPE == 'linux'
        run: docker pull ghcr.io/bunkerity/ubuntu-jammy-tests:testing && docker tag ghcr.io/bunkerity/ubuntu-jammy-tests:testing local/ubuntu-jammy:latest
      # Do tests
      - name: Run tests
        if: inputs.TYPE == 'docker'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "${{ inputs.TYPE }}"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_DOCKER }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run tests
        if: inputs.TYPE == 'autoconf'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "${{ inputs.TYPE }}"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_AUTOCONF }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run tests
        if: inputs.TYPE == 'k8s'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "kubernetes"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_KUBERNETES }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
          KUBECONFIG: "/tmp/k8s/kubeconfig"
          PRIVATE_REGISTRY: ${{ secrets.PRIVATE_REGISTRY }}
          IMAGE_TAG: "testing"
      - name: Run Linux ubuntu tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "ubuntu"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux debian Bookworm tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "debian-bookworm"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux debian Trixie tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "debian-trixie"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux fedora 41 tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "fedora-41"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux fedora 42 tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "fedora-42"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux rhel-8 tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "rhel-8"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux rhel-9 tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "rhel-9"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux rhel-10 tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "rhel-10"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
      - name: Run Linux ubuntu-jammy tests
        if: inputs.TYPE == 'linux'
        run: export $(echo "$TEST_DOMAINS" | xargs) && chmod +x ./tests/main.py && ./tests/main.py "linux" "ubuntu-jammy"
        env:
          TEST_DOMAINS: ${{ secrets.TEST_DOMAINS_LINUX }}
          ROOT_DOMAIN: ${{ secrets.ROOT_DOMAIN }}
